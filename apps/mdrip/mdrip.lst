                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.1.0 #7066 (Nov 22 2011) (MINGW32)
                              4 ; This file was generated Fri Feb 03 00:37:36 2017
                              5 ;--------------------------------------------------------
                              6 	.module mdrip
                              7 	.optsdcc -mmcs51 --model-medium
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _main
                             13 	.globl _configBt
                             14 	.globl _setADCInputs
                             15 	.globl _get_packet
                             16 	.globl _delayFor
                             17 	.globl _WaitForPacket
                             18 	.globl _strobe_radio
                             19 	.globl _swap_channel
                             20 	.globl _printfUSB
                             21 	.globl _goToSleep
                             22 	.globl _killWithWatchdog
                             23 	.globl _reset_offsets
                             24 	.globl _makeAllOutputsLow
                             25 	.globl _makeAllOutputs
                             26 	.globl _print_packet
                             27 	.globl _getFonaGPS
                             28 	.globl _getFonaMillivolts
                             29 	.globl _fonaConnect
                             30 	.globl _fonaDisable
                             31 	.globl _enableFona
                             32 	.globl _configFona
                             33 	.globl _sendAT
                             34 	.globl _getFonaString
                             35 	.globl _initUart1
                             36 	.globl _doServices
                             37 	.globl _clearRxErrors
                             38 	.globl _dexcom_src_to_ascii
                             39 	.globl _dex_num_decoder
                             40 	.globl _bit_reverse_bytes
                             41 	.globl _min8
                             42 	.globl _bit_reverse_byte
                             43 	.globl _getPacketPassedChecksum
                             44 	.globl _blink_red_led
                             45 	.globl _blink_yellow_led
                             46 	.globl _uartDisable
                             47 	.globl _uartEnable
                             48 	.globl _switchToRCOSC
                             49 	.globl _ISR_ST
                             50 	.globl _sleepInit
                             51 	.globl _AES128_CBC_encrypt_buffer
                             52 	.globl _adcSetMillivoltCalibration
                             53 	.globl _adcReadVddMillivolts
                             54 	.globl _strlen
                             55 	.globl _memset
                             56 	.globl _strcmp
                             57 	.globl _strcat
                             58 	.globl _strcpy
                             59 	.globl _memcpy
                             60 	.globl _sprintf
                             61 	.globl _printf
                             62 	.globl _uart1RxReceiveByte
                             63 	.globl _uart1RxAvailable
                             64 	.globl _uart1TxSendByte
                             65 	.globl _uart1TxAvailable
                             66 	.globl _uart1SetBaudRate
                             67 	.globl _uart1Init
                             68 	.globl _setDigitalOutput
                             69 	.globl _radioQueueRxDoneWithPacket
                             70 	.globl _radioQueueRxCurrentPacket
                             71 	.globl _radioQueueInit
                             72 	.globl _radioMacResume
                             73 	.globl _radioMacSleep
                             74 	.globl _radioMacStrobe
                             75 	.globl _radioMacInit
                             76 	.globl _radioCrcPassed
                             77 	.globl _usbComTxSend
                             78 	.globl _usbComTxSendByte
                             79 	.globl _usbComTxAvailable
                             80 	.globl _usbComService
                             81 	.globl _usbShowStatusWithGreenLed
                             82 	.globl _delayMs
                             83 	.globl _getMs
                             84 	.globl _disableUsbPullup
                             85 	.globl _enableUsbPullup
                             86 	.globl _usbPowerPresent
                             87 	.globl _boardService
                             88 	.globl _boardClockInit
                             89 	.globl _systemInit
                             90 	.globl _SrcNameTable
                             91 	.globl _AT_TIMEOUT
                             92 	.globl _dmaDesc
                             93 	.globl _PM2_BUF
                             94 	.globl _WaitForPacket_PARM_3
                             95 	.globl _swap_channel_PARM_2
                             96 	.globl _dexcom_src_to_ascii_PARM_2
                             97 	.globl _WaitForPacket_PARM_2
                             98 	.globl _bit_reverse_bytes_PARM_2
                             99 	.globl _min8_PARM_2
                            100 	.globl _intMaxStrLen
                            101 	.globl _sequential_missed_packets
                            102 	.globl _usbEnabled
                            103 	.globl _needsTimingCalibration
                            104 	.globl _getSrcValue
                            105 	.globl _putchar
                            106 ;--------------------------------------------------------
                            107 ; special function registers
                            108 ;--------------------------------------------------------
                            109 	.area RSEG    (ABS,DATA)
   0000                     110 	.org 0x0000
                    0080    111 Fmdrip$P0$0$0 == 0x0080
                    0080    112 _P0	=	0x0080
                    0081    113 Fmdrip$SP$0$0 == 0x0081
                    0081    114 _SP	=	0x0081
                    0082    115 Fmdrip$DPL0$0$0 == 0x0082
                    0082    116 _DPL0	=	0x0082
                    0083    117 Fmdrip$DPH0$0$0 == 0x0083
                    0083    118 _DPH0	=	0x0083
                    0084    119 Fmdrip$DPL1$0$0 == 0x0084
                    0084    120 _DPL1	=	0x0084
                    0085    121 Fmdrip$DPH1$0$0 == 0x0085
                    0085    122 _DPH1	=	0x0085
                    0086    123 Fmdrip$U0CSR$0$0 == 0x0086
                    0086    124 _U0CSR	=	0x0086
                    0087    125 Fmdrip$PCON$0$0 == 0x0087
                    0087    126 _PCON	=	0x0087
                    0088    127 Fmdrip$TCON$0$0 == 0x0088
                    0088    128 _TCON	=	0x0088
                    0089    129 Fmdrip$P0IFG$0$0 == 0x0089
                    0089    130 _P0IFG	=	0x0089
                    008A    131 Fmdrip$P1IFG$0$0 == 0x008a
                    008A    132 _P1IFG	=	0x008a
                    008B    133 Fmdrip$P2IFG$0$0 == 0x008b
                    008B    134 _P2IFG	=	0x008b
                    008C    135 Fmdrip$PICTL$0$0 == 0x008c
                    008C    136 _PICTL	=	0x008c
                    008D    137 Fmdrip$P1IEN$0$0 == 0x008d
                    008D    138 _P1IEN	=	0x008d
                    008F    139 Fmdrip$P0INP$0$0 == 0x008f
                    008F    140 _P0INP	=	0x008f
                    0090    141 Fmdrip$P1$0$0 == 0x0090
                    0090    142 _P1	=	0x0090
                    0091    143 Fmdrip$RFIM$0$0 == 0x0091
                    0091    144 _RFIM	=	0x0091
                    0092    145 Fmdrip$DPS$0$0 == 0x0092
                    0092    146 _DPS	=	0x0092
                    0093    147 Fmdrip$MPAGE$0$0 == 0x0093
                    0093    148 _MPAGE	=	0x0093
                    0095    149 Fmdrip$ENDIAN$0$0 == 0x0095
                    0095    150 _ENDIAN	=	0x0095
                    0098    151 Fmdrip$S0CON$0$0 == 0x0098
                    0098    152 _S0CON	=	0x0098
                    009A    153 Fmdrip$IEN2$0$0 == 0x009a
                    009A    154 _IEN2	=	0x009a
                    009B    155 Fmdrip$S1CON$0$0 == 0x009b
                    009B    156 _S1CON	=	0x009b
                    009C    157 Fmdrip$T2CT$0$0 == 0x009c
                    009C    158 _T2CT	=	0x009c
                    009D    159 Fmdrip$T2PR$0$0 == 0x009d
                    009D    160 _T2PR	=	0x009d
                    009E    161 Fmdrip$T2CTL$0$0 == 0x009e
                    009E    162 _T2CTL	=	0x009e
                    00A0    163 Fmdrip$P2$0$0 == 0x00a0
                    00A0    164 _P2	=	0x00a0
                    00A1    165 Fmdrip$WORIRQ$0$0 == 0x00a1
                    00A1    166 _WORIRQ	=	0x00a1
                    00A2    167 Fmdrip$WORCTRL$0$0 == 0x00a2
                    00A2    168 _WORCTRL	=	0x00a2
                    00A3    169 Fmdrip$WOREVT0$0$0 == 0x00a3
                    00A3    170 _WOREVT0	=	0x00a3
                    00A4    171 Fmdrip$WOREVT1$0$0 == 0x00a4
                    00A4    172 _WOREVT1	=	0x00a4
                    00A5    173 Fmdrip$WORTIME0$0$0 == 0x00a5
                    00A5    174 _WORTIME0	=	0x00a5
                    00A6    175 Fmdrip$WORTIME1$0$0 == 0x00a6
                    00A6    176 _WORTIME1	=	0x00a6
                    00A8    177 Fmdrip$IEN0$0$0 == 0x00a8
                    00A8    178 _IEN0	=	0x00a8
                    00A9    179 Fmdrip$IP0$0$0 == 0x00a9
                    00A9    180 _IP0	=	0x00a9
                    00AB    181 Fmdrip$FWT$0$0 == 0x00ab
                    00AB    182 _FWT	=	0x00ab
                    00AC    183 Fmdrip$FADDRL$0$0 == 0x00ac
                    00AC    184 _FADDRL	=	0x00ac
                    00AD    185 Fmdrip$FADDRH$0$0 == 0x00ad
                    00AD    186 _FADDRH	=	0x00ad
                    00AE    187 Fmdrip$FCTL$0$0 == 0x00ae
                    00AE    188 _FCTL	=	0x00ae
                    00AF    189 Fmdrip$FWDATA$0$0 == 0x00af
                    00AF    190 _FWDATA	=	0x00af
                    00B1    191 Fmdrip$ENCDI$0$0 == 0x00b1
                    00B1    192 _ENCDI	=	0x00b1
                    00B2    193 Fmdrip$ENCDO$0$0 == 0x00b2
                    00B2    194 _ENCDO	=	0x00b2
                    00B3    195 Fmdrip$ENCCS$0$0 == 0x00b3
                    00B3    196 _ENCCS	=	0x00b3
                    00B4    197 Fmdrip$ADCCON1$0$0 == 0x00b4
                    00B4    198 _ADCCON1	=	0x00b4
                    00B5    199 Fmdrip$ADCCON2$0$0 == 0x00b5
                    00B5    200 _ADCCON2	=	0x00b5
                    00B6    201 Fmdrip$ADCCON3$0$0 == 0x00b6
                    00B6    202 _ADCCON3	=	0x00b6
                    00B8    203 Fmdrip$IEN1$0$0 == 0x00b8
                    00B8    204 _IEN1	=	0x00b8
                    00B9    205 Fmdrip$IP1$0$0 == 0x00b9
                    00B9    206 _IP1	=	0x00b9
                    00BA    207 Fmdrip$ADCL$0$0 == 0x00ba
                    00BA    208 _ADCL	=	0x00ba
                    00BB    209 Fmdrip$ADCH$0$0 == 0x00bb
                    00BB    210 _ADCH	=	0x00bb
                    00BC    211 Fmdrip$RNDL$0$0 == 0x00bc
                    00BC    212 _RNDL	=	0x00bc
                    00BD    213 Fmdrip$RNDH$0$0 == 0x00bd
                    00BD    214 _RNDH	=	0x00bd
                    00BE    215 Fmdrip$SLEEP$0$0 == 0x00be
                    00BE    216 _SLEEP	=	0x00be
                    00C0    217 Fmdrip$IRCON$0$0 == 0x00c0
                    00C0    218 _IRCON	=	0x00c0
                    00C1    219 Fmdrip$U0DBUF$0$0 == 0x00c1
                    00C1    220 _U0DBUF	=	0x00c1
                    00C2    221 Fmdrip$U0BAUD$0$0 == 0x00c2
                    00C2    222 _U0BAUD	=	0x00c2
                    00C4    223 Fmdrip$U0UCR$0$0 == 0x00c4
                    00C4    224 _U0UCR	=	0x00c4
                    00C5    225 Fmdrip$U0GCR$0$0 == 0x00c5
                    00C5    226 _U0GCR	=	0x00c5
                    00C6    227 Fmdrip$CLKCON$0$0 == 0x00c6
                    00C6    228 _CLKCON	=	0x00c6
                    00C7    229 Fmdrip$MEMCTR$0$0 == 0x00c7
                    00C7    230 _MEMCTR	=	0x00c7
                    00C9    231 Fmdrip$WDCTL$0$0 == 0x00c9
                    00C9    232 _WDCTL	=	0x00c9
                    00CA    233 Fmdrip$T3CNT$0$0 == 0x00ca
                    00CA    234 _T3CNT	=	0x00ca
                    00CB    235 Fmdrip$T3CTL$0$0 == 0x00cb
                    00CB    236 _T3CTL	=	0x00cb
                    00CC    237 Fmdrip$T3CCTL0$0$0 == 0x00cc
                    00CC    238 _T3CCTL0	=	0x00cc
                    00CD    239 Fmdrip$T3CC0$0$0 == 0x00cd
                    00CD    240 _T3CC0	=	0x00cd
                    00CE    241 Fmdrip$T3CCTL1$0$0 == 0x00ce
                    00CE    242 _T3CCTL1	=	0x00ce
                    00CF    243 Fmdrip$T3CC1$0$0 == 0x00cf
                    00CF    244 _T3CC1	=	0x00cf
                    00D0    245 Fmdrip$PSW$0$0 == 0x00d0
                    00D0    246 _PSW	=	0x00d0
                    00D1    247 Fmdrip$DMAIRQ$0$0 == 0x00d1
                    00D1    248 _DMAIRQ	=	0x00d1
                    00D2    249 Fmdrip$DMA1CFGL$0$0 == 0x00d2
                    00D2    250 _DMA1CFGL	=	0x00d2
                    00D3    251 Fmdrip$DMA1CFGH$0$0 == 0x00d3
                    00D3    252 _DMA1CFGH	=	0x00d3
                    00D4    253 Fmdrip$DMA0CFGL$0$0 == 0x00d4
                    00D4    254 _DMA0CFGL	=	0x00d4
                    00D5    255 Fmdrip$DMA0CFGH$0$0 == 0x00d5
                    00D5    256 _DMA0CFGH	=	0x00d5
                    00D6    257 Fmdrip$DMAARM$0$0 == 0x00d6
                    00D6    258 _DMAARM	=	0x00d6
                    00D7    259 Fmdrip$DMAREQ$0$0 == 0x00d7
                    00D7    260 _DMAREQ	=	0x00d7
                    00D8    261 Fmdrip$TIMIF$0$0 == 0x00d8
                    00D8    262 _TIMIF	=	0x00d8
                    00D9    263 Fmdrip$RFD$0$0 == 0x00d9
                    00D9    264 _RFD	=	0x00d9
                    00DA    265 Fmdrip$T1CC0L$0$0 == 0x00da
                    00DA    266 _T1CC0L	=	0x00da
                    00DB    267 Fmdrip$T1CC0H$0$0 == 0x00db
                    00DB    268 _T1CC0H	=	0x00db
                    00DC    269 Fmdrip$T1CC1L$0$0 == 0x00dc
                    00DC    270 _T1CC1L	=	0x00dc
                    00DD    271 Fmdrip$T1CC1H$0$0 == 0x00dd
                    00DD    272 _T1CC1H	=	0x00dd
                    00DE    273 Fmdrip$T1CC2L$0$0 == 0x00de
                    00DE    274 _T1CC2L	=	0x00de
                    00DF    275 Fmdrip$T1CC2H$0$0 == 0x00df
                    00DF    276 _T1CC2H	=	0x00df
                    00E0    277 Fmdrip$ACC$0$0 == 0x00e0
                    00E0    278 _ACC	=	0x00e0
                    00E1    279 Fmdrip$RFST$0$0 == 0x00e1
                    00E1    280 _RFST	=	0x00e1
                    00E2    281 Fmdrip$T1CNTL$0$0 == 0x00e2
                    00E2    282 _T1CNTL	=	0x00e2
                    00E3    283 Fmdrip$T1CNTH$0$0 == 0x00e3
                    00E3    284 _T1CNTH	=	0x00e3
                    00E4    285 Fmdrip$T1CTL$0$0 == 0x00e4
                    00E4    286 _T1CTL	=	0x00e4
                    00E5    287 Fmdrip$T1CCTL0$0$0 == 0x00e5
                    00E5    288 _T1CCTL0	=	0x00e5
                    00E6    289 Fmdrip$T1CCTL1$0$0 == 0x00e6
                    00E6    290 _T1CCTL1	=	0x00e6
                    00E7    291 Fmdrip$T1CCTL2$0$0 == 0x00e7
                    00E7    292 _T1CCTL2	=	0x00e7
                    00E8    293 Fmdrip$IRCON2$0$0 == 0x00e8
                    00E8    294 _IRCON2	=	0x00e8
                    00E9    295 Fmdrip$RFIF$0$0 == 0x00e9
                    00E9    296 _RFIF	=	0x00e9
                    00EA    297 Fmdrip$T4CNT$0$0 == 0x00ea
                    00EA    298 _T4CNT	=	0x00ea
                    00EB    299 Fmdrip$T4CTL$0$0 == 0x00eb
                    00EB    300 _T4CTL	=	0x00eb
                    00EC    301 Fmdrip$T4CCTL0$0$0 == 0x00ec
                    00EC    302 _T4CCTL0	=	0x00ec
                    00ED    303 Fmdrip$T4CC0$0$0 == 0x00ed
                    00ED    304 _T4CC0	=	0x00ed
                    00EE    305 Fmdrip$T4CCTL1$0$0 == 0x00ee
                    00EE    306 _T4CCTL1	=	0x00ee
                    00EF    307 Fmdrip$T4CC1$0$0 == 0x00ef
                    00EF    308 _T4CC1	=	0x00ef
                    00F0    309 Fmdrip$B$0$0 == 0x00f0
                    00F0    310 _B	=	0x00f0
                    00F1    311 Fmdrip$PERCFG$0$0 == 0x00f1
                    00F1    312 _PERCFG	=	0x00f1
                    00F2    313 Fmdrip$ADCCFG$0$0 == 0x00f2
                    00F2    314 _ADCCFG	=	0x00f2
                    00F3    315 Fmdrip$P0SEL$0$0 == 0x00f3
                    00F3    316 _P0SEL	=	0x00f3
                    00F4    317 Fmdrip$P1SEL$0$0 == 0x00f4
                    00F4    318 _P1SEL	=	0x00f4
                    00F5    319 Fmdrip$P2SEL$0$0 == 0x00f5
                    00F5    320 _P2SEL	=	0x00f5
                    00F6    321 Fmdrip$P1INP$0$0 == 0x00f6
                    00F6    322 _P1INP	=	0x00f6
                    00F7    323 Fmdrip$P2INP$0$0 == 0x00f7
                    00F7    324 _P2INP	=	0x00f7
                    00F8    325 Fmdrip$U1CSR$0$0 == 0x00f8
                    00F8    326 _U1CSR	=	0x00f8
                    00F9    327 Fmdrip$U1DBUF$0$0 == 0x00f9
                    00F9    328 _U1DBUF	=	0x00f9
                    00FA    329 Fmdrip$U1BAUD$0$0 == 0x00fa
                    00FA    330 _U1BAUD	=	0x00fa
                    00FB    331 Fmdrip$U1UCR$0$0 == 0x00fb
                    00FB    332 _U1UCR	=	0x00fb
                    00FC    333 Fmdrip$U1GCR$0$0 == 0x00fc
                    00FC    334 _U1GCR	=	0x00fc
                    00FD    335 Fmdrip$P0DIR$0$0 == 0x00fd
                    00FD    336 _P0DIR	=	0x00fd
                    00FE    337 Fmdrip$P1DIR$0$0 == 0x00fe
                    00FE    338 _P1DIR	=	0x00fe
                    00FF    339 Fmdrip$P2DIR$0$0 == 0x00ff
                    00FF    340 _P2DIR	=	0x00ff
                    FFFFD5D4    341 Fmdrip$DMA0CFG$0$0 == 0xffffd5d4
                    FFFFD5D4    342 _DMA0CFG	=	0xffffd5d4
                    FFFFD3D2    343 Fmdrip$DMA1CFG$0$0 == 0xffffd3d2
                    FFFFD3D2    344 _DMA1CFG	=	0xffffd3d2
                    FFFFADAC    345 Fmdrip$FADDR$0$0 == 0xffffadac
                    FFFFADAC    346 _FADDR	=	0xffffadac
                    FFFFBBBA    347 Fmdrip$ADC$0$0 == 0xffffbbba
                    FFFFBBBA    348 _ADC	=	0xffffbbba
                    FFFFDBDA    349 Fmdrip$T1CC0$0$0 == 0xffffdbda
                    FFFFDBDA    350 _T1CC0	=	0xffffdbda
                    FFFFDDDC    351 Fmdrip$T1CC1$0$0 == 0xffffdddc
                    FFFFDDDC    352 _T1CC1	=	0xffffdddc
                    FFFFDFDE    353 Fmdrip$T1CC2$0$0 == 0xffffdfde
                    FFFFDFDE    354 _T1CC2	=	0xffffdfde
                            355 ;--------------------------------------------------------
                            356 ; special function bits
                            357 ;--------------------------------------------------------
                            358 	.area RSEG    (ABS,DATA)
   0000                     359 	.org 0x0000
                    0080    360 Fmdrip$P0_0$0$0 == 0x0080
                    0080    361 _P0_0	=	0x0080
                    0081    362 Fmdrip$P0_1$0$0 == 0x0081
                    0081    363 _P0_1	=	0x0081
                    0082    364 Fmdrip$P0_2$0$0 == 0x0082
                    0082    365 _P0_2	=	0x0082
                    0083    366 Fmdrip$P0_3$0$0 == 0x0083
                    0083    367 _P0_3	=	0x0083
                    0084    368 Fmdrip$P0_4$0$0 == 0x0084
                    0084    369 _P0_4	=	0x0084
                    0085    370 Fmdrip$P0_5$0$0 == 0x0085
                    0085    371 _P0_5	=	0x0085
                    0086    372 Fmdrip$P0_6$0$0 == 0x0086
                    0086    373 _P0_6	=	0x0086
                    0087    374 Fmdrip$P0_7$0$0 == 0x0087
                    0087    375 _P0_7	=	0x0087
                    0088    376 Fmdrip$_TCON_0$0$0 == 0x0088
                    0088    377 __TCON_0	=	0x0088
                    0089    378 Fmdrip$RFTXRXIF$0$0 == 0x0089
                    0089    379 _RFTXRXIF	=	0x0089
                    008A    380 Fmdrip$_TCON_2$0$0 == 0x008a
                    008A    381 __TCON_2	=	0x008a
                    008B    382 Fmdrip$URX0IF$0$0 == 0x008b
                    008B    383 _URX0IF	=	0x008b
                    008C    384 Fmdrip$_TCON_4$0$0 == 0x008c
                    008C    385 __TCON_4	=	0x008c
                    008D    386 Fmdrip$ADCIF$0$0 == 0x008d
                    008D    387 _ADCIF	=	0x008d
                    008E    388 Fmdrip$_TCON_6$0$0 == 0x008e
                    008E    389 __TCON_6	=	0x008e
                    008F    390 Fmdrip$URX1IF$0$0 == 0x008f
                    008F    391 _URX1IF	=	0x008f
                    0090    392 Fmdrip$P1_0$0$0 == 0x0090
                    0090    393 _P1_0	=	0x0090
                    0091    394 Fmdrip$P1_1$0$0 == 0x0091
                    0091    395 _P1_1	=	0x0091
                    0092    396 Fmdrip$P1_2$0$0 == 0x0092
                    0092    397 _P1_2	=	0x0092
                    0093    398 Fmdrip$P1_3$0$0 == 0x0093
                    0093    399 _P1_3	=	0x0093
                    0094    400 Fmdrip$P1_4$0$0 == 0x0094
                    0094    401 _P1_4	=	0x0094
                    0095    402 Fmdrip$P1_5$0$0 == 0x0095
                    0095    403 _P1_5	=	0x0095
                    0096    404 Fmdrip$P1_6$0$0 == 0x0096
                    0096    405 _P1_6	=	0x0096
                    0097    406 Fmdrip$P1_7$0$0 == 0x0097
                    0097    407 _P1_7	=	0x0097
                    0098    408 Fmdrip$ENCIF_0$0$0 == 0x0098
                    0098    409 _ENCIF_0	=	0x0098
                    0099    410 Fmdrip$ENCIF_1$0$0 == 0x0099
                    0099    411 _ENCIF_1	=	0x0099
                    009A    412 Fmdrip$_SOCON2$0$0 == 0x009a
                    009A    413 __SOCON2	=	0x009a
                    009B    414 Fmdrip$_SOCON3$0$0 == 0x009b
                    009B    415 __SOCON3	=	0x009b
                    009C    416 Fmdrip$_SOCON4$0$0 == 0x009c
                    009C    417 __SOCON4	=	0x009c
                    009D    418 Fmdrip$_SOCON5$0$0 == 0x009d
                    009D    419 __SOCON5	=	0x009d
                    009E    420 Fmdrip$_SOCON6$0$0 == 0x009e
                    009E    421 __SOCON6	=	0x009e
                    009F    422 Fmdrip$_SOCON7$0$0 == 0x009f
                    009F    423 __SOCON7	=	0x009f
                    00A0    424 Fmdrip$P2_0$0$0 == 0x00a0
                    00A0    425 _P2_0	=	0x00a0
                    00A1    426 Fmdrip$P2_1$0$0 == 0x00a1
                    00A1    427 _P2_1	=	0x00a1
                    00A2    428 Fmdrip$P2_2$0$0 == 0x00a2
                    00A2    429 _P2_2	=	0x00a2
                    00A3    430 Fmdrip$P2_3$0$0 == 0x00a3
                    00A3    431 _P2_3	=	0x00a3
                    00A4    432 Fmdrip$P2_4$0$0 == 0x00a4
                    00A4    433 _P2_4	=	0x00a4
                    00A5    434 Fmdrip$P2_5$0$0 == 0x00a5
                    00A5    435 _P2_5	=	0x00a5
                    00A6    436 Fmdrip$P2_6$0$0 == 0x00a6
                    00A6    437 _P2_6	=	0x00a6
                    00A7    438 Fmdrip$P2_7$0$0 == 0x00a7
                    00A7    439 _P2_7	=	0x00a7
                    00A8    440 Fmdrip$RFTXRXIE$0$0 == 0x00a8
                    00A8    441 _RFTXRXIE	=	0x00a8
                    00A9    442 Fmdrip$ADCIE$0$0 == 0x00a9
                    00A9    443 _ADCIE	=	0x00a9
                    00AA    444 Fmdrip$URX0IE$0$0 == 0x00aa
                    00AA    445 _URX0IE	=	0x00aa
                    00AB    446 Fmdrip$URX1IE$0$0 == 0x00ab
                    00AB    447 _URX1IE	=	0x00ab
                    00AC    448 Fmdrip$ENCIE$0$0 == 0x00ac
                    00AC    449 _ENCIE	=	0x00ac
                    00AD    450 Fmdrip$STIE$0$0 == 0x00ad
                    00AD    451 _STIE	=	0x00ad
                    00AE    452 Fmdrip$_IEN06$0$0 == 0x00ae
                    00AE    453 __IEN06	=	0x00ae
                    00AF    454 Fmdrip$EA$0$0 == 0x00af
                    00AF    455 _EA	=	0x00af
                    00B8    456 Fmdrip$DMAIE$0$0 == 0x00b8
                    00B8    457 _DMAIE	=	0x00b8
                    00B9    458 Fmdrip$T1IE$0$0 == 0x00b9
                    00B9    459 _T1IE	=	0x00b9
                    00BA    460 Fmdrip$T2IE$0$0 == 0x00ba
                    00BA    461 _T2IE	=	0x00ba
                    00BB    462 Fmdrip$T3IE$0$0 == 0x00bb
                    00BB    463 _T3IE	=	0x00bb
                    00BC    464 Fmdrip$T4IE$0$0 == 0x00bc
                    00BC    465 _T4IE	=	0x00bc
                    00BD    466 Fmdrip$P0IE$0$0 == 0x00bd
                    00BD    467 _P0IE	=	0x00bd
                    00BE    468 Fmdrip$_IEN16$0$0 == 0x00be
                    00BE    469 __IEN16	=	0x00be
                    00BF    470 Fmdrip$_IEN17$0$0 == 0x00bf
                    00BF    471 __IEN17	=	0x00bf
                    00C0    472 Fmdrip$DMAIF$0$0 == 0x00c0
                    00C0    473 _DMAIF	=	0x00c0
                    00C1    474 Fmdrip$T1IF$0$0 == 0x00c1
                    00C1    475 _T1IF	=	0x00c1
                    00C2    476 Fmdrip$T2IF$0$0 == 0x00c2
                    00C2    477 _T2IF	=	0x00c2
                    00C3    478 Fmdrip$T3IF$0$0 == 0x00c3
                    00C3    479 _T3IF	=	0x00c3
                    00C4    480 Fmdrip$T4IF$0$0 == 0x00c4
                    00C4    481 _T4IF	=	0x00c4
                    00C5    482 Fmdrip$P0IF$0$0 == 0x00c5
                    00C5    483 _P0IF	=	0x00c5
                    00C6    484 Fmdrip$_IRCON6$0$0 == 0x00c6
                    00C6    485 __IRCON6	=	0x00c6
                    00C7    486 Fmdrip$STIF$0$0 == 0x00c7
                    00C7    487 _STIF	=	0x00c7
                    00D0    488 Fmdrip$P$0$0 == 0x00d0
                    00D0    489 _P	=	0x00d0
                    00D1    490 Fmdrip$F1$0$0 == 0x00d1
                    00D1    491 _F1	=	0x00d1
                    00D2    492 Fmdrip$OV$0$0 == 0x00d2
                    00D2    493 _OV	=	0x00d2
                    00D3    494 Fmdrip$RS0$0$0 == 0x00d3
                    00D3    495 _RS0	=	0x00d3
                    00D4    496 Fmdrip$RS1$0$0 == 0x00d4
                    00D4    497 _RS1	=	0x00d4
                    00D5    498 Fmdrip$F0$0$0 == 0x00d5
                    00D5    499 _F0	=	0x00d5
                    00D6    500 Fmdrip$AC$0$0 == 0x00d6
                    00D6    501 _AC	=	0x00d6
                    00D7    502 Fmdrip$CY$0$0 == 0x00d7
                    00D7    503 _CY	=	0x00d7
                    00D8    504 Fmdrip$T3OVFIF$0$0 == 0x00d8
                    00D8    505 _T3OVFIF	=	0x00d8
                    00D9    506 Fmdrip$T3CH0IF$0$0 == 0x00d9
                    00D9    507 _T3CH0IF	=	0x00d9
                    00DA    508 Fmdrip$T3CH1IF$0$0 == 0x00da
                    00DA    509 _T3CH1IF	=	0x00da
                    00DB    510 Fmdrip$T4OVFIF$0$0 == 0x00db
                    00DB    511 _T4OVFIF	=	0x00db
                    00DC    512 Fmdrip$T4CH0IF$0$0 == 0x00dc
                    00DC    513 _T4CH0IF	=	0x00dc
                    00DD    514 Fmdrip$T4CH1IF$0$0 == 0x00dd
                    00DD    515 _T4CH1IF	=	0x00dd
                    00DE    516 Fmdrip$OVFIM$0$0 == 0x00de
                    00DE    517 _OVFIM	=	0x00de
                    00DF    518 Fmdrip$_TIMIF7$0$0 == 0x00df
                    00DF    519 __TIMIF7	=	0x00df
                    00E0    520 Fmdrip$ACC_0$0$0 == 0x00e0
                    00E0    521 _ACC_0	=	0x00e0
                    00E1    522 Fmdrip$ACC_1$0$0 == 0x00e1
                    00E1    523 _ACC_1	=	0x00e1
                    00E2    524 Fmdrip$ACC_2$0$0 == 0x00e2
                    00E2    525 _ACC_2	=	0x00e2
                    00E3    526 Fmdrip$ACC_3$0$0 == 0x00e3
                    00E3    527 _ACC_3	=	0x00e3
                    00E4    528 Fmdrip$ACC_4$0$0 == 0x00e4
                    00E4    529 _ACC_4	=	0x00e4
                    00E5    530 Fmdrip$ACC_5$0$0 == 0x00e5
                    00E5    531 _ACC_5	=	0x00e5
                    00E6    532 Fmdrip$ACC_6$0$0 == 0x00e6
                    00E6    533 _ACC_6	=	0x00e6
                    00E7    534 Fmdrip$ACC_7$0$0 == 0x00e7
                    00E7    535 _ACC_7	=	0x00e7
                    00E8    536 Fmdrip$P2IF$0$0 == 0x00e8
                    00E8    537 _P2IF	=	0x00e8
                    00E9    538 Fmdrip$UTX0IF$0$0 == 0x00e9
                    00E9    539 _UTX0IF	=	0x00e9
                    00EA    540 Fmdrip$UTX1IF$0$0 == 0x00ea
                    00EA    541 _UTX1IF	=	0x00ea
                    00EB    542 Fmdrip$P1IF$0$0 == 0x00eb
                    00EB    543 _P1IF	=	0x00eb
                    00EC    544 Fmdrip$WDTIF$0$0 == 0x00ec
                    00EC    545 _WDTIF	=	0x00ec
                    00ED    546 Fmdrip$_IRCON25$0$0 == 0x00ed
                    00ED    547 __IRCON25	=	0x00ed
                    00EE    548 Fmdrip$_IRCON26$0$0 == 0x00ee
                    00EE    549 __IRCON26	=	0x00ee
                    00EF    550 Fmdrip$_IRCON27$0$0 == 0x00ef
                    00EF    551 __IRCON27	=	0x00ef
                    00F0    552 Fmdrip$B_0$0$0 == 0x00f0
                    00F0    553 _B_0	=	0x00f0
                    00F1    554 Fmdrip$B_1$0$0 == 0x00f1
                    00F1    555 _B_1	=	0x00f1
                    00F2    556 Fmdrip$B_2$0$0 == 0x00f2
                    00F2    557 _B_2	=	0x00f2
                    00F3    558 Fmdrip$B_3$0$0 == 0x00f3
                    00F3    559 _B_3	=	0x00f3
                    00F4    560 Fmdrip$B_4$0$0 == 0x00f4
                    00F4    561 _B_4	=	0x00f4
                    00F5    562 Fmdrip$B_5$0$0 == 0x00f5
                    00F5    563 _B_5	=	0x00f5
                    00F6    564 Fmdrip$B_6$0$0 == 0x00f6
                    00F6    565 _B_6	=	0x00f6
                    00F7    566 Fmdrip$B_7$0$0 == 0x00f7
                    00F7    567 _B_7	=	0x00f7
                    00F8    568 Fmdrip$U1ACTIVE$0$0 == 0x00f8
                    00F8    569 _U1ACTIVE	=	0x00f8
                    00F9    570 Fmdrip$U1TX_BYTE$0$0 == 0x00f9
                    00F9    571 _U1TX_BYTE	=	0x00f9
                    00FA    572 Fmdrip$U1RX_BYTE$0$0 == 0x00fa
                    00FA    573 _U1RX_BYTE	=	0x00fa
                    00FB    574 Fmdrip$U1ERR$0$0 == 0x00fb
                    00FB    575 _U1ERR	=	0x00fb
                    00FC    576 Fmdrip$U1FE$0$0 == 0x00fc
                    00FC    577 _U1FE	=	0x00fc
                    00FD    578 Fmdrip$U1SLAVE$0$0 == 0x00fd
                    00FD    579 _U1SLAVE	=	0x00fd
                    00FE    580 Fmdrip$U1RE$0$0 == 0x00fe
                    00FE    581 _U1RE	=	0x00fe
                    00FF    582 Fmdrip$U1MODE$0$0 == 0x00ff
                    00FF    583 _U1MODE	=	0x00ff
                            584 ;--------------------------------------------------------
                            585 ; overlayable register banks
                            586 ;--------------------------------------------------------
                            587 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     588 	.ds 8
                            589 	.area REG_BANK_1	(REL,OVR,DATA)
   0000                     590 	.ds 8
                            591 ;--------------------------------------------------------
                            592 ; overlayable bit register bank
                            593 ;--------------------------------------------------------
                            594 	.area BIT_BANK	(REL,OVR,DATA)
   0000                     595 bits:
   0000                     596 	.ds 1
                    8000    597 	b0 = bits[0]
                    8100    598 	b1 = bits[1]
                    8200    599 	b2 = bits[2]
                    8300    600 	b3 = bits[3]
                    8400    601 	b4 = bits[4]
                    8500    602 	b5 = bits[5]
                    8600    603 	b6 = bits[6]
                    8700    604 	b7 = bits[7]
                            605 ;--------------------------------------------------------
                            606 ; internal ram data
                            607 ;--------------------------------------------------------
                            608 	.area DSEG    (DATA)
                    0000    609 Lmdrip.getFonaString$sloc0$1$0==.
   0000                     610 _getFonaString_sloc0_1_0:
   0000                     611 	.ds 4
                    0004    612 Lmdrip.getFonaMillivolts$sloc0$1$0==.
   0004                     613 _getFonaMillivolts_sloc0_1_0:
   0004                     614 	.ds 2
                    0006    615 Lmdrip.getFonaGPS$sloc0$1$0==.
   0006                     616 _getFonaGPS_sloc0_1_0:
   0006                     617 	.ds 1
                    0007    618 Lmdrip.getFonaGPS$sloc1$1$0==.
   0007                     619 _getFonaGPS_sloc1_1_0:
   0007                     620 	.ds 1
                    0008    621 Lmdrip.print_packet$sloc0$1$0==.
   0008                     622 _print_packet_sloc0_1_0:
   0008                     623 	.ds 2
                    000A    624 Lmdrip.print_packet$sloc1$1$0==.
   000A                     625 _print_packet_sloc1_1_0:
   000A                     626 	.ds 2
                    000C    627 Lmdrip.print_packet$sloc2$1$0==.
   000C                     628 _print_packet_sloc2_1_0:
   000C                     629 	.ds 2
                    000E    630 Lmdrip.print_packet$sloc3$1$0==.
   000E                     631 _print_packet_sloc3_1_0:
   000E                     632 	.ds 4
                    0012    633 Lmdrip.goToSleep$sloc0$1$0==.
   0012                     634 _goToSleep_sloc0_1_0:
   0012                     635 	.ds 2
                    0014    636 Lmdrip.goToSleep$sloc1$1$0==.
   0014                     637 _goToSleep_sloc1_1_0:
   0014                     638 	.ds 4
                    0018    639 Lmdrip.WaitForPacket$sloc0$1$0==.
   0018                     640 _WaitForPacket_sloc0_1_0:
   0018                     641 	.ds 1
                    0019    642 Lmdrip.WaitForPacket$sloc1$1$0==.
   0019                     643 _WaitForPacket_sloc1_1_0:
   0019                     644 	.ds 2
                    001B    645 Lmdrip.WaitForPacket$sloc2$1$0==.
   001B                     646 _WaitForPacket_sloc2_1_0:
   001B                     647 	.ds 4
                    001F    648 Lmdrip.WaitForPacket$sloc3$1$0==.
   001F                     649 _WaitForPacket_sloc3_1_0:
   001F                     650 	.ds 4
                    0023    651 Lmdrip.WaitForPacket$sloc4$1$0==.
   0023                     652 _WaitForPacket_sloc4_1_0:
   0023                     653 	.ds 4
                    0027    654 Lmdrip.delayFor$sloc0$1$0==.
   0027                     655 _delayFor_sloc0_1_0:
   0027                     656 	.ds 4
                            657 ;--------------------------------------------------------
                            658 ; overlayable items in internal ram 
                            659 ;--------------------------------------------------------
                            660 	.area	OSEG    (OVR,DATA)
                    0000    661 Lmdrip.dexcom_src_to_ascii$sloc0$1$0==.
   0000                     662 _dexcom_src_to_ascii_sloc0_1_0:
   0000                     663 	.ds 4
                            664 ;--------------------------------------------------------
                            665 ; Stack segment in internal ram 
                            666 ;--------------------------------------------------------
                            667 	.area	SSEG	(DATA)
   0000                     668 __start__stack:
   0000                     669 	.ds	1
                            670 
                            671 ;--------------------------------------------------------
                            672 ; indirectly addressable internal ram data
                            673 ;--------------------------------------------------------
                            674 	.area ISEG    (DATA)
                            675 ;--------------------------------------------------------
                            676 ; absolute internal ram data
                            677 ;--------------------------------------------------------
                            678 	.area IABS    (ABS,DATA)
                            679 	.area IABS    (ABS,DATA)
                            680 ;--------------------------------------------------------
                            681 ; bit data
                            682 ;--------------------------------------------------------
                            683 	.area BSEG    (BIT)
                    0000    684 Fmdrip$only_listen_for_my_transmitter$0$0==.
   0000                     685 _only_listen_for_my_transmitter:
   0000                     686 	.ds 1
                    0001    687 Fmdrip$status_lights$0$0==.
   0001                     688 _status_lights:
   0001                     689 	.ds 1
                    0002    690 Fmdrip$allow_alternate_usb_protocol$0$0==.
   0002                     691 _allow_alternate_usb_protocol:
   0002                     692 	.ds 1
                    0003    693 Fmdrip$enable_wixfone$0$0==.
   0003                     694 _enable_wixfone:
   0003                     695 	.ds 1
                    0004    696 Fmdrip$encrypt_output$0$0==.
   0004                     697 _encrypt_output:
   0004                     698 	.ds 1
                    0005    699 G$needsTimingCalibration$0$0==.
   0005                     700 _needsTimingCalibration::
   0005                     701 	.ds 1
                    0006    702 G$usbEnabled$0$0==.
   0006                     703 _usbEnabled::
   0006                     704 	.ds 1
                    0007    705 Lmdrip.goToSleep$storedDma0Armed$3$3==.
   0007                     706 _goToSleep_storedDma0Armed_3_3:
   0007                     707 	.ds 1
                    0008    708 Lmdrip.goToSleep$savedP0IE$3$3==.
   0008                     709 _goToSleep_savedP0IE_3_3:
   0008                     710 	.ds 1
                            711 ;--------------------------------------------------------
                            712 ; paged external ram data
                            713 ;--------------------------------------------------------
                            714 	.area PSEG    (PAG,XDATA)
                    0000    715 Fmdrip$wake_earlier_for_next_miss$0$0==.
   0000                     716 _wake_earlier_for_next_miss:
   0000                     717 	.ds 1
                    0001    718 Fmdrip$misses_until_failure$0$0==.
   0001                     719 _misses_until_failure:
   0001                     720 	.ds 1
                    0002    721 Fmdrip$fOffset$0$0==.
   0002                     722 _fOffset:
   0002                     723 	.ds 4
                    0006    724 Fmdrip$nChannels$0$0==.
   0006                     725 _nChannels:
   0006                     726 	.ds 4
                    000A    727 Fmdrip$waitTimes$0$0==.
   000A                     728 _waitTimes:
   000A                     729 	.ds 16
                    001A    730 Fmdrip$delayedWaitTimes$0$0==.
   001A                     731 _delayedWaitTimes:
   001A                     732 	.ds 16
                    002A    733 Fmdrip$catch_offsets$0$0==.
   002A                     734 _catch_offsets:
   002A                     735 	.ds 16
                    003A    736 Fmdrip$last_catch_channel$0$0==.
   003A                     737 _last_catch_channel:
   003A                     738 	.ds 1
                    003B    739 Fmdrip$save_IEN0$0$0==.
   003B                     740 _save_IEN0:
   003B                     741 	.ds 1
                    003C    742 Fmdrip$save_IEN1$0$0==.
   003C                     743 _save_IEN1:
   003C                     744 	.ds 1
                    003D    745 Fmdrip$save_IEN2$0$0==.
   003D                     746 _save_IEN2:
   003D                     747 	.ds 1
                    003E    748 G$sequential_missed_packets$0$0==.
   003E                     749 _sequential_missed_packets::
   003E                     750 	.ds 1
                    003F    751 G$intMaxStrLen$0$0==.
   003F                     752 _intMaxStrLen::
   003F                     753 	.ds 1
                    0040    754 Lmdrip.min8$b$1$1==.
   0040                     755 _min8_PARM_2:
   0040                     756 	.ds 1
                    0041    757 Lmdrip.bit_reverse_bytes$nLen$1$1==.
   0041                     758 _bit_reverse_bytes_PARM_2:
   0041                     759 	.ds 1
                    0042    760 Lmdrip.bit_reverse_bytes$buf$1$1==.
   0042                     761 _bit_reverse_bytes_buf_1_1:
   0042                     762 	.ds 3
                    0045    763 Lmdrip.getFonaGPS$CIPGSMLOC$1$1==.
   0045                     764 _getFonaGPS_CIPGSMLOC_1_1:
   0045                     765 	.ds 2
                    0047    766 Lmdrip.print_packet$pPkt$1$1==.
   0047                     767 _print_packet_pPkt_1_1:
   0047                     768 	.ds 2
                    0049    769 Lmdrip.goToSleep$storedDescHigh$3$3==.
   0049                     770 _goToSleep_storedDescHigh_3_3:
   0049                     771 	.ds 1
                    004A    772 Lmdrip.goToSleep$storedDescLow$3$3==.
   004A                     773 _goToSleep_storedDescLow_3_3:
   004A                     774 	.ds 1
                    004B    775 Lmdrip.goToSleep$storedIEN1$3$3==.
   004B                     776 _goToSleep_storedIEN1_3_3:
   004B                     777 	.ds 1
                    004C    778 Lmdrip.goToSleep$storedIEN2$3$3==.
   004C                     779 _goToSleep_storedIEN2_3_3:
   004C                     780 	.ds 1
                    004D    781 Lmdrip.goToSleep$savedP1SEL$3$3==.
   004D                     782 _goToSleep_savedP1SEL_3_3:
   004D                     783 	.ds 1
                    004E    784 Lmdrip.goToSleep$savedP1DIR$3$3==.
   004E                     785 _goToSleep_savedP1DIR_3_3:
   004E                     786 	.ds 1
                    004F    787 Lmdrip.goToSleep$start_waiting$3$8==.
   004F                     788 _goToSleep_start_waiting_3_8:
   004F                     789 	.ds 4
                    0053    790 Lmdrip.WaitForPacket$pkt$1$1==.
   0053                     791 _WaitForPacket_PARM_2:
   0053                     792 	.ds 2
                    0055    793 Lmdrip.get_packet$pPkt$1$1==.
   0055                     794 _get_packet_pPkt_1_1:
   0055                     795 	.ds 2
                            796 ;--------------------------------------------------------
                            797 ; external ram data
                            798 ;--------------------------------------------------------
                            799 	.area XSEG    (XDATA)
                    DF00    800 Fmdrip$SYNC1$0$0 == 0xdf00
                    DF00    801 _SYNC1	=	0xdf00
                    DF01    802 Fmdrip$SYNC0$0$0 == 0xdf01
                    DF01    803 _SYNC0	=	0xdf01
                    DF02    804 Fmdrip$PKTLEN$0$0 == 0xdf02
                    DF02    805 _PKTLEN	=	0xdf02
                    DF03    806 Fmdrip$PKTCTRL1$0$0 == 0xdf03
                    DF03    807 _PKTCTRL1	=	0xdf03
                    DF04    808 Fmdrip$PKTCTRL0$0$0 == 0xdf04
                    DF04    809 _PKTCTRL0	=	0xdf04
                    DF05    810 Fmdrip$ADDR$0$0 == 0xdf05
                    DF05    811 _ADDR	=	0xdf05
                    DF06    812 Fmdrip$CHANNR$0$0 == 0xdf06
                    DF06    813 _CHANNR	=	0xdf06
                    DF07    814 Fmdrip$FSCTRL1$0$0 == 0xdf07
                    DF07    815 _FSCTRL1	=	0xdf07
                    DF08    816 Fmdrip$FSCTRL0$0$0 == 0xdf08
                    DF08    817 _FSCTRL0	=	0xdf08
                    DF09    818 Fmdrip$FREQ2$0$0 == 0xdf09
                    DF09    819 _FREQ2	=	0xdf09
                    DF0A    820 Fmdrip$FREQ1$0$0 == 0xdf0a
                    DF0A    821 _FREQ1	=	0xdf0a
                    DF0B    822 Fmdrip$FREQ0$0$0 == 0xdf0b
                    DF0B    823 _FREQ0	=	0xdf0b
                    DF0C    824 Fmdrip$MDMCFG4$0$0 == 0xdf0c
                    DF0C    825 _MDMCFG4	=	0xdf0c
                    DF0D    826 Fmdrip$MDMCFG3$0$0 == 0xdf0d
                    DF0D    827 _MDMCFG3	=	0xdf0d
                    DF0E    828 Fmdrip$MDMCFG2$0$0 == 0xdf0e
                    DF0E    829 _MDMCFG2	=	0xdf0e
                    DF0F    830 Fmdrip$MDMCFG1$0$0 == 0xdf0f
                    DF0F    831 _MDMCFG1	=	0xdf0f
                    DF10    832 Fmdrip$MDMCFG0$0$0 == 0xdf10
                    DF10    833 _MDMCFG0	=	0xdf10
                    DF11    834 Fmdrip$DEVIATN$0$0 == 0xdf11
                    DF11    835 _DEVIATN	=	0xdf11
                    DF12    836 Fmdrip$MCSM2$0$0 == 0xdf12
                    DF12    837 _MCSM2	=	0xdf12
                    DF13    838 Fmdrip$MCSM1$0$0 == 0xdf13
                    DF13    839 _MCSM1	=	0xdf13
                    DF14    840 Fmdrip$MCSM0$0$0 == 0xdf14
                    DF14    841 _MCSM0	=	0xdf14
                    DF15    842 Fmdrip$FOCCFG$0$0 == 0xdf15
                    DF15    843 _FOCCFG	=	0xdf15
                    DF16    844 Fmdrip$BSCFG$0$0 == 0xdf16
                    DF16    845 _BSCFG	=	0xdf16
                    DF17    846 Fmdrip$AGCCTRL2$0$0 == 0xdf17
                    DF17    847 _AGCCTRL2	=	0xdf17
                    DF18    848 Fmdrip$AGCCTRL1$0$0 == 0xdf18
                    DF18    849 _AGCCTRL1	=	0xdf18
                    DF19    850 Fmdrip$AGCCTRL0$0$0 == 0xdf19
                    DF19    851 _AGCCTRL0	=	0xdf19
                    DF1A    852 Fmdrip$FREND1$0$0 == 0xdf1a
                    DF1A    853 _FREND1	=	0xdf1a
                    DF1B    854 Fmdrip$FREND0$0$0 == 0xdf1b
                    DF1B    855 _FREND0	=	0xdf1b
                    DF1C    856 Fmdrip$FSCAL3$0$0 == 0xdf1c
                    DF1C    857 _FSCAL3	=	0xdf1c
                    DF1D    858 Fmdrip$FSCAL2$0$0 == 0xdf1d
                    DF1D    859 _FSCAL2	=	0xdf1d
                    DF1E    860 Fmdrip$FSCAL1$0$0 == 0xdf1e
                    DF1E    861 _FSCAL1	=	0xdf1e
                    DF1F    862 Fmdrip$FSCAL0$0$0 == 0xdf1f
                    DF1F    863 _FSCAL0	=	0xdf1f
                    DF23    864 Fmdrip$TEST2$0$0 == 0xdf23
                    DF23    865 _TEST2	=	0xdf23
                    DF24    866 Fmdrip$TEST1$0$0 == 0xdf24
                    DF24    867 _TEST1	=	0xdf24
                    DF25    868 Fmdrip$TEST0$0$0 == 0xdf25
                    DF25    869 _TEST0	=	0xdf25
                    DF2E    870 Fmdrip$PA_TABLE0$0$0 == 0xdf2e
                    DF2E    871 _PA_TABLE0	=	0xdf2e
                    DF2F    872 Fmdrip$IOCFG2$0$0 == 0xdf2f
                    DF2F    873 _IOCFG2	=	0xdf2f
                    DF30    874 Fmdrip$IOCFG1$0$0 == 0xdf30
                    DF30    875 _IOCFG1	=	0xdf30
                    DF31    876 Fmdrip$IOCFG0$0$0 == 0xdf31
                    DF31    877 _IOCFG0	=	0xdf31
                    DF36    878 Fmdrip$PARTNUM$0$0 == 0xdf36
                    DF36    879 _PARTNUM	=	0xdf36
                    DF37    880 Fmdrip$VERSION$0$0 == 0xdf37
                    DF37    881 _VERSION	=	0xdf37
                    DF38    882 Fmdrip$FREQEST$0$0 == 0xdf38
                    DF38    883 _FREQEST	=	0xdf38
                    DF39    884 Fmdrip$LQI$0$0 == 0xdf39
                    DF39    885 _LQI	=	0xdf39
                    DF3A    886 Fmdrip$RSSI$0$0 == 0xdf3a
                    DF3A    887 _RSSI	=	0xdf3a
                    DF3B    888 Fmdrip$MARCSTATE$0$0 == 0xdf3b
                    DF3B    889 _MARCSTATE	=	0xdf3b
                    DF3C    890 Fmdrip$PKTSTATUS$0$0 == 0xdf3c
                    DF3C    891 _PKTSTATUS	=	0xdf3c
                    DF3D    892 Fmdrip$VCO_VC_DAC$0$0 == 0xdf3d
                    DF3D    893 _VCO_VC_DAC	=	0xdf3d
                    DF40    894 Fmdrip$I2SCFG0$0$0 == 0xdf40
                    DF40    895 _I2SCFG0	=	0xdf40
                    DF41    896 Fmdrip$I2SCFG1$0$0 == 0xdf41
                    DF41    897 _I2SCFG1	=	0xdf41
                    DF42    898 Fmdrip$I2SDATL$0$0 == 0xdf42
                    DF42    899 _I2SDATL	=	0xdf42
                    DF43    900 Fmdrip$I2SDATH$0$0 == 0xdf43
                    DF43    901 _I2SDATH	=	0xdf43
                    DF44    902 Fmdrip$I2SWCNT$0$0 == 0xdf44
                    DF44    903 _I2SWCNT	=	0xdf44
                    DF45    904 Fmdrip$I2SSTAT$0$0 == 0xdf45
                    DF45    905 _I2SSTAT	=	0xdf45
                    DF46    906 Fmdrip$I2SCLKF0$0$0 == 0xdf46
                    DF46    907 _I2SCLKF0	=	0xdf46
                    DF47    908 Fmdrip$I2SCLKF1$0$0 == 0xdf47
                    DF47    909 _I2SCLKF1	=	0xdf47
                    DF48    910 Fmdrip$I2SCLKF2$0$0 == 0xdf48
                    DF48    911 _I2SCLKF2	=	0xdf48
                    DE00    912 Fmdrip$USBADDR$0$0 == 0xde00
                    DE00    913 _USBADDR	=	0xde00
                    DE01    914 Fmdrip$USBPOW$0$0 == 0xde01
                    DE01    915 _USBPOW	=	0xde01
                    DE02    916 Fmdrip$USBIIF$0$0 == 0xde02
                    DE02    917 _USBIIF	=	0xde02
                    DE04    918 Fmdrip$USBOIF$0$0 == 0xde04
                    DE04    919 _USBOIF	=	0xde04
                    DE06    920 Fmdrip$USBCIF$0$0 == 0xde06
                    DE06    921 _USBCIF	=	0xde06
                    DE07    922 Fmdrip$USBIIE$0$0 == 0xde07
                    DE07    923 _USBIIE	=	0xde07
                    DE09    924 Fmdrip$USBOIE$0$0 == 0xde09
                    DE09    925 _USBOIE	=	0xde09
                    DE0B    926 Fmdrip$USBCIE$0$0 == 0xde0b
                    DE0B    927 _USBCIE	=	0xde0b
                    DE0C    928 Fmdrip$USBFRML$0$0 == 0xde0c
                    DE0C    929 _USBFRML	=	0xde0c
                    DE0D    930 Fmdrip$USBFRMH$0$0 == 0xde0d
                    DE0D    931 _USBFRMH	=	0xde0d
                    DE0E    932 Fmdrip$USBINDEX$0$0 == 0xde0e
                    DE0E    933 _USBINDEX	=	0xde0e
                    DE10    934 Fmdrip$USBMAXI$0$0 == 0xde10
                    DE10    935 _USBMAXI	=	0xde10
                    DE11    936 Fmdrip$USBCSIL$0$0 == 0xde11
                    DE11    937 _USBCSIL	=	0xde11
                    DE12    938 Fmdrip$USBCSIH$0$0 == 0xde12
                    DE12    939 _USBCSIH	=	0xde12
                    DE13    940 Fmdrip$USBMAXO$0$0 == 0xde13
                    DE13    941 _USBMAXO	=	0xde13
                    DE14    942 Fmdrip$USBCSOL$0$0 == 0xde14
                    DE14    943 _USBCSOL	=	0xde14
                    DE15    944 Fmdrip$USBCSOH$0$0 == 0xde15
                    DE15    945 _USBCSOH	=	0xde15
                    DE16    946 Fmdrip$USBCNTL$0$0 == 0xde16
                    DE16    947 _USBCNTL	=	0xde16
                    DE17    948 Fmdrip$USBCNTH$0$0 == 0xde17
                    DE17    949 _USBCNTH	=	0xde17
                    DE20    950 Fmdrip$USBF0$0$0 == 0xde20
                    DE20    951 _USBF0	=	0xde20
                    DE22    952 Fmdrip$USBF1$0$0 == 0xde22
                    DE22    953 _USBF1	=	0xde22
                    DE24    954 Fmdrip$USBF2$0$0 == 0xde24
                    DE24    955 _USBF2	=	0xde24
                    DE26    956 Fmdrip$USBF3$0$0 == 0xde26
                    DE26    957 _USBF3	=	0xde26
                    DE28    958 Fmdrip$USBF4$0$0 == 0xde28
                    DE28    959 _USBF4	=	0xde28
                    DE2A    960 Fmdrip$USBF5$0$0 == 0xde2a
                    DE2A    961 _USBF5	=	0xde2a
                    0000    962 Lmdrip.bit_reverse_byte$bRet$1$1==.
   0000                     963 _bit_reverse_byte_bRet_1_1:
   0000                     964 	.ds 1
                    0001    965 Lmdrip.dex_num_decoder$usReversed$1$1==.
   0001                     966 _dex_num_decoder_usReversed_1_1:
   0001                     967 	.ds 2
                    0003    968 Lmdrip.dexcom_src_to_ascii$addr$1$1==.
   0003                     969 _dexcom_src_to_ascii_PARM_2:
   0003                     970 	.ds 2
                    0005    971 Lmdrip.dexcom_src_to_ascii$src$1$1==.
   0005                     972 _dexcom_src_to_ascii_src_1_1:
   0005                     973 	.ds 4
                    0009    974 Lmdrip.getSrcValue$srcVal$1$1==.
   0009                     975 _getSrcValue_srcVal_1_1:
   0009                     976 	.ds 1
                    000A    977 Lmdrip.getFonaString$uartCharacters$1$1==.
   000A                     978 _getFonaString_uartCharacters_1_1:
   000A                     979 	.ds 80
                    005A    980 Lmdrip.getFonaString$stop$1$1==.
   005A                     981 _getFonaString_stop_1_1:
   005A                     982 	.ds 4
                    005E    983 Lmdrip.getFonaString$now$1$1==.
   005E                     984 _getFonaString_now_1_1:
   005E                     985 	.ds 4
                    0062    986 Lmdrip.sendAT$atString$1$1==.
   0062                     987 _sendAT_atString_1_1:
   0062                     988 	.ds 2
                    0064    989 Lmdrip.sendAT$ATresponse$1$1==.
   0064                     990 _sendAT_ATresponse_1_1:
   0064                     991 	.ds 80
                    00B4    992 Lmdrip.configFona$atString$1$1==.
   00B4                     993 _configFona_atString_1_1:
   00B4                     994 	.ds 40
                    00DC    995 Lmdrip.enableFona$atString$1$1==.
   00DC                     996 _enableFona_atString_1_1:
   00DC                     997 	.ds 40
                    0104    998 Lmdrip.fonaDisable$atString$1$1==.
   0104                     999 _fonaDisable_atString_1_1:
   0104                    1000 	.ds 40
                    012C   1001 Lmdrip.fonaConnect$atString$1$1==.
   012C                    1002 _fonaConnect_atString_1_1:
   012C                    1003 	.ds 40
                    0154   1004 Lmdrip.getFonaMillivolts$i$1$1==.
   0154                    1005 _getFonaMillivolts_i_1_1:
   0154                    1006 	.ds 2
                    0156   1007 Lmdrip.getFonaMillivolts$intMV$1$1==.
   0156                    1008 _getFonaMillivolts_intMV_1_1:
   0156                    1009 	.ds 2
                    0158   1010 Lmdrip.getFonaMillivolts$c$1$1==.
   0158                    1011 _getFonaMillivolts_c_1_1:
   0158                    1012 	.ds 80
                    01A8   1013 Lmdrip.getFonaMillivolts$atString$1$1==.
   01A8                    1014 _getFonaMillivolts_atString_1_1:
   01A8                    1015 	.ds 40
                    01D0   1016 Lmdrip.getFonaGPS$i$1$1==.
   01D0                    1017 _getFonaGPS_i_1_1:
   01D0                    1018 	.ds 1
                    01D1   1019 Lmdrip.getFonaGPS$j$1$1==.
   01D1                    1020 _getFonaGPS_j_1_1:
   01D1                    1021 	.ds 1
                    01D2   1022 Lmdrip.getFonaGPS$stage$1$1==.
   01D2                    1023 _getFonaGPS_stage_1_1:
   01D2                    1024 	.ds 1
                    01D3   1025 Lmdrip.getFonaGPS$status$1$1==.
   01D3                    1026 _getFonaGPS_status_1_1:
   01D3                    1027 	.ds 6
                    01D9   1028 Lmdrip.getFonaGPS$atString$1$1==.
   01D9                    1029 _getFonaGPS_atString_1_1:
   01D9                    1030 	.ds 40
                    0201   1031 Lmdrip.getFonaGPS$c$1$1==.
   0201                    1032 _getFonaGPS_c_1_1:
   0201                    1033 	.ds 80
                    0251   1034 Lmdrip.print_packet$fonaLatLong$1$1==.
   0251                    1035 _print_packet_fonaLatLong_1_1:
   0251                    1036 	.ds 25
                    026A   1037 Lmdrip.print_packet$transID$1$1==.
   026A                    1038 _print_packet_transID_1_1:
   026A                    1039 	.ds 6
                    0270   1040 Lmdrip.print_packet$CIPResponse$1$1==.
   0270                    1041 _print_packet_CIPResponse_1_1:
   0270                    1042 	.ds 42
                    029A   1043 Lmdrip.print_packet$iv$1$1==.
   029A                    1044 _print_packet_iv_1_1:
   029A                    1045 	.ds 16
                    02AA   1046 Lmdrip.print_packet$sprintfBuffer$1$1==.
   02AA                    1047 _print_packet_sprintfBuffer_1_1:
   02AA                    1048 	.ds 64
                    02EA   1049 Lmdrip.print_packet$AESBuffer$1$1==.
   02EA                    1050 _print_packet_AESBuffer_1_1:
   02EA                    1051 	.ds 64
                    032A   1052 Lmdrip.goToSleep$seconds$1$1==.
   032A                    1053 _goToSleep_seconds_1_1:
   032A                    1054 	.ds 2
                    032C   1055 Lmdrip.putchar$c$1$1==.
   032C                    1056 _putchar_c_1_1:
   032C                    1057 	.ds 1
                    032D   1058 Lmdrip.swap_channel$newFSCTRL0$1$1==.
   032D                    1059 _swap_channel_PARM_2:
   032D                    1060 	.ds 1
                    032E   1061 Lmdrip.swap_channel$channel$1$1==.
   032E                    1062 _swap_channel_channel_1_1:
   032E                    1063 	.ds 1
                    032F   1064 Lmdrip.WaitForPacket$channel$1$1==.
   032F                    1065 _WaitForPacket_PARM_3:
   032F                    1066 	.ds 1
                    0330   1067 Lmdrip.WaitForPacket$milliseconds$1$1==.
   0330                    1068 _WaitForPacket_milliseconds_1_1:
   0330                    1069 	.ds 2
                    0332   1070 Lmdrip.WaitForPacket$transID$1$1==.
   0332                    1071 _WaitForPacket_transID_1_1:
   0332                    1072 	.ds 6
                    0338   1073 Lmdrip.delayFor$wait_chan$1$1==.
   0338                    1074 _delayFor_wait_chan_1_1:
   0338                    1075 	.ds 2
                    033A   1076 Lmdrip.main$Pkt$2$4==.
   033A                    1077 _main_Pkt_2_4:
   033A                    1078 	.ds 21
                           1079 ;--------------------------------------------------------
                           1080 ; absolute external ram data
                           1081 ;--------------------------------------------------------
                           1082 	.area XABS    (ABS,XDATA)
                           1083 ;--------------------------------------------------------
                           1084 ; external initialized ram data
                           1085 ;--------------------------------------------------------
                           1086 	.area XISEG   (XDATA)
                    0000   1087 Fmdrip$transmitter_id$0$0==.
   0000                    1088 _transmitter_id:
   0000                    1089 	.ds 6
                    0006   1090 Fmdrip$dexie_host_address$0$0==.
   0006                    1091 _dexie_host_address:
   0006                    1092 	.ds 28
                    0022   1093 Fmdrip$start_channel$0$0==.
   0022                    1094 _start_channel:
   0022                    1095 	.ds 1
                    0023   1096 Fmdrip$defaultfOffset$0$0==.
   0023                    1097 _defaultfOffset:
   0023                    1098 	.ds 4
                    0027   1099 G$PM2_BUF$0$0==.
   0027                    1100 _PM2_BUF::
   0027                    1101 	.ds 7
                    002E   1102 G$dmaDesc$0$0==.
   002E                    1103 _dmaDesc::
   002E                    1104 	.ds 8
                    0036   1105 G$AT_TIMEOUT$0$0==.
   0036                    1106 _AT_TIMEOUT::
   0036                    1107 	.ds 1
                    0037   1108 Fmdrip$defaultATWait$0$0==.
   0037                    1109 _defaultATWait:
   0037                    1110 	.ds 4
                    003B   1111 Fmdrip$key$0$0==.
   003B                    1112 _key:
   003B                    1113 	.ds 16
                    004B   1114 G$SrcNameTable$0$0==.
   004B                    1115 _SrcNameTable::
   004B                    1116 	.ds 32
                           1117 	.area HOME    (CODE)
                           1118 	.area GSINIT0 (CODE)
                           1119 	.area GSINIT1 (CODE)
                           1120 	.area GSINIT2 (CODE)
                           1121 	.area GSINIT3 (CODE)
                           1122 	.area GSINIT4 (CODE)
                           1123 	.area GSINIT5 (CODE)
                           1124 	.area GSINIT  (CODE)
                           1125 	.area GSFINAL (CODE)
                           1126 	.area CSEG    (CODE)
                           1127 ;--------------------------------------------------------
                           1128 ; interrupt vector 
                           1129 ;--------------------------------------------------------
                           1130 	.area HOME    (CODE)
   0000                    1131 __interrupt_vect:
   0000 02s00r00           1132 	ljmp	__sdcc_gsinit_startup
   0003 32                 1133 	reti
   0004                    1134 	.ds	7
   000B 32                 1135 	reti
   000C                    1136 	.ds	7
   0013 32                 1137 	reti
   0014                    1138 	.ds	7
   001B 02s00r00           1139 	ljmp	_ISR_URX1
   001E                    1140 	.ds	5
   0023 32                 1141 	reti
   0024                    1142 	.ds	7
   002B 02s00r04           1143 	ljmp	_ISR_ST
   002E                    1144 	.ds	5
   0033 32                 1145 	reti
   0034                    1146 	.ds	7
   003B 32                 1147 	reti
   003C                    1148 	.ds	7
   0043 32                 1149 	reti
   0044                    1150 	.ds	7
   004B 32                 1151 	reti
   004C                    1152 	.ds	7
   0053 32                 1153 	reti
   0054                    1154 	.ds	7
   005B 32                 1155 	reti
   005C                    1156 	.ds	7
   0063 02s00r00           1157 	ljmp	_ISR_T4
   0066                    1158 	.ds	5
   006B 32                 1159 	reti
   006C                    1160 	.ds	7
   0073 02s00r00           1161 	ljmp	_ISR_UTX1
   0076                    1162 	.ds	5
   007B 32                 1163 	reti
   007C                    1164 	.ds	7
   0083 02s00r00           1165 	ljmp	_ISR_RF
                           1166 ;--------------------------------------------------------
                           1167 ; global & static initialisations
                           1168 ;--------------------------------------------------------
                           1169 	.area HOME    (CODE)
                           1170 	.area GSINIT  (CODE)
                           1171 	.area GSFINAL (CODE)
                           1172 	.area GSINIT  (CODE)
                           1173 	.globl __sdcc_gsinit_startup
                           1174 	.globl __sdcc_program_startup
                           1175 	.globl __start__stack
                           1176 	.globl __mcs51_genXINIT
                           1177 	.globl __mcs51_genXRAMCLEAR
                           1178 	.globl __mcs51_genRAMCLEAR
                           1179 ;------------------------------------------------------------
                           1180 ;Allocation info for local variables in function 'getFonaMillivolts'
                           1181 ;------------------------------------------------------------
                           1182 ;sloc0                     Allocated with name '_getFonaMillivolts_sloc0_1_0'
                           1183 ;i                         Allocated with name '_getFonaMillivolts_i_1_1'
                           1184 ;counter                   Allocated with name '_getFonaMillivolts_counter_1_1'
                           1185 ;loop                      Allocated with name '_getFonaMillivolts_loop_1_1'
                           1186 ;rxCount                   Allocated with name '_getFonaMillivolts_rxCount_1_1'
                           1187 ;intMV                     Allocated with name '_getFonaMillivolts_intMV_1_1'
                           1188 ;c                         Allocated with name '_getFonaMillivolts_c_1_1'
                           1189 ;atString                  Allocated with name '_getFonaMillivolts_atString_1_1'
                           1190 ;------------------------------------------------------------
                    0000   1191 	G$getFonaMillivolts$0$0 ==.
                    0000   1192 	C$mdrip.c$409$1$1 ==.
                           1193 ;	apps/mdrip/mdrip.c:409: XDATA static int16 i=0;
   0000 90s01r54           1194 	mov	dptr,#_getFonaMillivolts_i_1_1
   0003 E4                 1195 	clr	a
   0004 F0                 1196 	movx	@dptr,a
   0005 A3                 1197 	inc	dptr
   0006 F0                 1198 	movx	@dptr,a
                    0007   1199 	G$main$0$0 ==.
                    0007   1200 	C$mdrip.c$48$1$1 ==.
                           1201 ;	apps/mdrip/mdrip.c:48: static volatile BIT only_listen_for_my_transmitter = 1;                                           //
   0007 D2*00              1202 	setb	_only_listen_for_my_transmitter
                    0009   1203 	G$main$0$0 ==.
                    0009   1204 	C$mdrip.c$51$1$1 ==.
                           1205 ;	apps/mdrip/mdrip.c:51: static volatile BIT status_lights = 1;                                                            //
   0009 D2*01              1206 	setb	_status_lights
                    000B   1207 	G$main$0$0 ==.
                    000B   1208 	C$mdrip.c$55$1$1 ==.
                           1209 ;	apps/mdrip/mdrip.c:55: static volatile BIT allow_alternate_usb_protocol = 0;
   000B C2*02              1210 	clr	_allow_alternate_usb_protocol
                    000D   1211 	G$main$0$0 ==.
                    000D   1212 	C$mdrip.c$79$1$1 ==.
                           1213 ;	apps/mdrip/mdrip.c:79: static volatile BIT enable_wixfone = 1;	
   000D D2*03              1214 	setb	_enable_wixfone
                    000F   1215 	G$main$0$0 ==.
                    000F   1216 	C$mdrip.c$82$1$1 ==.
                           1217 ;	apps/mdrip/mdrip.c:82: static volatile BIT encrypt_output = 1;
   000F D2*04              1218 	setb	_encrypt_output
                    0011   1219 	G$main$0$0 ==.
                    0011   1220 	C$mdrip.c$118$1$1 ==.
                           1221 ;	apps/mdrip/mdrip.c:118: BIT needsTimingCalibration = 1;
   0011 D2*05              1222 	setb	_needsTimingCalibration
                    0013   1223 	G$main$0$0 ==.
                    0013   1224 	C$mdrip.c$119$1$1 ==.
                           1225 ;	apps/mdrip/mdrip.c:119: BIT usbEnabled = 1;
   0013 D2*06              1226 	setb	_usbEnabled
                    0015   1227 	G$main$0$0 ==.
                    0015   1228 	C$mdrip.c$68$1$1 ==.
                           1229 ;	apps/mdrip/mdrip.c:68: static volatile uint8 wake_earlier_for_next_miss = 20;                                            //
   0015 78r00              1230 	mov	r0,#_wake_earlier_for_next_miss
   0017 74 14              1231 	mov	a,#0x14
   0019 F2                 1232 	movx	@r0,a
                    001A   1233 	G$main$0$0 ==.
                    001A   1234 	C$mdrip.c$72$1$1 ==.
                           1235 ;	apps/mdrip/mdrip.c:72: static volatile uint8 misses_until_failure = 1;                                                   //
   001A 78r01              1236 	mov	r0,#_misses_until_failure
   001C 74 01              1237 	mov	a,#0x01
   001E F2                 1238 	movx	@r0,a
                    001F   1239 	G$main$0$0 ==.
                    001F   1240 	C$mdrip.c$110$1$1 ==.
                           1241 ;	apps/mdrip/mdrip.c:110: static int8 fOffset[NUM_CHANNELS] = {0xCE,0xD5,0xE6,0xE5};
   001F 78r02              1242 	mov	r0,#_fOffset
   0021 74 CE              1243 	mov	a,#0xCE
   0023 F2                 1244 	movx	@r0,a
   0024 78r03              1245 	mov	r0,#(_fOffset + 0x0001)
   0026 74 D5              1246 	mov	a,#0xD5
   0028 F2                 1247 	movx	@r0,a
   0029 78r04              1248 	mov	r0,#(_fOffset + 0x0002)
   002B 74 E6              1249 	mov	a,#0xE6
   002D F2                 1250 	movx	@r0,a
   002E 78r05              1251 	mov	r0,#(_fOffset + 0x0003)
   0030 74 E5              1252 	mov	a,#0xE5
   0032 F2                 1253 	movx	@r0,a
                    0033   1254 	G$main$0$0 ==.
                    0033   1255 	C$mdrip.c$112$1$1 ==.
                           1256 ;	apps/mdrip/mdrip.c:112: static uint8 nChannels[NUM_CHANNELS] = { 0, 100, 199, 209 };
   0033 78r06              1257 	mov	r0,#_nChannels
   0035 E4                 1258 	clr	a
   0036 F2                 1259 	movx	@r0,a
   0037 78r07              1260 	mov	r0,#(_nChannels + 0x0001)
   0039 74 64              1261 	mov	a,#0x64
   003B F2                 1262 	movx	@r0,a
   003C 78r08              1263 	mov	r0,#(_nChannels + 0x0002)
   003E 74 C7              1264 	mov	a,#0xC7
   0040 F2                 1265 	movx	@r0,a
   0041 78r09              1266 	mov	r0,#(_nChannels + 0x0003)
   0043 74 D1              1267 	mov	a,#0xD1
   0045 F2                 1268 	movx	@r0,a
                    0046   1269 	G$main$0$0 ==.
                    0046   1270 	C$mdrip.c$113$1$1 ==.
                           1271 ;	apps/mdrip/mdrip.c:113: static uint32 waitTimes[NUM_CHANNELS] = { 13500, 500, 500, 500 };
   0046 78r0A              1272 	mov	r0,#_waitTimes
   0048 74 BC              1273 	mov	a,#0xBC
   004A F2                 1274 	movx	@r0,a
   004B 08                 1275 	inc	r0
   004C 74 34              1276 	mov	a,#0x34
   004E F2                 1277 	movx	@r0,a
   004F 08                 1278 	inc	r0
   0050 E4                 1279 	clr	a
   0051 F2                 1280 	movx	@r0,a
   0052 08                 1281 	inc	r0
   0053 F2                 1282 	movx	@r0,a
   0054 78r0E              1283 	mov	r0,#(_waitTimes + 0x0004)
   0056 74 F4              1284 	mov	a,#0xF4
   0058 F2                 1285 	movx	@r0,a
   0059 08                 1286 	inc	r0
   005A 74 01              1287 	mov	a,#0x01
   005C F2                 1288 	movx	@r0,a
   005D 08                 1289 	inc	r0
   005E E4                 1290 	clr	a
   005F F2                 1291 	movx	@r0,a
   0060 08                 1292 	inc	r0
   0061 F2                 1293 	movx	@r0,a
   0062 78r12              1294 	mov	r0,#(_waitTimes + 0x0008)
   0064 74 F4              1295 	mov	a,#0xF4
   0066 F2                 1296 	movx	@r0,a
   0067 08                 1297 	inc	r0
   0068 74 01              1298 	mov	a,#0x01
   006A F2                 1299 	movx	@r0,a
   006B 08                 1300 	inc	r0
   006C E4                 1301 	clr	a
   006D F2                 1302 	movx	@r0,a
   006E 08                 1303 	inc	r0
   006F F2                 1304 	movx	@r0,a
   0070 78r16              1305 	mov	r0,#(_waitTimes + 0x000c)
   0072 74 F4              1306 	mov	a,#0xF4
   0074 F2                 1307 	movx	@r0,a
   0075 08                 1308 	inc	r0
   0076 74 01              1309 	mov	a,#0x01
   0078 F2                 1310 	movx	@r0,a
   0079 08                 1311 	inc	r0
   007A E4                 1312 	clr	a
   007B F2                 1313 	movx	@r0,a
   007C 08                 1314 	inc	r0
   007D F2                 1315 	movx	@r0,a
                    007E   1316 	G$main$0$0 ==.
                    007E   1317 	C$mdrip.c$115$1$1 ==.
                           1318 ;	apps/mdrip/mdrip.c:115: static uint32 delayedWaitTimes[NUM_CHANNELS] = { 0, 700, 700, 700 };
   007E 78r1A              1319 	mov	r0,#_delayedWaitTimes
   0080 E4                 1320 	clr	a
   0081 F2                 1321 	movx	@r0,a
   0082 08                 1322 	inc	r0
   0083 F2                 1323 	movx	@r0,a
   0084 08                 1324 	inc	r0
   0085 F2                 1325 	movx	@r0,a
   0086 08                 1326 	inc	r0
   0087 F2                 1327 	movx	@r0,a
   0088 78r1E              1328 	mov	r0,#(_delayedWaitTimes + 0x0004)
   008A 74 BC              1329 	mov	a,#0xBC
   008C F2                 1330 	movx	@r0,a
   008D 08                 1331 	inc	r0
   008E 74 02              1332 	mov	a,#0x02
   0090 F2                 1333 	movx	@r0,a
   0091 08                 1334 	inc	r0
   0092 E4                 1335 	clr	a
   0093 F2                 1336 	movx	@r0,a
   0094 08                 1337 	inc	r0
   0095 F2                 1338 	movx	@r0,a
   0096 78r22              1339 	mov	r0,#(_delayedWaitTimes + 0x0008)
   0098 74 BC              1340 	mov	a,#0xBC
   009A F2                 1341 	movx	@r0,a
   009B 08                 1342 	inc	r0
   009C 74 02              1343 	mov	a,#0x02
   009E F2                 1344 	movx	@r0,a
   009F 08                 1345 	inc	r0
   00A0 E4                 1346 	clr	a
   00A1 F2                 1347 	movx	@r0,a
   00A2 08                 1348 	inc	r0
   00A3 F2                 1349 	movx	@r0,a
   00A4 78r26              1350 	mov	r0,#(_delayedWaitTimes + 0x000c)
   00A6 74 BC              1351 	mov	a,#0xBC
   00A8 F2                 1352 	movx	@r0,a
   00A9 08                 1353 	inc	r0
   00AA 74 02              1354 	mov	a,#0x02
   00AC F2                 1355 	movx	@r0,a
   00AD 08                 1356 	inc	r0
   00AE E4                 1357 	clr	a
   00AF F2                 1358 	movx	@r0,a
   00B0 08                 1359 	inc	r0
   00B1 F2                 1360 	movx	@r0,a
                    00B2   1361 	G$main$0$0 ==.
                    00B2   1362 	C$mdrip.c$116$1$1 ==.
                           1363 ;	apps/mdrip/mdrip.c:116: static uint32 catch_offsets[NUM_CHANNELS] = { 0, 0, 0, 0 };
   00B2 78r2A              1364 	mov	r0,#_catch_offsets
   00B4 E4                 1365 	clr	a
   00B5 F2                 1366 	movx	@r0,a
   00B6 08                 1367 	inc	r0
   00B7 F2                 1368 	movx	@r0,a
   00B8 08                 1369 	inc	r0
   00B9 F2                 1370 	movx	@r0,a
   00BA 08                 1371 	inc	r0
   00BB F2                 1372 	movx	@r0,a
   00BC 78r2E              1373 	mov	r0,#(_catch_offsets + 0x0004)
   00BE E4                 1374 	clr	a
   00BF F2                 1375 	movx	@r0,a
   00C0 08                 1376 	inc	r0
   00C1 F2                 1377 	movx	@r0,a
   00C2 08                 1378 	inc	r0
   00C3 F2                 1379 	movx	@r0,a
   00C4 08                 1380 	inc	r0
   00C5 F2                 1381 	movx	@r0,a
   00C6 78r32              1382 	mov	r0,#(_catch_offsets + 0x0008)
   00C8 E4                 1383 	clr	a
   00C9 F2                 1384 	movx	@r0,a
   00CA 08                 1385 	inc	r0
   00CB F2                 1386 	movx	@r0,a
   00CC 08                 1387 	inc	r0
   00CD F2                 1388 	movx	@r0,a
   00CE 08                 1389 	inc	r0
   00CF F2                 1390 	movx	@r0,a
   00D0 78r36              1391 	mov	r0,#(_catch_offsets + 0x000c)
   00D2 E4                 1392 	clr	a
   00D3 F2                 1393 	movx	@r0,a
   00D4 08                 1394 	inc	r0
   00D5 F2                 1395 	movx	@r0,a
   00D6 08                 1396 	inc	r0
   00D7 F2                 1397 	movx	@r0,a
   00D8 08                 1398 	inc	r0
   00D9 F2                 1399 	movx	@r0,a
                    00DA   1400 	G$main$0$0 ==.
                    00DA   1401 	C$mdrip.c$117$1$1 ==.
                           1402 ;	apps/mdrip/mdrip.c:117: static uint8 last_catch_channel = 0;
   00DA 78r3A              1403 	mov	r0,#_last_catch_channel
   00DC E4                 1404 	clr	a
   00DD F2                 1405 	movx	@r0,a
                    00DE   1406 	G$main$0$0 ==.
                    00DE   1407 	C$mdrip.c$125$1$1 ==.
                           1408 ;	apps/mdrip/mdrip.c:125: volatile uint8 sequential_missed_packets = 0;
   00DE 78r3E              1409 	mov	r0,#_sequential_missed_packets
   00E0 E4                 1410 	clr	a
   00E1 F2                 1411 	movx	@r0,a
                    00E2   1412 	G$main$0$0 ==.
                    00E2   1413 	C$mdrip.c$128$1$1 ==.
                           1414 ;	apps/mdrip/mdrip.c:128: uint8 intMaxStrLen = 80;
   00E2 78r3F              1415 	mov	r0,#_intMaxStrLen
   00E4 74 50              1416 	mov	a,#0x50
   00E6 F2                 1417 	movx	@r0,a
                           1418 	.area GSFINAL (CODE)
   0000 02s00r86           1419 	ljmp	__sdcc_program_startup
                           1420 ;--------------------------------------------------------
                           1421 ; Home
                           1422 ;--------------------------------------------------------
                           1423 	.area HOME    (CODE)
                           1424 	.area HOME    (CODE)
   0086                    1425 __sdcc_program_startup:
   0086 12s1ErFC           1426 	lcall	_main
                           1427 ;	return from main will lock up
   0089 80 FE              1428 	sjmp .
                           1429 ;--------------------------------------------------------
                           1430 ; code
                           1431 ;--------------------------------------------------------
                           1432 	.area CSEG    (CODE)
                           1433 ;------------------------------------------------------------
                           1434 ;Allocation info for local variables in function 'sleepInit'
                           1435 ;------------------------------------------------------------
                    0000   1436 	G$sleepInit$0$0 ==.
                    0000   1437 	C$mdrip.c$161$0$0 ==.
                           1438 ;	apps/mdrip/mdrip.c:161: void sleepInit(void) {
                           1439 ;	-----------------------------------------
                           1440 ;	 function sleepInit
                           1441 ;	-----------------------------------------
   0000                    1442 _sleepInit:
                    0007   1443 	ar7 = 0x07
                    0006   1444 	ar6 = 0x06
                    0005   1445 	ar5 = 0x05
                    0004   1446 	ar4 = 0x04
                    0003   1447 	ar3 = 0x03
                    0002   1448 	ar2 = 0x02
                    0001   1449 	ar1 = 0x01
                    0000   1450 	ar0 = 0x00
                    0000   1451 	C$mdrip.c$162$1$1 ==.
                           1452 ;	apps/mdrip/mdrip.c:162: WORIRQ  |= (1<<4);
   0000 43 A1 10           1453 	orl	_WORIRQ,#0x10
                    0003   1454 	C$mdrip.c$163$1$1 ==.
                    0003   1455 	XG$sleepInit$0$0 ==.
   0003 22                 1456 	ret
                           1457 ;------------------------------------------------------------
                           1458 ;Allocation info for local variables in function 'ISR_ST'
                           1459 ;------------------------------------------------------------
                    0004   1460 	G$ISR_ST$0$0 ==.
                    0004   1461 	C$mdrip.c$165$1$1 ==.
                           1462 ;	apps/mdrip/mdrip.c:165: ISR(ST, 1) {
                           1463 ;	-----------------------------------------
                           1464 ;	 function ISR_ST
                           1465 ;	-----------------------------------------
   0004                    1466 _ISR_ST:
                    000F   1467 	ar7 = 0x0F
                    000E   1468 	ar6 = 0x0E
                    000D   1469 	ar5 = 0x0D
                    000C   1470 	ar4 = 0x0C
                    000B   1471 	ar3 = 0x0B
                    000A   1472 	ar2 = 0x0A
                    0009   1473 	ar1 = 0x09
                    0008   1474 	ar0 = 0x08
                    0004   1475 	C$mdrip.c$166$1$1 ==.
                           1476 ;	apps/mdrip/mdrip.c:166: IRCON &= 0x7F;
   0004 53 C0 7F           1477 	anl	_IRCON,#0x7F
                    0007   1478 	C$mdrip.c$167$1$1 ==.
                           1479 ;	apps/mdrip/mdrip.c:167: WORIRQ &= 0xFE;
   0007 53 A1 FE           1480 	anl	_WORIRQ,#0xFE
                    000A   1481 	C$mdrip.c$168$1$1 ==.
                           1482 ;	apps/mdrip/mdrip.c:168: SLEEP &= 0xFC;
   000A 53 BE FC           1483 	anl	_SLEEP,#0xFC
                    000D   1484 	C$mdrip.c$169$1$1 ==.
                    000D   1485 	XG$ISR_ST$0$0 ==.
   000D 32                 1486 	reti
                           1487 ;	eliminated unneeded mov psw,# (no regs used in bank)
                           1488 ;	eliminated unneeded push/pop psw
                           1489 ;	eliminated unneeded push/pop dpl
                           1490 ;	eliminated unneeded push/pop dph
                           1491 ;	eliminated unneeded push/pop b
                           1492 ;	eliminated unneeded push/pop acc
                           1493 ;------------------------------------------------------------
                           1494 ;Allocation info for local variables in function 'switchToRCOSC'
                           1495 ;------------------------------------------------------------
                    000E   1496 	G$switchToRCOSC$0$0 ==.
                    000E   1497 	C$mdrip.c$171$1$1 ==.
                           1498 ;	apps/mdrip/mdrip.c:171: void switchToRCOSC(void) {
                           1499 ;	-----------------------------------------
                           1500 ;	 function switchToRCOSC
                           1501 ;	-----------------------------------------
   000E                    1502 _switchToRCOSC:
                    0007   1503 	ar7 = 0x07
                    0006   1504 	ar6 = 0x06
                    0005   1505 	ar5 = 0x05
                    0004   1506 	ar4 = 0x04
                    0003   1507 	ar3 = 0x03
                    0002   1508 	ar2 = 0x02
                    0001   1509 	ar1 = 0x01
                    0000   1510 	ar0 = 0x00
                    000E   1511 	C$mdrip.c$172$1$1 ==.
                           1512 ;	apps/mdrip/mdrip.c:172: SLEEP &= ~0x04;
   000E AF BE              1513 	mov	r7,_SLEEP
   0010 53 07 FB           1514 	anl	ar7,#0xFB
   0013 8F BE              1515 	mov	_SLEEP,r7
                    0015   1516 	C$mdrip.c$173$1$1 ==.
                           1517 ;	apps/mdrip/mdrip.c:173: while ( ! (SLEEP & 0x20) );
   0015                    1518 00101$:
   0015 E5 BE              1519 	mov	a,_SLEEP
   0017 30 E5 FB           1520 	jnb	acc.5,00101$
                    001A   1521 	C$mdrip.c$174$1$1 ==.
                           1522 ;	apps/mdrip/mdrip.c:174: CLKCON = (CLKCON & ~0x07) | 0x40 | 0x01;
   001A AF C6              1523 	mov	r7,_CLKCON
   001C 74 F8              1524 	mov	a,#0xF8
   001E 5F                 1525 	anl	a,r7
   001F 44 41              1526 	orl	a,#0x41
   0021 FF                 1527 	mov	r7,a
   0022 8F C6              1528 	mov	_CLKCON,r7
                    0024   1529 	C$mdrip.c$175$1$1 ==.
                           1530 ;	apps/mdrip/mdrip.c:175: while ( !(CLKCON & 0x40) );
   0024                    1531 00104$:
   0024 E5 C6              1532 	mov	a,_CLKCON
   0026 30 E6 FB           1533 	jnb	acc.6,00104$
                    0029   1534 	C$mdrip.c$176$1$1 ==.
                           1535 ;	apps/mdrip/mdrip.c:176: SLEEP |= 0x04;
   0029 43 BE 04           1536 	orl	_SLEEP,#0x04
                    002C   1537 	C$mdrip.c$177$1$1 ==.
                    002C   1538 	XG$switchToRCOSC$0$0 ==.
   002C 22                 1539 	ret
                           1540 ;------------------------------------------------------------
                           1541 ;Allocation info for local variables in function 'uartEnable'
                           1542 ;------------------------------------------------------------
                    002D   1543 	G$uartEnable$0$0 ==.
                    002D   1544 	C$mdrip.c$179$1$1 ==.
                           1545 ;	apps/mdrip/mdrip.c:179: void uartEnable() {
                           1546 ;	-----------------------------------------
                           1547 ;	 function uartEnable
                           1548 ;	-----------------------------------------
   002D                    1549 _uartEnable:
                    002D   1550 	C$mdrip.c$181$1$1 ==.
                           1551 ;	apps/mdrip/mdrip.c:181: U1UCR &= ~0x40; //CTS/RTS Off
   002D AF FB              1552 	mov	r7,_U1UCR
   002F 53 07 BF           1553 	anl	ar7,#0xBF
   0032 8F FB              1554 	mov	_U1UCR,r7
                    0034   1555 	C$mdrip.c$182$1$1 ==.
                           1556 ;	apps/mdrip/mdrip.c:182: U1CSR |= 0x40;
   0034 43 F8 40           1557 	orl	_U1CSR,#0x40
                    0037   1558 	C$mdrip.c$183$1$1 ==.
                           1559 ;	apps/mdrip/mdrip.c:183: delayMs(100);
   0037 90 00 64           1560 	mov	dptr,#0x0064
   003A 12s00r00           1561 	lcall	_delayMs
                    003D   1562 	C$mdrip.c$184$1$1 ==.
                    003D   1563 	XG$uartEnable$0$0 ==.
   003D 22                 1564 	ret
                           1565 ;------------------------------------------------------------
                           1566 ;Allocation info for local variables in function 'uartDisable'
                           1567 ;------------------------------------------------------------
                    003E   1568 	G$uartDisable$0$0 ==.
                    003E   1569 	C$mdrip.c$186$1$1 ==.
                           1570 ;	apps/mdrip/mdrip.c:186: void uartDisable() {
                           1571 ;	-----------------------------------------
                           1572 ;	 function uartDisable
                           1573 ;	-----------------------------------------
   003E                    1574 _uartDisable:
                    003E   1575 	C$mdrip.c$187$1$1 ==.
                           1576 ;	apps/mdrip/mdrip.c:187: delayMs(100);
   003E 90 00 64           1577 	mov	dptr,#0x0064
   0041 12s00r00           1578 	lcall	_delayMs
                    0044   1579 	C$mdrip.c$188$1$1 ==.
                           1580 ;	apps/mdrip/mdrip.c:188: U1UCR &= ~0x40; //CTS/RTS Off
   0044 AF FB              1581 	mov	r7,_U1UCR
   0046 53 07 BF           1582 	anl	ar7,#0xBF
   0049 8F FB              1583 	mov	_U1UCR,r7
                    004B   1584 	C$mdrip.c$189$1$1 ==.
                           1585 ;	apps/mdrip/mdrip.c:189: U1CSR &= ~0x40; // Receiver disable
   004B AF F8              1586 	mov	r7,_U1CSR
   004D 53 07 BF           1587 	anl	ar7,#0xBF
   0050 8F F8              1588 	mov	_U1CSR,r7
                    0052   1589 	C$mdrip.c$190$1$1 ==.
                    0052   1590 	XG$uartDisable$0$0 ==.
   0052 22                 1591 	ret
                           1592 ;------------------------------------------------------------
                           1593 ;Allocation info for local variables in function 'blink_yellow_led'
                           1594 ;------------------------------------------------------------
                    0053   1595 	G$blink_yellow_led$0$0 ==.
                    0053   1596 	C$mdrip.c$192$1$1 ==.
                           1597 ;	apps/mdrip/mdrip.c:192: void blink_yellow_led() {
                           1598 ;	-----------------------------------------
                           1599 ;	 function blink_yellow_led
                           1600 ;	-----------------------------------------
   0053                    1601 _blink_yellow_led:
                    0053   1602 	C$mdrip.c$193$1$1 ==.
                           1603 ;	apps/mdrip/mdrip.c:193: if(status_lights) {
   0053 30*01 37           1604 	jnb	_status_lights,00103$
                    0056   1605 	C$mdrip.c$194$3$3 ==.
                           1606 ;	apps/mdrip/mdrip.c:194: LED_YELLOW(((getMs()/250) % 2));//Blink quarter seconds
   0056 12s00r00           1607 	lcall	_getMs
   0059 AC 82              1608 	mov	r4,dpl
   005B AD 83              1609 	mov	r5,dph
   005D AE F0              1610 	mov	r6,b
   005F FF                 1611 	mov	r7,a
   0060 78r00              1612 	mov	r0,#__divulong_PARM_2
   0062 74 FA              1613 	mov	a,#0xFA
   0064 F2                 1614 	movx	@r0,a
   0065 08                 1615 	inc	r0
   0066 E4                 1616 	clr	a
   0067 F2                 1617 	movx	@r0,a
   0068 08                 1618 	inc	r0
   0069 F2                 1619 	movx	@r0,a
   006A 08                 1620 	inc	r0
   006B F2                 1621 	movx	@r0,a
   006C 8C 82              1622 	mov	dpl,r4
   006E 8D 83              1623 	mov	dph,r5
   0070 8E F0              1624 	mov	b,r6
   0072 EF                 1625 	mov	a,r7
   0073 12s00r00           1626 	lcall	__divulong
   0076 AC 82              1627 	mov	r4,dpl
   0078 AD 83              1628 	mov	r5,dph
   007A AE F0              1629 	mov	r6,b
   007C FF                 1630 	mov	r7,a
   007D EC                 1631 	mov	a,r4
   007E 30 E0 05           1632 	jnb	acc.0,00105$
   0081 43 FF 04           1633 	orl	_P2DIR,#0x04
   0084 80 07              1634 	sjmp	00103$
   0086                    1635 00105$:
   0086 AF FF              1636 	mov	r7,_P2DIR
   0088 53 07 FB           1637 	anl	ar7,#0xFB
   008B 8F FF              1638 	mov	_P2DIR,r7
   008D                    1639 00103$:
                    008D   1640 	C$mdrip.c$196$3$1 ==.
                    008D   1641 	XG$blink_yellow_led$0$0 ==.
   008D 22                 1642 	ret
                           1643 ;------------------------------------------------------------
                           1644 ;Allocation info for local variables in function 'blink_red_led'
                           1645 ;------------------------------------------------------------
                    008E   1646 	G$blink_red_led$0$0 ==.
                    008E   1647 	C$mdrip.c$198$3$1 ==.
                           1648 ;	apps/mdrip/mdrip.c:198: void blink_red_led() {
                           1649 ;	-----------------------------------------
                           1650 ;	 function blink_red_led
                           1651 ;	-----------------------------------------
   008E                    1652 _blink_red_led:
                    008E   1653 	C$mdrip.c$199$1$1 ==.
                           1654 ;	apps/mdrip/mdrip.c:199: if(status_lights) {
   008E 30*01 39           1655 	jnb	_status_lights,00103$
                    0091   1656 	C$mdrip.c$200$3$3 ==.
                           1657 ;	apps/mdrip/mdrip.c:200: LED_RED(((getMs()/500) % 2));//Blink half seconds
   0091 12s00r00           1658 	lcall	_getMs
   0094 AC 82              1659 	mov	r4,dpl
   0096 AD 83              1660 	mov	r5,dph
   0098 AE F0              1661 	mov	r6,b
   009A FF                 1662 	mov	r7,a
   009B 78r00              1663 	mov	r0,#__divulong_PARM_2
   009D 74 F4              1664 	mov	a,#0xF4
   009F F2                 1665 	movx	@r0,a
   00A0 08                 1666 	inc	r0
   00A1 74 01              1667 	mov	a,#0x01
   00A3 F2                 1668 	movx	@r0,a
   00A4 08                 1669 	inc	r0
   00A5 E4                 1670 	clr	a
   00A6 F2                 1671 	movx	@r0,a
   00A7 08                 1672 	inc	r0
   00A8 F2                 1673 	movx	@r0,a
   00A9 8C 82              1674 	mov	dpl,r4
   00AB 8D 83              1675 	mov	dph,r5
   00AD 8E F0              1676 	mov	b,r6
   00AF EF                 1677 	mov	a,r7
   00B0 12s00r00           1678 	lcall	__divulong
   00B3 AC 82              1679 	mov	r4,dpl
   00B5 AD 83              1680 	mov	r5,dph
   00B7 AE F0              1681 	mov	r6,b
   00B9 FF                 1682 	mov	r7,a
   00BA EC                 1683 	mov	a,r4
   00BB 30 E0 05           1684 	jnb	acc.0,00105$
   00BE 43 FF 02           1685 	orl	_P2DIR,#0x02
   00C1 80 07              1686 	sjmp	00103$
   00C3                    1687 00105$:
   00C3 AF FF              1688 	mov	r7,_P2DIR
   00C5 53 07 FD           1689 	anl	ar7,#0xFD
   00C8 8F FF              1690 	mov	_P2DIR,r7
   00CA                    1691 00103$:
                    00CA   1692 	C$mdrip.c$202$3$1 ==.
                    00CA   1693 	XG$blink_red_led$0$0 ==.
   00CA 22                 1694 	ret
                           1695 ;------------------------------------------------------------
                           1696 ;Allocation info for local variables in function 'getPacketPassedChecksum'
                           1697 ;------------------------------------------------------------
                    00CB   1698 	G$getPacketPassedChecksum$0$0 ==.
                    00CB   1699 	C$mdrip.c$204$3$1 ==.
                           1700 ;	apps/mdrip/mdrip.c:204: uint8 getPacketPassedChecksum(Dexcom_packet* p) {
                           1701 ;	-----------------------------------------
                           1702 ;	 function getPacketPassedChecksum
                           1703 ;	-----------------------------------------
   00CB                    1704 _getPacketPassedChecksum:
   00CB AE 82              1705 	mov	r6,dpl
   00CD AF 83              1706 	mov	r7,dph
                    00CF   1707 	C$mdrip.c$205$1$1 ==.
                           1708 ;	apps/mdrip/mdrip.c:205: return ((p->LQI & 0x80)==0x80) ? 1:0;
   00CF 74 14              1709 	mov	a,#0x14
   00D1 2E                 1710 	add	a,r6
   00D2 F5 82              1711 	mov	dpl,a
   00D4 E4                 1712 	clr	a
   00D5 3F                 1713 	addc	a,r7
   00D6 F5 83              1714 	mov	dph,a
   00D8 E0                 1715 	movx	a,@dptr
   00D9 FF                 1716 	mov	r7,a
   00DA 53 07 80           1717 	anl	ar7,#0x80
   00DD BF 80 04           1718 	cjne	r7,#0x80,00103$
   00E0 7F 01              1719 	mov	r7,#0x01
   00E2 80 02              1720 	sjmp	00104$
   00E4                    1721 00103$:
   00E4 7F 00              1722 	mov	r7,#0x00
   00E6                    1723 00104$:
   00E6 8F 82              1724 	mov	dpl,r7
                    00E8   1725 	C$mdrip.c$206$1$1 ==.
                    00E8   1726 	XG$getPacketPassedChecksum$0$0 ==.
   00E8 22                 1727 	ret
                           1728 ;------------------------------------------------------------
                           1729 ;Allocation info for local variables in function 'bit_reverse_byte'
                           1730 ;------------------------------------------------------------
                           1731 ;bRet                      Allocated with name '_bit_reverse_byte_bRet_1_1'
                           1732 ;------------------------------------------------------------
                    00E9   1733 	G$bit_reverse_byte$0$0 ==.
                    00E9   1734 	C$mdrip.c$208$1$1 ==.
                           1735 ;	apps/mdrip/mdrip.c:208: uint8 bit_reverse_byte(uint8 in) {
                           1736 ;	-----------------------------------------
                           1737 ;	 function bit_reverse_byte
                           1738 ;	-----------------------------------------
   00E9                    1739 _bit_reverse_byte:
   00E9 AF 82              1740 	mov	r7,dpl
                    00EB   1741 	C$mdrip.c$209$1$1 ==.
                           1742 ;	apps/mdrip/mdrip.c:209: uint8 XDATA bRet = 0;
   00EB 90s00r00           1743 	mov	dptr,#_bit_reverse_byte_bRet_1_1
   00EE E4                 1744 	clr	a
   00EF F0                 1745 	movx	@dptr,a
                    00F0   1746 	C$mdrip.c$210$1$1 ==.
                           1747 ;	apps/mdrip/mdrip.c:210: if(in & 0x01)
   00F0 EF                 1748 	mov	a,r7
   00F1 30 E0 06           1749 	jnb	acc.0,00102$
                    00F4   1750 	C$mdrip.c$211$1$1 ==.
                           1751 ;	apps/mdrip/mdrip.c:211: bRet |= 0x80;
   00F4 90s00r00           1752 	mov	dptr,#_bit_reverse_byte_bRet_1_1
   00F7 74 80              1753 	mov	a,#0x80
   00F9 F0                 1754 	movx	@dptr,a
   00FA                    1755 00102$:
                    00FA   1756 	C$mdrip.c$212$1$1 ==.
                           1757 ;	apps/mdrip/mdrip.c:212: if(in & 0x02)
   00FA EF                 1758 	mov	a,r7
   00FB 30 E1 08           1759 	jnb	acc.1,00104$
                    00FE   1760 	C$mdrip.c$213$1$1 ==.
                           1761 ;	apps/mdrip/mdrip.c:213: bRet |= 0x40;
   00FE 90s00r00           1762 	mov	dptr,#_bit_reverse_byte_bRet_1_1
   0101 E0                 1763 	movx	a,@dptr
   0102 FE                 1764 	mov	r6,a
   0103 44 40              1765 	orl	a,#0x40
   0105 F0                 1766 	movx	@dptr,a
   0106                    1767 00104$:
                    0106   1768 	C$mdrip.c$214$1$1 ==.
                           1769 ;	apps/mdrip/mdrip.c:214: if(in & 0x04)
   0106 EF                 1770 	mov	a,r7
   0107 30 E2 08           1771 	jnb	acc.2,00106$
                    010A   1772 	C$mdrip.c$215$1$1 ==.
                           1773 ;	apps/mdrip/mdrip.c:215: bRet |= 0x20;
   010A 90s00r00           1774 	mov	dptr,#_bit_reverse_byte_bRet_1_1
   010D E0                 1775 	movx	a,@dptr
   010E FE                 1776 	mov	r6,a
   010F 44 20              1777 	orl	a,#0x20
   0111 F0                 1778 	movx	@dptr,a
   0112                    1779 00106$:
                    0112   1780 	C$mdrip.c$216$1$1 ==.
                           1781 ;	apps/mdrip/mdrip.c:216: if(in & 0x08)
   0112 EF                 1782 	mov	a,r7
   0113 30 E3 08           1783 	jnb	acc.3,00108$
                    0116   1784 	C$mdrip.c$217$1$1 ==.
                           1785 ;	apps/mdrip/mdrip.c:217: bRet |= 0x10;
   0116 90s00r00           1786 	mov	dptr,#_bit_reverse_byte_bRet_1_1
   0119 E0                 1787 	movx	a,@dptr
   011A FE                 1788 	mov	r6,a
   011B 44 10              1789 	orl	a,#0x10
   011D F0                 1790 	movx	@dptr,a
   011E                    1791 00108$:
                    011E   1792 	C$mdrip.c$218$1$1 ==.
                           1793 ;	apps/mdrip/mdrip.c:218: if(in & 0x10)
   011E EF                 1794 	mov	a,r7
   011F 30 E4 08           1795 	jnb	acc.4,00110$
                    0122   1796 	C$mdrip.c$219$1$1 ==.
                           1797 ;	apps/mdrip/mdrip.c:219: bRet |= 0x08;
   0122 90s00r00           1798 	mov	dptr,#_bit_reverse_byte_bRet_1_1
   0125 E0                 1799 	movx	a,@dptr
   0126 FE                 1800 	mov	r6,a
   0127 44 08              1801 	orl	a,#0x08
   0129 F0                 1802 	movx	@dptr,a
   012A                    1803 00110$:
                    012A   1804 	C$mdrip.c$220$1$1 ==.
                           1805 ;	apps/mdrip/mdrip.c:220: if(in & 0x20)
   012A EF                 1806 	mov	a,r7
   012B 30 E5 08           1807 	jnb	acc.5,00112$
                    012E   1808 	C$mdrip.c$221$1$1 ==.
                           1809 ;	apps/mdrip/mdrip.c:221: bRet |= 0x04;
   012E 90s00r00           1810 	mov	dptr,#_bit_reverse_byte_bRet_1_1
   0131 E0                 1811 	movx	a,@dptr
   0132 FE                 1812 	mov	r6,a
   0133 44 04              1813 	orl	a,#0x04
   0135 F0                 1814 	movx	@dptr,a
   0136                    1815 00112$:
                    0136   1816 	C$mdrip.c$222$1$1 ==.
                           1817 ;	apps/mdrip/mdrip.c:222: if(in & 0x40)
   0136 EF                 1818 	mov	a,r7
   0137 30 E6 08           1819 	jnb	acc.6,00114$
                    013A   1820 	C$mdrip.c$223$1$1 ==.
                           1821 ;	apps/mdrip/mdrip.c:223: bRet |= 0x02;
   013A 90s00r00           1822 	mov	dptr,#_bit_reverse_byte_bRet_1_1
   013D E0                 1823 	movx	a,@dptr
   013E FE                 1824 	mov	r6,a
   013F 44 02              1825 	orl	a,#0x02
   0141 F0                 1826 	movx	@dptr,a
   0142                    1827 00114$:
                    0142   1828 	C$mdrip.c$224$1$1 ==.
                           1829 ;	apps/mdrip/mdrip.c:224: if(in & 0x80)
   0142 EF                 1830 	mov	a,r7
   0143 30 E7 08           1831 	jnb	acc.7,00116$
                    0146   1832 	C$mdrip.c$225$1$1 ==.
                           1833 ;	apps/mdrip/mdrip.c:225: bRet |= 0x01;
   0146 90s00r00           1834 	mov	dptr,#_bit_reverse_byte_bRet_1_1
   0149 E0                 1835 	movx	a,@dptr
   014A FF                 1836 	mov	r7,a
   014B 44 01              1837 	orl	a,#0x01
   014D F0                 1838 	movx	@dptr,a
   014E                    1839 00116$:
                    014E   1840 	C$mdrip.c$226$1$1 ==.
                           1841 ;	apps/mdrip/mdrip.c:226: return bRet;
   014E 90s00r00           1842 	mov	dptr,#_bit_reverse_byte_bRet_1_1
   0151 E0                 1843 	movx	a,@dptr
                    0152   1844 	C$mdrip.c$227$1$1 ==.
                    0152   1845 	XG$bit_reverse_byte$0$0 ==.
   0152 F5 82              1846 	mov	dpl,a
   0154 22                 1847 	ret
                           1848 ;------------------------------------------------------------
                           1849 ;Allocation info for local variables in function 'min8'
                           1850 ;------------------------------------------------------------
                    0155   1851 	G$min8$0$0 ==.
                    0155   1852 	C$mdrip.c$229$1$1 ==.
                           1853 ;	apps/mdrip/mdrip.c:229: uint8 min8(uint8 a, uint8 b) {
                           1854 ;	-----------------------------------------
                           1855 ;	 function min8
                           1856 ;	-----------------------------------------
   0155                    1857 _min8:
   0155 AF 82              1858 	mov	r7,dpl
                    0157   1859 	C$mdrip.c$230$1$1 ==.
                           1860 ;	apps/mdrip/mdrip.c:230: if(a < b) return a;
   0157 78r40              1861 	mov	r0,#_min8_PARM_2
   0159 C3                 1862 	clr	c
   015A E2                 1863 	movx	a,@r0
   015B F5 F0              1864 	mov	b,a
   015D EF                 1865 	mov	a,r7
   015E 95 F0              1866 	subb	a,b
   0160 50 04              1867 	jnc	00102$
   0162 8F 82              1868 	mov	dpl,r7
   0164 80 05              1869 	sjmp	00103$
   0166                    1870 00102$:
                    0166   1871 	C$mdrip.c$231$1$1 ==.
                           1872 ;	apps/mdrip/mdrip.c:231: return b;
   0166 78r40              1873 	mov	r0,#_min8_PARM_2
   0168 E2                 1874 	movx	a,@r0
   0169 F5 82              1875 	mov	dpl,a
   016B                    1876 00103$:
                    016B   1877 	C$mdrip.c$232$1$1 ==.
                    016B   1878 	XG$min8$0$0 ==.
   016B 22                 1879 	ret
                           1880 ;------------------------------------------------------------
                           1881 ;Allocation info for local variables in function 'bit_reverse_bytes'
                           1882 ;------------------------------------------------------------
                           1883 ;i                         Allocated with name '_bit_reverse_bytes_i_1_1'
                           1884 ;------------------------------------------------------------
                    016C   1885 	G$bit_reverse_bytes$0$0 ==.
                    016C   1886 	C$mdrip.c$234$1$1 ==.
                           1887 ;	apps/mdrip/mdrip.c:234: void bit_reverse_bytes(uint8* buf, uint8 nLen) {
                           1888 ;	-----------------------------------------
                           1889 ;	 function bit_reverse_bytes
                           1890 ;	-----------------------------------------
   016C                    1891 _bit_reverse_bytes:
   016C AF F0              1892 	mov	r7,b
   016E AE 83              1893 	mov	r6,dph
   0170 E5 82              1894 	mov	a,dpl
   0172 78r42              1895 	mov	r0,#_bit_reverse_bytes_buf_1_1
   0174 F2                 1896 	movx	@r0,a
   0175 08                 1897 	inc	r0
   0176 EE                 1898 	mov	a,r6
   0177 F2                 1899 	movx	@r0,a
   0178 08                 1900 	inc	r0
   0179 EF                 1901 	mov	a,r7
   017A F2                 1902 	movx	@r0,a
                    017B   1903 	C$mdrip.c$235$1$1 ==.
                           1904 ;	apps/mdrip/mdrip.c:235: uint8 XDATA i = 0;
   017B 7C 00              1905 	mov	r4,#0x00
   017D                    1906 00101$:
                    017D   1907 	C$mdrip.c$236$1$1 ==.
                           1908 ;	apps/mdrip/mdrip.c:236: for(; i < nLen; i++) {
   017D 78r41              1909 	mov	r0,#_bit_reverse_bytes_PARM_2
   017F C3                 1910 	clr	c
   0180 E2                 1911 	movx	a,@r0
   0181 F5 F0              1912 	mov	b,a
   0183 EC                 1913 	mov	a,r4
   0184 95 F0              1914 	subb	a,b
   0186 50 3A              1915 	jnc	00105$
                    0188   1916 	C$mdrip.c$237$2$2 ==.
                           1917 ;	apps/mdrip/mdrip.c:237: buf[i] = bit_reverse_byte(buf[i]);
   0188 78r42              1918 	mov	r0,#_bit_reverse_bytes_buf_1_1
   018A E2                 1919 	movx	a,@r0
   018B 2C                 1920 	add	a,r4
   018C FA                 1921 	mov	r2,a
   018D 08                 1922 	inc	r0
   018E E2                 1923 	movx	a,@r0
   018F 34 00              1924 	addc	a,#0x00
   0191 FB                 1925 	mov	r3,a
   0192 08                 1926 	inc	r0
   0193 E2                 1927 	movx	a,@r0
   0194 FF                 1928 	mov	r7,a
   0195 8A 82              1929 	mov	dpl,r2
   0197 8B 83              1930 	mov	dph,r3
   0199 8F F0              1931 	mov	b,r7
   019B 12s00r00           1932 	lcall	__gptrget
   019E F5 82              1933 	mov	dpl,a
   01A0 C0 07              1934 	push	ar7
   01A2 C0 04              1935 	push	ar4
   01A4 C0 03              1936 	push	ar3
   01A6 C0 02              1937 	push	ar2
   01A8 12s00rE9           1938 	lcall	_bit_reverse_byte
   01AB AE 82              1939 	mov	r6,dpl
   01AD D0 02              1940 	pop	ar2
   01AF D0 03              1941 	pop	ar3
   01B1 D0 04              1942 	pop	ar4
   01B3 D0 07              1943 	pop	ar7
   01B5 8A 82              1944 	mov	dpl,r2
   01B7 8B 83              1945 	mov	dph,r3
   01B9 8F F0              1946 	mov	b,r7
   01BB EE                 1947 	mov	a,r6
   01BC 12s00r00           1948 	lcall	__gptrput
                    01BF   1949 	C$mdrip.c$236$1$1 ==.
                           1950 ;	apps/mdrip/mdrip.c:236: for(; i < nLen; i++) {
   01BF 0C                 1951 	inc	r4
   01C0 80 BB              1952 	sjmp	00101$
   01C2                    1953 00105$:
                    01C2   1954 	C$mdrip.c$239$1$1 ==.
                    01C2   1955 	XG$bit_reverse_bytes$0$0 ==.
   01C2 22                 1956 	ret
                           1957 ;------------------------------------------------------------
                           1958 ;Allocation info for local variables in function 'dex_num_decoder'
                           1959 ;------------------------------------------------------------
                           1960 ;usReversed                Allocated with name '_dex_num_decoder_usReversed_1_1'
                           1961 ;usExponent                Allocated with name '_dex_num_decoder_usExponent_1_1'
                           1962 ;usMantissa                Allocated with name '_dex_num_decoder_usMantissa_1_1'
                           1963 ;------------------------------------------------------------
                    01C3   1964 	G$dex_num_decoder$0$0 ==.
                    01C3   1965 	C$mdrip.c$241$1$1 ==.
                           1966 ;	apps/mdrip/mdrip.c:241: uint32 dex_num_decoder(uint16 usShortFloat) {
                           1967 ;	-----------------------------------------
                           1968 ;	 function dex_num_decoder
                           1969 ;	-----------------------------------------
   01C3                    1970 _dex_num_decoder:
   01C3 AE 82              1971 	mov	r6,dpl
   01C5 AF 83              1972 	mov	r7,dph
                    01C7   1973 	C$mdrip.c$242$1$1 ==.
                           1974 ;	apps/mdrip/mdrip.c:242: uint16 XDATA usReversed = usShortFloat;
   01C7 90s00r01           1975 	mov	dptr,#_dex_num_decoder_usReversed_1_1
   01CA EE                 1976 	mov	a,r6
   01CB F0                 1977 	movx	@dptr,a
   01CC A3                 1978 	inc	dptr
   01CD EF                 1979 	mov	a,r7
   01CE F0                 1980 	movx	@dptr,a
                    01CF   1981 	C$mdrip.c$245$1$1 ==.
                           1982 ;	apps/mdrip/mdrip.c:245: bit_reverse_bytes((uint8*)&usReversed, 2);
   01CF 7Er01              1983 	mov	r6,#_dex_num_decoder_usReversed_1_1
   01D1 7Fs00              1984 	mov	r7,#(_dex_num_decoder_usReversed_1_1 >> 8)
   01D3 7D 00              1985 	mov	r5,#0x00
   01D5 78r41              1986 	mov	r0,#_bit_reverse_bytes_PARM_2
   01D7 74 02              1987 	mov	a,#0x02
   01D9 F2                 1988 	movx	@r0,a
   01DA 8E 82              1989 	mov	dpl,r6
   01DC 8F 83              1990 	mov	dph,r7
   01DE 8D F0              1991 	mov	b,r5
   01E0 12s01r6C           1992 	lcall	_bit_reverse_bytes
                    01E3   1993 	C$mdrip.c$246$1$1 ==.
                           1994 ;	apps/mdrip/mdrip.c:246: usExponent = ((usReversed & 0xE000) >> 13);
   01E3 90s00r01           1995 	mov	dptr,#_dex_num_decoder_usReversed_1_1
   01E6 E0                 1996 	movx	a,@dptr
   01E7 FE                 1997 	mov	r6,a
   01E8 A3                 1998 	inc	dptr
   01E9 E0                 1999 	movx	a,@dptr
   01EA FF                 2000 	mov	r7,a
   01EB 74 E0              2001 	mov	a,#0xE0
   01ED 5F                 2002 	anl	a,r7
   01EE C4                 2003 	swap	a
   01EF 03                 2004 	rr	a
   01F0 54 07              2005 	anl	a,#0x07
   01F2 FC                 2006 	mov	r4,a
                    01F3   2007 	C$mdrip.c$247$1$1 ==.
                           2008 ;	apps/mdrip/mdrip.c:247: usMantissa = (usReversed & 0x1FFF);
   01F3 53 07 1F           2009 	anl	ar7,#0x1F
   01F6 7D 00              2010 	mov	r5,#0x00
   01F8 7B 00              2011 	mov	r3,#0x00
                    01FA   2012 	C$mdrip.c$248$1$1 ==.
                           2013 ;	apps/mdrip/mdrip.c:248: return usMantissa << usExponent;
   01FA 8C F0              2014 	mov	b,r4
   01FC 05 F0              2015 	inc	b
   01FE 80 0C              2016 	sjmp	00104$
   0200                    2017 00103$:
   0200 EE                 2018 	mov	a,r6
   0201 2E                 2019 	add	a,r6
   0202 FE                 2020 	mov	r6,a
   0203 EF                 2021 	mov	a,r7
   0204 33                 2022 	rlc	a
   0205 FF                 2023 	mov	r7,a
   0206 ED                 2024 	mov	a,r5
   0207 33                 2025 	rlc	a
   0208 FD                 2026 	mov	r5,a
   0209 EB                 2027 	mov	a,r3
   020A 33                 2028 	rlc	a
   020B FB                 2029 	mov	r3,a
   020C                    2030 00104$:
   020C D5 F0 F1           2031 	djnz	b,00103$
   020F 8E 82              2032 	mov	dpl,r6
   0211 8F 83              2033 	mov	dph,r7
   0213 8D F0              2034 	mov	b,r5
   0215 EB                 2035 	mov	a,r3
                    0216   2036 	C$mdrip.c$249$1$1 ==.
                    0216   2037 	XG$dex_num_decoder$0$0 ==.
   0216 22                 2038 	ret
                           2039 ;------------------------------------------------------------
                           2040 ;Allocation info for local variables in function 'dexcom_src_to_ascii'
                           2041 ;------------------------------------------------------------
                           2042 ;addr                      Allocated with name '_dexcom_src_to_ascii_PARM_2'
                           2043 ;src                       Allocated with name '_dexcom_src_to_ascii_src_1_1'
                           2044 ;sloc0                     Allocated with name '_dexcom_src_to_ascii_sloc0_1_0'
                           2045 ;------------------------------------------------------------
                    0217   2046 	G$dexcom_src_to_ascii$0$0 ==.
                    0217   2047 	C$mdrip.c$256$1$1 ==.
                           2048 ;	apps/mdrip/mdrip.c:256: void dexcom_src_to_ascii(XDATA uint32 src, XDATA char addr[6]) {
                           2049 ;	-----------------------------------------
                           2050 ;	 function dexcom_src_to_ascii
                           2051 ;	-----------------------------------------
   0217                    2052 _dexcom_src_to_ascii:
   0217 AF 82              2053 	mov	r7,dpl
   0219 AE 83              2054 	mov	r6,dph
   021B AD F0              2055 	mov	r5,b
   021D FC                 2056 	mov	r4,a
   021E 90s00r05           2057 	mov	dptr,#_dexcom_src_to_ascii_src_1_1
   0221 EF                 2058 	mov	a,r7
   0222 F0                 2059 	movx	@dptr,a
   0223 A3                 2060 	inc	dptr
   0224 EE                 2061 	mov	a,r6
   0225 F0                 2062 	movx	@dptr,a
   0226 A3                 2063 	inc	dptr
   0227 ED                 2064 	mov	a,r5
   0228 F0                 2065 	movx	@dptr,a
   0229 A3                 2066 	inc	dptr
   022A EC                 2067 	mov	a,r4
   022B F0                 2068 	movx	@dptr,a
                    022C   2069 	C$mdrip.c$257$1$1 ==.
                           2070 ;	apps/mdrip/mdrip.c:257: addr[0] = SrcNameTable[(src >> 20) & 0x1F];
   022C 90s00r03           2071 	mov	dptr,#_dexcom_src_to_ascii_PARM_2
   022F E0                 2072 	movx	a,@dptr
   0230 FE                 2073 	mov	r6,a
   0231 A3                 2074 	inc	dptr
   0232 E0                 2075 	movx	a,@dptr
   0233 FF                 2076 	mov	r7,a
   0234 90s00r05           2077 	mov	dptr,#_dexcom_src_to_ascii_src_1_1
   0237 E0                 2078 	movx	a,@dptr
   0238 F5*00              2079 	mov	_dexcom_src_to_ascii_sloc0_1_0,a
   023A A3                 2080 	inc	dptr
   023B E0                 2081 	movx	a,@dptr
   023C F5*01              2082 	mov	(_dexcom_src_to_ascii_sloc0_1_0 + 1),a
   023E A3                 2083 	inc	dptr
   023F E0                 2084 	movx	a,@dptr
   0240 F5*02              2085 	mov	(_dexcom_src_to_ascii_sloc0_1_0 + 2),a
   0242 A3                 2086 	inc	dptr
   0243 E0                 2087 	movx	a,@dptr
   0244 F5*03              2088 	mov	(_dexcom_src_to_ascii_sloc0_1_0 + 3),a
   0246 A8*02              2089 	mov	r0,(_dexcom_src_to_ascii_sloc0_1_0 + 2)
   0248 C4                 2090 	swap	a
   0249 C8                 2091 	xch	a,r0
   024A C4                 2092 	swap	a
   024B 54 0F              2093 	anl	a,#0x0F
   024D 68                 2094 	xrl	a,r0
   024E C8                 2095 	xch	a,r0
   024F 54 0F              2096 	anl	a,#0x0F
   0251 C8                 2097 	xch	a,r0
   0252 68                 2098 	xrl	a,r0
   0253 C8                 2099 	xch	a,r0
   0254 53 00 1F           2100 	anl	ar0,#0x1F
   0257 E4                 2101 	clr	a
   0258 F9                 2102 	mov	r1,a
   0259 E8                 2103 	mov	a,r0
   025A 24r4B              2104 	add	a,#_SrcNameTable
   025C F5 82              2105 	mov	dpl,a
   025E E9                 2106 	mov	a,r1
   025F 34s00              2107 	addc	a,#(_SrcNameTable >> 8)
   0261 F5 83              2108 	mov	dph,a
   0263 E0                 2109 	movx	a,@dptr
   0264 8E 82              2110 	mov	dpl,r6
   0266 8F 83              2111 	mov	dph,r7
   0268 F0                 2112 	movx	@dptr,a
                    0269   2113 	C$mdrip.c$258$1$1 ==.
                           2114 ;	apps/mdrip/mdrip.c:258: addr[1] = SrcNameTable[(src >> 15) & 0x1F];
   0269 74 01              2115 	mov	a,#0x01
   026B 2E                 2116 	add	a,r6
   026C FC                 2117 	mov	r4,a
   026D E4                 2118 	clr	a
   026E 3F                 2119 	addc	a,r7
   026F FD                 2120 	mov	r5,a
   0270 A8*01              2121 	mov	r0,(_dexcom_src_to_ascii_sloc0_1_0 + 1)
   0272 E5*02              2122 	mov	a,(_dexcom_src_to_ascii_sloc0_1_0 + 2)
   0274 A2 E7              2123 	mov	c,acc.7
   0276 C8                 2124 	xch	a,r0
   0277 33                 2125 	rlc	a
   0278 C8                 2126 	xch	a,r0
   0279 33                 2127 	rlc	a
   027A C8                 2128 	xch	a,r0
   027B 54 01              2129 	anl	a,#0x01
   027D F9                 2130 	mov	r1,a
   027E E5*03              2131 	mov	a,(_dexcom_src_to_ascii_sloc0_1_0 + 3)
   0280 25*03              2132 	add	a,(_dexcom_src_to_ascii_sloc0_1_0 + 3)
   0282 49                 2133 	orl	a,r1
   0283 E5*03              2134 	mov	a,(_dexcom_src_to_ascii_sloc0_1_0 + 3)
   0285 23                 2135 	rl	a
   0286 54 01              2136 	anl	a,#0x01
   0288 53 00 1F           2137 	anl	ar0,#0x1F
   028B E4                 2138 	clr	a
   028C F9                 2139 	mov	r1,a
   028D E8                 2140 	mov	a,r0
   028E 24r4B              2141 	add	a,#_SrcNameTable
   0290 F5 82              2142 	mov	dpl,a
   0292 E9                 2143 	mov	a,r1
   0293 34s00              2144 	addc	a,#(_SrcNameTable >> 8)
   0295 F5 83              2145 	mov	dph,a
   0297 E0                 2146 	movx	a,@dptr
   0298 8C 82              2147 	mov	dpl,r4
   029A 8D 83              2148 	mov	dph,r5
   029C F0                 2149 	movx	@dptr,a
                    029D   2150 	C$mdrip.c$259$1$1 ==.
                           2151 ;	apps/mdrip/mdrip.c:259: addr[2] = SrcNameTable[(src >> 10) & 0x1F];
   029D 74 02              2152 	mov	a,#0x02
   029F 2E                 2153 	add	a,r6
   02A0 FC                 2154 	mov	r4,a
   02A1 E4                 2155 	clr	a
   02A2 3F                 2156 	addc	a,r7
   02A3 FD                 2157 	mov	r5,a
   02A4 A8*01              2158 	mov	r0,(_dexcom_src_to_ascii_sloc0_1_0 + 1)
   02A6 E5*02              2159 	mov	a,(_dexcom_src_to_ascii_sloc0_1_0 + 2)
   02A8 C3                 2160 	clr	c
   02A9 13                 2161 	rrc	a
   02AA C8                 2162 	xch	a,r0
   02AB 13                 2163 	rrc	a
   02AC C8                 2164 	xch	a,r0
   02AD C3                 2165 	clr	c
   02AE 13                 2166 	rrc	a
   02AF C8                 2167 	xch	a,r0
   02B0 13                 2168 	rrc	a
   02B1 C8                 2169 	xch	a,r0
   02B2 F9                 2170 	mov	r1,a
   02B3 E5*03              2171 	mov	a,(_dexcom_src_to_ascii_sloc0_1_0 + 3)
   02B5 03                 2172 	rr	a
   02B6 03                 2173 	rr	a
   02B7 54 C0              2174 	anl	a,#0xC0
   02B9 49                 2175 	orl	a,r1
   02BA E5*03              2176 	mov	a,(_dexcom_src_to_ascii_sloc0_1_0 + 3)
   02BC 03                 2177 	rr	a
   02BD 03                 2178 	rr	a
   02BE 54 3F              2179 	anl	a,#0x3F
   02C0 53 00 1F           2180 	anl	ar0,#0x1F
   02C3 E4                 2181 	clr	a
   02C4 F9                 2182 	mov	r1,a
   02C5 E8                 2183 	mov	a,r0
   02C6 24r4B              2184 	add	a,#_SrcNameTable
   02C8 F5 82              2185 	mov	dpl,a
   02CA E9                 2186 	mov	a,r1
   02CB 34s00              2187 	addc	a,#(_SrcNameTable >> 8)
   02CD F5 83              2188 	mov	dph,a
   02CF E0                 2189 	movx	a,@dptr
   02D0 8C 82              2190 	mov	dpl,r4
   02D2 8D 83              2191 	mov	dph,r5
   02D4 F0                 2192 	movx	@dptr,a
                    02D5   2193 	C$mdrip.c$260$1$1 ==.
                           2194 ;	apps/mdrip/mdrip.c:260: addr[3] = SrcNameTable[(src >> 5) & 0x1F];
   02D5 74 03              2195 	mov	a,#0x03
   02D7 2E                 2196 	add	a,r6
   02D8 FC                 2197 	mov	r4,a
   02D9 E4                 2198 	clr	a
   02DA 3F                 2199 	addc	a,r7
   02DB FD                 2200 	mov	r5,a
   02DC A8*00              2201 	mov	r0,_dexcom_src_to_ascii_sloc0_1_0
   02DE E5*01              2202 	mov	a,(_dexcom_src_to_ascii_sloc0_1_0 + 1)
   02E0 C4                 2203 	swap	a
   02E1 03                 2204 	rr	a
   02E2 C8                 2205 	xch	a,r0
   02E3 C4                 2206 	swap	a
   02E4 03                 2207 	rr	a
   02E5 54 07              2208 	anl	a,#0x07
   02E7 68                 2209 	xrl	a,r0
   02E8 C8                 2210 	xch	a,r0
   02E9 54 07              2211 	anl	a,#0x07
   02EB C8                 2212 	xch	a,r0
   02EC 68                 2213 	xrl	a,r0
   02ED C8                 2214 	xch	a,r0
   02EE F9                 2215 	mov	r1,a
   02EF E5*02              2216 	mov	a,(_dexcom_src_to_ascii_sloc0_1_0 + 2)
   02F1 C4                 2217 	swap	a
   02F2 03                 2218 	rr	a
   02F3 54 F8              2219 	anl	a,#0xF8
   02F5 49                 2220 	orl	a,r1
   02F6 AA*02              2221 	mov	r2,(_dexcom_src_to_ascii_sloc0_1_0 + 2)
   02F8 E5*03              2222 	mov	a,(_dexcom_src_to_ascii_sloc0_1_0 + 3)
   02FA C4                 2223 	swap	a
   02FB 03                 2224 	rr	a
   02FC CA                 2225 	xch	a,r2
   02FD C4                 2226 	swap	a
   02FE 03                 2227 	rr	a
   02FF 54 07              2228 	anl	a,#0x07
   0301 6A                 2229 	xrl	a,r2
   0302 CA                 2230 	xch	a,r2
   0303 54 07              2231 	anl	a,#0x07
   0305 CA                 2232 	xch	a,r2
   0306 6A                 2233 	xrl	a,r2
   0307 CA                 2234 	xch	a,r2
   0308 53 00 1F           2235 	anl	ar0,#0x1F
   030B E4                 2236 	clr	a
   030C F9                 2237 	mov	r1,a
   030D E8                 2238 	mov	a,r0
   030E 24r4B              2239 	add	a,#_SrcNameTable
   0310 F5 82              2240 	mov	dpl,a
   0312 E9                 2241 	mov	a,r1
   0313 34s00              2242 	addc	a,#(_SrcNameTable >> 8)
   0315 F5 83              2243 	mov	dph,a
   0317 E0                 2244 	movx	a,@dptr
   0318 8C 82              2245 	mov	dpl,r4
   031A 8D 83              2246 	mov	dph,r5
   031C F0                 2247 	movx	@dptr,a
                    031D   2248 	C$mdrip.c$261$1$1 ==.
                           2249 ;	apps/mdrip/mdrip.c:261: addr[4] = SrcNameTable[(src >> 0) & 0x1F];
   031D 74 04              2250 	mov	a,#0x04
   031F 2E                 2251 	add	a,r6
   0320 FC                 2252 	mov	r4,a
   0321 E4                 2253 	clr	a
   0322 3F                 2254 	addc	a,r7
   0323 FD                 2255 	mov	r5,a
   0324 A8*00              2256 	mov	r0,_dexcom_src_to_ascii_sloc0_1_0
   0326 53 00 1F           2257 	anl	ar0,#0x1F
   0329 E4                 2258 	clr	a
   032A F9                 2259 	mov	r1,a
   032B E8                 2260 	mov	a,r0
   032C 24r4B              2261 	add	a,#_SrcNameTable
   032E F5 82              2262 	mov	dpl,a
   0330 E9                 2263 	mov	a,r1
   0331 34s00              2264 	addc	a,#(_SrcNameTable >> 8)
   0333 F5 83              2265 	mov	dph,a
   0335 E0                 2266 	movx	a,@dptr
   0336 8C 82              2267 	mov	dpl,r4
   0338 8D 83              2268 	mov	dph,r5
   033A F0                 2269 	movx	@dptr,a
                    033B   2270 	C$mdrip.c$262$1$1 ==.
                           2271 ;	apps/mdrip/mdrip.c:262: addr[5] = 0;
   033B 8E 82              2272 	mov	dpl,r6
   033D 8F 83              2273 	mov	dph,r7
   033F A3                 2274 	inc	dptr
   0340 A3                 2275 	inc	dptr
   0341 A3                 2276 	inc	dptr
   0342 A3                 2277 	inc	dptr
   0343 A3                 2278 	inc	dptr
   0344 E4                 2279 	clr	a
   0345 F0                 2280 	movx	@dptr,a
                    0346   2281 	C$mdrip.c$263$1$1 ==.
                    0346   2282 	XG$dexcom_src_to_ascii$0$0 ==.
   0346 22                 2283 	ret
                           2284 ;------------------------------------------------------------
                           2285 ;Allocation info for local variables in function 'clearRxErrors'
                           2286 ;------------------------------------------------------------
                    0347   2287 	G$clearRxErrors$0$0 ==.
                    0347   2288 	C$mdrip.c$265$1$1 ==.
                           2289 ;	apps/mdrip/mdrip.c:265: void clearRxErrors() {	
                           2290 ;	-----------------------------------------
                           2291 ;	 function clearRxErrors
                           2292 ;	-----------------------------------------
   0347                    2293 _clearRxErrors:
                    0347   2294 	C$mdrip.c$266$1$1 ==.
                           2295 ;	apps/mdrip/mdrip.c:266: if (uart1RxBufferFullOccurred)
                    0347   2296 	C$mdrip.c$267$2$2 ==.
                           2297 ;	apps/mdrip/mdrip.c:267: {   uart1RxBufferFullOccurred = 0;							// Clear Buffer Full Errors
   0347 10*00 02           2298 	jbc	_uart1RxBufferFullOccurred,00112$
   034A 80 03              2299 	sjmp	00102$
   034C                    2300 00112$:
                    034C   2301 	C$mdrip.c$268$3$3 ==.
                           2302 ;	apps/mdrip/mdrip.c:268: LED_RED(1);												// Error Indicator
   034C 43 FF 02           2303 	orl	_P2DIR,#0x02
   034F                    2304 00102$:
                    034F   2305 	C$mdrip.c$270$1$1 ==.
                           2306 ;	apps/mdrip/mdrip.c:270: if (uart1RxParityErrorOccurred)
                    034F   2307 	C$mdrip.c$271$2$4 ==.
                           2308 ;	apps/mdrip/mdrip.c:271: {   uart1RxParityErrorOccurred = 0;							// Clear Parity Errors
   034F 10*00 02           2309 	jbc	_uart1RxParityErrorOccurred,00113$
   0352 80 03              2310 	sjmp	00104$
   0354                    2311 00113$:
                    0354   2312 	C$mdrip.c$272$3$5 ==.
                           2313 ;	apps/mdrip/mdrip.c:272: LED_RED(1);												// Error Indicator
   0354 43 FF 02           2314 	orl	_P2DIR,#0x02
   0357                    2315 00104$:
                    0357   2316 	C$mdrip.c$274$1$1 ==.
                           2317 ;	apps/mdrip/mdrip.c:274: if (uart1RxFramingErrorOccurred)
                    0357   2318 	C$mdrip.c$275$2$6 ==.
                           2319 ;	apps/mdrip/mdrip.c:275: {   uart1RxFramingErrorOccurred = 0;
   0357 10*00 02           2320 	jbc	_uart1RxFramingErrorOccurred,00114$
   035A 80 0F              2321 	sjmp	00106$
   035C                    2322 00114$:
                    035C   2323 	C$mdrip.c$276$3$7 ==.
                           2324 ;	apps/mdrip/mdrip.c:276: LED_RED(1);												// Put the red LED on to show there was an error
   035C 43 FF 02           2325 	orl	_P2DIR,#0x02
                    035F   2326 	C$mdrip.c$277$2$6 ==.
                           2327 ;	apps/mdrip/mdrip.c:277: uartDisable();
   035F 12s00r3E           2328 	lcall	_uartDisable
                    0362   2329 	C$mdrip.c$279$2$6 ==.
                           2330 ;	apps/mdrip/mdrip.c:279: delayMs(250);											// Crude and will slow us down but we can take the small hit
   0362 90 00 FA           2331 	mov	dptr,#0x00FA
   0365 12s00r00           2332 	lcall	_delayMs
                    0368   2333 	C$mdrip.c$282$2$6 ==.
                           2334 ;	apps/mdrip/mdrip.c:282: uartEnable();
   0368 12s00r2D           2335 	lcall	_uartEnable
   036B                    2336 00106$:
                    036B   2337 	C$mdrip.c$284$2$8 ==.
                           2338 ;	apps/mdrip/mdrip.c:284: LED_RED(0);												// Error Indicator
   036B AF FF              2339 	mov	r7,_P2DIR
   036D 53 07 FD           2340 	anl	ar7,#0xFD
   0370 8F FF              2341 	mov	_P2DIR,r7
                    0372   2342 	C$mdrip.c$285$2$8 ==.
                    0372   2343 	XG$clearRxErrors$0$0 ==.
   0372 22                 2344 	ret
                           2345 ;------------------------------------------------------------
                           2346 ;Allocation info for local variables in function 'doServices'
                           2347 ;------------------------------------------------------------
                    0373   2348 	G$doServices$0$0 ==.
                    0373   2349 	C$mdrip.c$287$2$8 ==.
                           2350 ;	apps/mdrip/mdrip.c:287: void doServices() {
                           2351 ;	-----------------------------------------
                           2352 ;	 function doServices
                           2353 ;	-----------------------------------------
   0373                    2354 _doServices:
                    0373   2355 	C$mdrip.c$288$1$1 ==.
                           2356 ;	apps/mdrip/mdrip.c:288: boardService();
   0373 12s00r00           2357 	lcall	_boardService
                    0376   2358 	C$mdrip.c$289$1$1 ==.
                           2359 ;	apps/mdrip/mdrip.c:289: if(usbPowerPresent()) {
   0376 12s00r00           2360 	lcall	_usbPowerPresent
   0379 50 06              2361 	jnc	00103$
                    037B   2362 	C$mdrip.c$290$2$2 ==.
                           2363 ;	apps/mdrip/mdrip.c:290: usbComService();
   037B 12s00r00           2364 	lcall	_usbComService
                    037E   2365 	C$mdrip.c$291$2$2 ==.
                           2366 ;	apps/mdrip/mdrip.c:291: usbShowStatusWithGreenLed();
   037E 12s00r00           2367 	lcall	_usbShowStatusWithGreenLed
   0381                    2368 00103$:
                    0381   2369 	C$mdrip.c$295$2$1 ==.
                    0381   2370 	XG$doServices$0$0 ==.
   0381 22                 2371 	ret
                           2372 ;------------------------------------------------------------
                           2373 ;Allocation info for local variables in function 'initUart1'
                           2374 ;------------------------------------------------------------
                    0382   2375 	G$initUart1$0$0 ==.
                    0382   2376 	C$mdrip.c$297$2$1 ==.
                           2377 ;	apps/mdrip/mdrip.c:297: void initUart1() {
                           2378 ;	-----------------------------------------
                           2379 ;	 function initUart1
                           2380 ;	-----------------------------------------
   0382                    2381 _initUart1:
                    0382   2382 	C$mdrip.c$298$1$1 ==.
                           2383 ;	apps/mdrip/mdrip.c:298: uart1Init();
   0382 12s00r00           2384 	lcall	_uart1Init
                    0385   2385 	C$mdrip.c$299$1$1 ==.
                           2386 ;	apps/mdrip/mdrip.c:299: uart1SetBaudRate(9600);
   0385 90 25 80           2387 	mov	dptr,#0x2580
   0388 E4                 2388 	clr	a
   0389 F5 F0              2389 	mov	b,a
   038B 12s00r00           2390 	lcall	_uart1SetBaudRate
                    038E   2391 	C$mdrip.c$300$1$1 ==.
                    038E   2392 	XG$initUart1$0$0 ==.
   038E 22                 2393 	ret
                           2394 ;------------------------------------------------------------
                           2395 ;Allocation info for local variables in function 'getSrcValue'
                           2396 ;------------------------------------------------------------
                           2397 ;srcVal                    Allocated with name '_getSrcValue_srcVal_1_1'
                           2398 ;i                         Allocated with name '_getSrcValue_i_1_1'
                           2399 ;------------------------------------------------------------
                    038F   2400 	G$getSrcValue$0$0 ==.
                    038F   2401 	C$mdrip.c$302$1$1 ==.
                           2402 ;	apps/mdrip/mdrip.c:302: uint32 getSrcValue(XDATA char srcVal) {
                           2403 ;	-----------------------------------------
                           2404 ;	 function getSrcValue
                           2405 ;	-----------------------------------------
   038F                    2406 _getSrcValue:
   038F E5 82              2407 	mov	a,dpl
                    0391   2408 	C$mdrip.c$304$2$2 ==.
                           2409 ;	apps/mdrip/mdrip.c:304: for(i = 0; i < 32; i++) {
   0391 90s00r09           2410 	mov	dptr,#_getSrcValue_srcVal_1_1
   0394 F0                 2411 	movx	@dptr,a
   0395 FF                 2412 	mov	r7,a
   0396 7E 00              2413 	mov	r6,#0x00
   0398                    2414 00103$:
   0398 BE 20 00           2415 	cjne	r6,#0x20,00113$
   039B                    2416 00113$:
   039B 50 14              2417 	jnc	00106$
                    039D   2418 	C$mdrip.c$305$2$2 ==.
                           2419 ;	apps/mdrip/mdrip.c:305: if (SrcNameTable[i]==srcVal) break;
   039D EE                 2420 	mov	a,r6
   039E 24r4B              2421 	add	a,#_SrcNameTable
   03A0 F5 82              2422 	mov	dpl,a
   03A2 E4                 2423 	clr	a
   03A3 34s00              2424 	addc	a,#(_SrcNameTable >> 8)
   03A5 F5 83              2425 	mov	dph,a
   03A7 E0                 2426 	movx	a,@dptr
   03A8 FD                 2427 	mov	r5,a
   03A9 B5 07 02           2428 	cjne	a,ar7,00115$
   03AC 80 03              2429 	sjmp	00106$
   03AE                    2430 00115$:
                    03AE   2431 	C$mdrip.c$304$1$1 ==.
                           2432 ;	apps/mdrip/mdrip.c:304: for(i = 0; i < 32; i++) {
   03AE 0E                 2433 	inc	r6
   03AF 80 E7              2434 	sjmp	00103$
   03B1                    2435 00106$:
                    03B1   2436 	C$mdrip.c$307$1$1 ==.
                           2437 ;	apps/mdrip/mdrip.c:307: return i & 0xFF;
   03B1 7F 00              2438 	mov	r7,#0x00
   03B3 7D 00              2439 	mov	r5,#0x00
   03B5 7C 00              2440 	mov	r4,#0x00
   03B7 8E 82              2441 	mov	dpl,r6
   03B9 8F 83              2442 	mov	dph,r7
   03BB 8D F0              2443 	mov	b,r5
   03BD EC                 2444 	mov	a,r4
                    03BE   2445 	C$mdrip.c$308$1$1 ==.
                    03BE   2446 	XG$getSrcValue$0$0 ==.
   03BE 22                 2447 	ret
                           2448 ;------------------------------------------------------------
                           2449 ;Allocation info for local variables in function 'getFonaString'
                           2450 ;------------------------------------------------------------
                           2451 ;sloc0                     Allocated with name '_getFonaString_sloc0_1_0'
                           2452 ;uartCharacters            Allocated with name '_getFonaString_uartCharacters_1_1'
                           2453 ;i                         Allocated with name '_getFonaString_i_1_1'
                           2454 ;stop                      Allocated with name '_getFonaString_stop_1_1'
                           2455 ;now                       Allocated with name '_getFonaString_now_1_1'
                           2456 ;------------------------------------------------------------
                    03BF   2457 	G$getFonaString$0$0 ==.
                    03BF   2458 	C$mdrip.c$310$1$1 ==.
                           2459 ;	apps/mdrip/mdrip.c:310: XDATA char * getFonaString() {					// Read the uart input buffer once character at a time
                           2460 ;	-----------------------------------------
                           2461 ;	 function getFonaString
                           2462 ;	-----------------------------------------
   03BF                    2463 _getFonaString:
                    03BF   2464 	C$mdrip.c$318$1$1 ==.
                           2465 ;	apps/mdrip/mdrip.c:318: stop = (getMs() + (AT_TIMEOUT * 1000));
   03BF 12s00r00           2466 	lcall	_getMs
   03C2 85 82*00           2467 	mov	_getFonaString_sloc0_1_0,dpl
   03C5 85 83*01           2468 	mov	(_getFonaString_sloc0_1_0 + 1),dph
   03C8 85 F0*02           2469 	mov	(_getFonaString_sloc0_1_0 + 2),b
   03CB F5*03              2470 	mov	(_getFonaString_sloc0_1_0 + 3),a
   03CD 90s00r36           2471 	mov	dptr,#_AT_TIMEOUT
   03D0 E0                 2472 	movx	a,@dptr
   03D1 78r00              2473 	mov	r0,#__mulint_PARM_2
   03D3 F2                 2474 	movx	@r0,a
   03D4 08                 2475 	inc	r0
   03D5 E4                 2476 	clr	a
   03D6 F2                 2477 	movx	@r0,a
   03D7 90 03 E8           2478 	mov	dptr,#0x03E8
   03DA 12s00r00           2479 	lcall	__mulint
   03DD AA 82              2480 	mov	r2,dpl
   03DF E5 83              2481 	mov	a,dph
   03E1 FB                 2482 	mov	r3,a
   03E2 33                 2483 	rlc	a
   03E3 95 E0              2484 	subb	a,acc
   03E5 FE                 2485 	mov	r6,a
   03E6 FF                 2486 	mov	r7,a
   03E7 EA                 2487 	mov	a,r2
   03E8 25*00              2488 	add	a,_getFonaString_sloc0_1_0
   03EA FA                 2489 	mov	r2,a
   03EB EB                 2490 	mov	a,r3
   03EC 35*01              2491 	addc	a,(_getFonaString_sloc0_1_0 + 1)
   03EE FB                 2492 	mov	r3,a
   03EF EE                 2493 	mov	a,r6
   03F0 35*02              2494 	addc	a,(_getFonaString_sloc0_1_0 + 2)
   03F2 FE                 2495 	mov	r6,a
   03F3 EF                 2496 	mov	a,r7
   03F4 35*03              2497 	addc	a,(_getFonaString_sloc0_1_0 + 3)
   03F6 FF                 2498 	mov	r7,a
   03F7 90s00r5A           2499 	mov	dptr,#_getFonaString_stop_1_1
   03FA EA                 2500 	mov	a,r2
   03FB F0                 2501 	movx	@dptr,a
   03FC A3                 2502 	inc	dptr
   03FD EB                 2503 	mov	a,r3
   03FE F0                 2504 	movx	@dptr,a
   03FF A3                 2505 	inc	dptr
   0400 EE                 2506 	mov	a,r6
   0401 F0                 2507 	movx	@dptr,a
   0402 A3                 2508 	inc	dptr
   0403 EF                 2509 	mov	a,r7
   0404 F0                 2510 	movx	@dptr,a
                    0405   2511 	C$mdrip.c$319$1$1 ==.
                           2512 ;	apps/mdrip/mdrip.c:319: now  = getMs();
   0405 12s00r00           2513 	lcall	_getMs
   0408 AC 82              2514 	mov	r4,dpl
   040A AD 83              2515 	mov	r5,dph
   040C AE F0              2516 	mov	r6,b
   040E FF                 2517 	mov	r7,a
   040F 90s00r5E           2518 	mov	dptr,#_getFonaString_now_1_1
   0412 EC                 2519 	mov	a,r4
   0413 F0                 2520 	movx	@dptr,a
   0414 A3                 2521 	inc	dptr
   0415 ED                 2522 	mov	a,r5
   0416 F0                 2523 	movx	@dptr,a
   0417 A3                 2524 	inc	dptr
   0418 EE                 2525 	mov	a,r6
   0419 F0                 2526 	movx	@dptr,a
   041A A3                 2527 	inc	dptr
   041B EF                 2528 	mov	a,r7
   041C F0                 2529 	movx	@dptr,a
                    041D   2530 	C$mdrip.c$320$1$1 ==.
                           2531 ;	apps/mdrip/mdrip.c:320: while (uart1RxAvailable() == 0 && stop > now) {				// This && is still using up some DSEG but is cheaper than comparing stop to getMS()
   041D 90s00r5A           2532 	mov	dptr,#_getFonaString_stop_1_1
   0420 E0                 2533 	movx	a,@dptr
   0421 F5*00              2534 	mov	_getFonaString_sloc0_1_0,a
   0423 A3                 2535 	inc	dptr
   0424 E0                 2536 	movx	a,@dptr
   0425 F5*01              2537 	mov	(_getFonaString_sloc0_1_0 + 1),a
   0427 A3                 2538 	inc	dptr
   0428 E0                 2539 	movx	a,@dptr
   0429 F5*02              2540 	mov	(_getFonaString_sloc0_1_0 + 2),a
   042B A3                 2541 	inc	dptr
   042C E0                 2542 	movx	a,@dptr
   042D F5*03              2543 	mov	(_getFonaString_sloc0_1_0 + 3),a
   042F                    2544 00102$:
   042F 12s00r00           2545 	lcall	_uart1RxAvailable
   0432 E5 82              2546 	mov	a,dpl
   0434 70 45              2547 	jnz	00123$
   0436 90s00r5E           2548 	mov	dptr,#_getFonaString_now_1_1
   0439 E0                 2549 	movx	a,@dptr
   043A FA                 2550 	mov	r2,a
   043B A3                 2551 	inc	dptr
   043C E0                 2552 	movx	a,@dptr
   043D FB                 2553 	mov	r3,a
   043E A3                 2554 	inc	dptr
   043F E0                 2555 	movx	a,@dptr
   0440 FE                 2556 	mov	r6,a
   0441 A3                 2557 	inc	dptr
   0442 E0                 2558 	movx	a,@dptr
   0443 FF                 2559 	mov	r7,a
   0444 C3                 2560 	clr	c
   0445 EA                 2561 	mov	a,r2
   0446 95*00              2562 	subb	a,_getFonaString_sloc0_1_0
   0448 EB                 2563 	mov	a,r3
   0449 95*01              2564 	subb	a,(_getFonaString_sloc0_1_0 + 1)
   044B EE                 2565 	mov	a,r6
   044C 95*02              2566 	subb	a,(_getFonaString_sloc0_1_0 + 2)
   044E EF                 2567 	mov	a,r7
   044F 64 80              2568 	xrl	a,#0x80
   0451 85*03 F0           2569 	mov	b,(_getFonaString_sloc0_1_0 + 3)
   0454 63 F0 80           2570 	xrl	b,#0x80
   0457 95 F0              2571 	subb	a,b
   0459 50 20              2572 	jnc	00123$
                    045B   2573 	C$mdrip.c$321$2$2 ==.
                           2574 ;	apps/mdrip/mdrip.c:321: now  = getMs();
   045B 12s00r00           2575 	lcall	_getMs
   045E AC 82              2576 	mov	r4,dpl
   0460 AD 83              2577 	mov	r5,dph
   0462 AE F0              2578 	mov	r6,b
   0464 FF                 2579 	mov	r7,a
   0465 90s00r5E           2580 	mov	dptr,#_getFonaString_now_1_1
   0468 EC                 2581 	mov	a,r4
   0469 F0                 2582 	movx	@dptr,a
   046A A3                 2583 	inc	dptr
   046B ED                 2584 	mov	a,r5
   046C F0                 2585 	movx	@dptr,a
   046D A3                 2586 	inc	dptr
   046E EE                 2587 	mov	a,r6
   046F F0                 2588 	movx	@dptr,a
   0470 A3                 2589 	inc	dptr
   0471 EF                 2590 	mov	a,r7
   0472 F0                 2591 	movx	@dptr,a
                    0473   2592 	C$mdrip.c$322$2$2 ==.
                           2593 ;	apps/mdrip/mdrip.c:322: delayMs(10);
   0473 90 00 0A           2594 	mov	dptr,#0x000A
   0476 12s00r00           2595 	lcall	_delayMs
                    0479   2596 	C$mdrip.c$325$1$1 ==.
                           2597 ;	apps/mdrip/mdrip.c:325: while (uart1RxAvailable() && i < 80) {
   0479 80 B4              2598 	sjmp	00102$
   047B                    2599 00123$:
   047B 7F 00              2600 	mov	r7,#0x00
   047D                    2601 00111$:
   047D C0 07              2602 	push	ar7
   047F 12s00r00           2603 	lcall	_uart1RxAvailable
   0482 E5 82              2604 	mov	a,dpl
   0484 D0 07              2605 	pop	ar7
   0486 60 61              2606 	jz	00113$
   0488 C3                 2607 	clr	c
   0489 EF                 2608 	mov	a,r7
   048A 64 80              2609 	xrl	a,#0x80
   048C 94 D0              2610 	subb	a,#0xd0
   048E 50 59              2611 	jnc	00113$
                    0490   2612 	C$mdrip.c$326$2$3 ==.
                           2613 ;	apps/mdrip/mdrip.c:326: uartCharacters[i] = uart1RxReceiveByte();
   0490 EF                 2614 	mov	a,r7
   0491 24r0A              2615 	add	a,#_getFonaString_uartCharacters_1_1
   0493 FD                 2616 	mov	r5,a
   0494 E4                 2617 	clr	a
   0495 34s00              2618 	addc	a,#(_getFonaString_uartCharacters_1_1 >> 8)
   0497 FE                 2619 	mov	r6,a
   0498 C0 07              2620 	push	ar7
   049A C0 06              2621 	push	ar6
   049C C0 05              2622 	push	ar5
   049E 12s00r00           2623 	lcall	_uart1RxReceiveByte
   04A1 AC 82              2624 	mov	r4,dpl
   04A3 D0 05              2625 	pop	ar5
   04A5 D0 06              2626 	pop	ar6
   04A7 8D 82              2627 	mov	dpl,r5
   04A9 8E 83              2628 	mov	dph,r6
   04AB EC                 2629 	mov	a,r4
   04AC F0                 2630 	movx	@dptr,a
                    04AD   2631 	C$mdrip.c$328$2$3 ==.
                           2632 ;	apps/mdrip/mdrip.c:328: if (usbPowerPresent()) {
   04AD 12s00r00           2633 	lcall	_usbPowerPresent
   04B0 D0 07              2634 	pop	ar7
   04B2 50 28              2635 	jnc	00109$
                    04B4   2636 	C$mdrip.c$329$3$4 ==.
                           2637 ;	apps/mdrip/mdrip.c:329: while(usbComTxAvailable() == 0) {							//  Loop until space in the TX buffer to send a character
   04B4                    2638 00105$:
   04B4 C0 07              2639 	push	ar7
   04B6 12s00r00           2640 	lcall	_usbComTxAvailable
   04B9 E5 82              2641 	mov	a,dpl
   04BB D0 07              2642 	pop	ar7
   04BD 70 09              2643 	jnz	00107$
                    04BF   2644 	C$mdrip.c$331$4$5 ==.
                           2645 ;	apps/mdrip/mdrip.c:331: doServices();
   04BF C0 07              2646 	push	ar7
   04C1 12s03r73           2647 	lcall	_doServices
   04C4 D0 07              2648 	pop	ar7
   04C6 80 EC              2649 	sjmp	00105$
   04C8                    2650 00107$:
                    04C8   2651 	C$mdrip.c$333$3$4 ==.
                           2652 ;	apps/mdrip/mdrip.c:333: usbComTxSendByte(uartCharacters[i]);
   04C8 EF                 2653 	mov	a,r7
   04C9 24r0A              2654 	add	a,#_getFonaString_uartCharacters_1_1
   04CB F5 82              2655 	mov	dpl,a
   04CD E4                 2656 	clr	a
   04CE 34s00              2657 	addc	a,#(_getFonaString_uartCharacters_1_1 >> 8)
   04D0 F5 83              2658 	mov	dph,a
   04D2 E0                 2659 	movx	a,@dptr
   04D3 F5 82              2660 	mov	dpl,a
   04D5 C0 07              2661 	push	ar7
   04D7 12s00r00           2662 	lcall	_usbComTxSendByte
   04DA D0 07              2663 	pop	ar7
   04DC                    2664 00109$:
                    04DC   2665 	C$mdrip.c$335$2$3 ==.
                           2666 ;	apps/mdrip/mdrip.c:335: delayMs(10);
   04DC 90 00 0A           2667 	mov	dptr,#0x000A
   04DF C0 07              2668 	push	ar7
   04E1 12s00r00           2669 	lcall	_delayMs
   04E4 D0 07              2670 	pop	ar7
                    04E6   2671 	C$mdrip.c$336$2$3 ==.
                           2672 ;	apps/mdrip/mdrip.c:336: i++;
   04E6 0F                 2673 	inc	r7
   04E7 80 94              2674 	sjmp	00111$
   04E9                    2675 00113$:
                    04E9   2676 	C$mdrip.c$338$1$1 ==.
                           2677 ;	apps/mdrip/mdrip.c:338: uartCharacters[i] = 0;										// Add an end-of-string character after copying the input into the character array
   04E9 EF                 2678 	mov	a,r7
   04EA 24r0A              2679 	add	a,#_getFonaString_uartCharacters_1_1
   04EC F5 82              2680 	mov	dpl,a
   04EE E4                 2681 	clr	a
   04EF 34s00              2682 	addc	a,#(_getFonaString_uartCharacters_1_1 >> 8)
   04F1 F5 83              2683 	mov	dph,a
   04F3 E4                 2684 	clr	a
   04F4 F0                 2685 	movx	@dptr,a
                    04F5   2686 	C$mdrip.c$339$1$1 ==.
                           2687 ;	apps/mdrip/mdrip.c:339: return uartCharacters;
   04F5 90s00r0A           2688 	mov	dptr,#_getFonaString_uartCharacters_1_1
                    04F8   2689 	C$mdrip.c$340$1$1 ==.
                    04F8   2690 	XG$getFonaString$0$0 ==.
   04F8 22                 2691 	ret
                           2692 ;------------------------------------------------------------
                           2693 ;Allocation info for local variables in function 'sendAT'
                           2694 ;------------------------------------------------------------
                           2695 ;atString                  Allocated with name '_sendAT_atString_1_1'
                           2696 ;ATresponse                Allocated with name '_sendAT_ATresponse_1_1'
                           2697 ;------------------------------------------------------------
                    04F9   2698 	G$sendAT$0$0 ==.
                    04F9   2699 	C$mdrip.c$342$1$1 ==.
                           2700 ;	apps/mdrip/mdrip.c:342: void sendAT(XDATA char atString[40]) {
                           2701 ;	-----------------------------------------
                           2702 ;	 function sendAT
                           2703 ;	-----------------------------------------
   04F9                    2704 _sendAT:
   04F9 AF 83              2705 	mov	r7,dph
   04FB E5 82              2706 	mov	a,dpl
   04FD 90s00r62           2707 	mov	dptr,#_sendAT_atString_1_1
   0500 F0                 2708 	movx	@dptr,a
   0501 A3                 2709 	inc	dptr
   0502 EF                 2710 	mov	a,r7
   0503 F0                 2711 	movx	@dptr,a
                    0504   2712 	C$mdrip.c$343$1$1 ==.
                           2713 ;	apps/mdrip/mdrip.c:343: XDATA char ATresponse[80]={0};
   0504 90s00r64           2714 	mov	dptr,#_sendAT_ATresponse_1_1
   0507 E4                 2715 	clr	a
   0508 F0                 2716 	movx	@dptr,a
   0509 90s00r65           2717 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0001)
   050C F0                 2718 	movx	@dptr,a
   050D 90s00r66           2719 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0002)
   0510 F0                 2720 	movx	@dptr,a
   0511 90s00r67           2721 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0003)
   0514 F0                 2722 	movx	@dptr,a
   0515 90s00r68           2723 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0004)
   0518 E4                 2724 	clr	a
   0519 F0                 2725 	movx	@dptr,a
   051A 90s00r69           2726 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0005)
   051D F0                 2727 	movx	@dptr,a
   051E 90s00r6A           2728 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0006)
   0521 F0                 2729 	movx	@dptr,a
   0522 90s00r6B           2730 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0007)
   0525 F0                 2731 	movx	@dptr,a
   0526 90s00r6C           2732 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0008)
   0529 E4                 2733 	clr	a
   052A F0                 2734 	movx	@dptr,a
   052B 90s00r6D           2735 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0009)
   052E F0                 2736 	movx	@dptr,a
   052F 90s00r6E           2737 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x000a)
   0532 F0                 2738 	movx	@dptr,a
   0533 90s00r6F           2739 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x000b)
   0536 F0                 2740 	movx	@dptr,a
   0537 90s00r70           2741 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x000c)
   053A E4                 2742 	clr	a
   053B F0                 2743 	movx	@dptr,a
   053C 90s00r71           2744 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x000d)
   053F F0                 2745 	movx	@dptr,a
   0540 90s00r72           2746 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x000e)
   0543 F0                 2747 	movx	@dptr,a
   0544 90s00r73           2748 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x000f)
   0547 F0                 2749 	movx	@dptr,a
   0548 90s00r74           2750 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0010)
   054B E4                 2751 	clr	a
   054C F0                 2752 	movx	@dptr,a
   054D 90s00r75           2753 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0011)
   0550 F0                 2754 	movx	@dptr,a
   0551 90s00r76           2755 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0012)
   0554 F0                 2756 	movx	@dptr,a
   0555 90s00r77           2757 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0013)
   0558 F0                 2758 	movx	@dptr,a
   0559 90s00r78           2759 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0014)
   055C E4                 2760 	clr	a
   055D F0                 2761 	movx	@dptr,a
   055E 90s00r79           2762 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0015)
   0561 F0                 2763 	movx	@dptr,a
   0562 90s00r7A           2764 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0016)
   0565 F0                 2765 	movx	@dptr,a
   0566 90s00r7B           2766 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0017)
   0569 F0                 2767 	movx	@dptr,a
   056A 90s00r7C           2768 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0018)
   056D E4                 2769 	clr	a
   056E F0                 2770 	movx	@dptr,a
   056F 90s00r7D           2771 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0019)
   0572 F0                 2772 	movx	@dptr,a
   0573 90s00r7E           2773 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x001a)
   0576 F0                 2774 	movx	@dptr,a
   0577 90s00r7F           2775 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x001b)
   057A F0                 2776 	movx	@dptr,a
   057B 90s00r80           2777 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x001c)
   057E E4                 2778 	clr	a
   057F F0                 2779 	movx	@dptr,a
   0580 90s00r81           2780 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x001d)
   0583 F0                 2781 	movx	@dptr,a
   0584 90s00r82           2782 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x001e)
   0587 F0                 2783 	movx	@dptr,a
   0588 90s00r83           2784 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x001f)
   058B F0                 2785 	movx	@dptr,a
   058C 90s00r84           2786 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0020)
   058F E4                 2787 	clr	a
   0590 F0                 2788 	movx	@dptr,a
   0591 90s00r85           2789 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0021)
   0594 F0                 2790 	movx	@dptr,a
   0595 90s00r86           2791 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0022)
   0598 F0                 2792 	movx	@dptr,a
   0599 90s00r87           2793 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0023)
   059C F0                 2794 	movx	@dptr,a
   059D 90s00r88           2795 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0024)
   05A0 E4                 2796 	clr	a
   05A1 F0                 2797 	movx	@dptr,a
   05A2 90s00r89           2798 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0025)
   05A5 F0                 2799 	movx	@dptr,a
   05A6 90s00r8A           2800 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0026)
   05A9 F0                 2801 	movx	@dptr,a
   05AA 90s00r8B           2802 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0027)
   05AD F0                 2803 	movx	@dptr,a
   05AE 90s00r8C           2804 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0028)
   05B1 E4                 2805 	clr	a
   05B2 F0                 2806 	movx	@dptr,a
   05B3 90s00r8D           2807 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0029)
   05B6 F0                 2808 	movx	@dptr,a
   05B7 90s00r8E           2809 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x002a)
   05BA F0                 2810 	movx	@dptr,a
   05BB 90s00r8F           2811 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x002b)
   05BE F0                 2812 	movx	@dptr,a
   05BF 90s00r90           2813 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x002c)
   05C2 E4                 2814 	clr	a
   05C3 F0                 2815 	movx	@dptr,a
   05C4 90s00r91           2816 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x002d)
   05C7 F0                 2817 	movx	@dptr,a
   05C8 90s00r92           2818 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x002e)
   05CB F0                 2819 	movx	@dptr,a
   05CC 90s00r93           2820 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x002f)
   05CF F0                 2821 	movx	@dptr,a
   05D0 90s00r94           2822 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0030)
   05D3 E4                 2823 	clr	a
   05D4 F0                 2824 	movx	@dptr,a
   05D5 90s00r95           2825 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0031)
   05D8 F0                 2826 	movx	@dptr,a
   05D9 90s00r96           2827 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0032)
   05DC F0                 2828 	movx	@dptr,a
   05DD 90s00r97           2829 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0033)
   05E0 F0                 2830 	movx	@dptr,a
   05E1 90s00r98           2831 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0034)
   05E4 E4                 2832 	clr	a
   05E5 F0                 2833 	movx	@dptr,a
   05E6 90s00r99           2834 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0035)
   05E9 F0                 2835 	movx	@dptr,a
   05EA 90s00r9A           2836 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0036)
   05ED F0                 2837 	movx	@dptr,a
   05EE 90s00r9B           2838 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0037)
   05F1 F0                 2839 	movx	@dptr,a
   05F2 90s00r9C           2840 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0038)
   05F5 E4                 2841 	clr	a
   05F6 F0                 2842 	movx	@dptr,a
   05F7 90s00r9D           2843 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0039)
   05FA F0                 2844 	movx	@dptr,a
   05FB 90s00r9E           2845 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x003a)
   05FE F0                 2846 	movx	@dptr,a
   05FF 90s00r9F           2847 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x003b)
   0602 F0                 2848 	movx	@dptr,a
   0603 90s00rA0           2849 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x003c)
   0606 E4                 2850 	clr	a
   0607 F0                 2851 	movx	@dptr,a
   0608 90s00rA1           2852 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x003d)
   060B F0                 2853 	movx	@dptr,a
   060C 90s00rA2           2854 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x003e)
   060F F0                 2855 	movx	@dptr,a
   0610 90s00rA3           2856 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x003f)
   0613 F0                 2857 	movx	@dptr,a
   0614 90s00rA4           2858 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0040)
   0617 E4                 2859 	clr	a
   0618 F0                 2860 	movx	@dptr,a
   0619 90s00rA5           2861 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0041)
   061C F0                 2862 	movx	@dptr,a
   061D 90s00rA6           2863 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0042)
   0620 F0                 2864 	movx	@dptr,a
   0621 90s00rA7           2865 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0043)
   0624 F0                 2866 	movx	@dptr,a
   0625 90s00rA8           2867 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0044)
   0628 E4                 2868 	clr	a
   0629 F0                 2869 	movx	@dptr,a
   062A 90s00rA9           2870 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0045)
   062D F0                 2871 	movx	@dptr,a
   062E 90s00rAA           2872 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0046)
   0631 F0                 2873 	movx	@dptr,a
   0632 90s00rAB           2874 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0047)
   0635 F0                 2875 	movx	@dptr,a
   0636 90s00rAC           2876 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0048)
   0639 E4                 2877 	clr	a
   063A F0                 2878 	movx	@dptr,a
   063B 90s00rAD           2879 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x0049)
   063E F0                 2880 	movx	@dptr,a
   063F 90s00rAE           2881 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x004a)
   0642 F0                 2882 	movx	@dptr,a
   0643 90s00rAF           2883 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x004b)
   0646 F0                 2884 	movx	@dptr,a
   0647 90s00rB0           2885 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x004c)
   064A E4                 2886 	clr	a
   064B F0                 2887 	movx	@dptr,a
   064C 90s00rB1           2888 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x004d)
   064F F0                 2889 	movx	@dptr,a
   0650 90s00rB2           2890 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x004e)
   0653 F0                 2891 	movx	@dptr,a
   0654 90s00rB3           2892 	mov	dptr,#(_sendAT_ATresponse_1_1 + 0x004f)
   0657 F0                 2893 	movx	@dptr,a
                    0658   2894 	C$mdrip.c$344$1$1 ==.
                           2895 ;	apps/mdrip/mdrip.c:344: uartEnable();
   0658 12s00r2D           2896 	lcall	_uartEnable
                    065B   2897 	C$mdrip.c$345$1$1 ==.
                           2898 ;	apps/mdrip/mdrip.c:345: printf(atString);
   065B 90s00r62           2899 	mov	dptr,#_sendAT_atString_1_1
   065E E0                 2900 	movx	a,@dptr
   065F FE                 2901 	mov	r6,a
   0660 A3                 2902 	inc	dptr
   0661 E0                 2903 	movx	a,@dptr
   0662 FF                 2904 	mov	r7,a
   0663 7D 00              2905 	mov	r5,#0x00
   0665 C0 06              2906 	push	ar6
   0667 C0 07              2907 	push	ar7
   0669 C0 05              2908 	push	ar5
   066B 12s00r00           2909 	lcall	_printf
   066E 15 81              2910 	dec	sp
   0670 15 81              2911 	dec	sp
   0672 15 81              2912 	dec	sp
                    0674   2913 	C$mdrip.c$346$1$1 ==.
                           2914 ;	apps/mdrip/mdrip.c:346: delayMs(defaultATWait);
   0674 90s00r37           2915 	mov	dptr,#_defaultATWait
   0677 E0                 2916 	movx	a,@dptr
   0678 FC                 2917 	mov	r4,a
   0679 A3                 2918 	inc	dptr
   067A E0                 2919 	movx	a,@dptr
   067B FD                 2920 	mov	r5,a
   067C A3                 2921 	inc	dptr
   067D E0                 2922 	movx	a,@dptr
   067E A3                 2923 	inc	dptr
   067F E0                 2924 	movx	a,@dptr
   0680 8C 82              2925 	mov	dpl,r4
   0682 8D 83              2926 	mov	dph,r5
   0684 12s00r00           2927 	lcall	_delayMs
                    0687   2928 	C$mdrip.c$347$1$1 ==.
                           2929 ;	apps/mdrip/mdrip.c:347: strcpy(ATresponse, getFonaString());
   0687 12s03rBF           2930 	lcall	_getFonaString
   068A AE 82              2931 	mov	r6,dpl
   068C AF 83              2932 	mov	r7,dph
   068E 78r00              2933 	mov	r0,#_strcpy_PARM_2
   0690 EE                 2934 	mov	a,r6
   0691 F2                 2935 	movx	@r0,a
   0692 08                 2936 	inc	r0
   0693 EF                 2937 	mov	a,r7
   0694 F2                 2938 	movx	@r0,a
   0695 08                 2939 	inc	r0
   0696 E4                 2940 	clr	a
   0697 F2                 2941 	movx	@r0,a
   0698 90s00r64           2942 	mov	dptr,#_sendAT_ATresponse_1_1
   069B 75 F0 00           2943 	mov	b,#0x00
   069E 12s00r00           2944 	lcall	_strcpy
                    06A1   2945 	C$mdrip.c$348$1$1 ==.
                    06A1   2946 	XG$sendAT$0$0 ==.
   06A1 22                 2947 	ret
                           2948 ;------------------------------------------------------------
                           2949 ;Allocation info for local variables in function 'configFona'
                           2950 ;------------------------------------------------------------
                           2951 ;atString                  Allocated with name '_configFona_atString_1_1'
                           2952 ;------------------------------------------------------------
                    06A2   2953 	G$configFona$0$0 ==.
                    06A2   2954 	C$mdrip.c$350$1$1 ==.
                           2955 ;	apps/mdrip/mdrip.c:350: void configFona () {											// Set up lights and any other preferences here
                           2956 ;	-----------------------------------------
                           2957 ;	 function configFona
                           2958 ;	-----------------------------------------
   06A2                    2959 _configFona:
                    06A2   2960 	C$mdrip.c$351$1$1 ==.
                           2961 ;	apps/mdrip/mdrip.c:351: XDATA char atString[40]={0};
   06A2 90s00rB4           2962 	mov	dptr,#_configFona_atString_1_1
   06A5 E4                 2963 	clr	a
   06A6 F0                 2964 	movx	@dptr,a
   06A7 90s00rB5           2965 	mov	dptr,#(_configFona_atString_1_1 + 0x0001)
   06AA F0                 2966 	movx	@dptr,a
   06AB 90s00rB6           2967 	mov	dptr,#(_configFona_atString_1_1 + 0x0002)
   06AE F0                 2968 	movx	@dptr,a
   06AF 90s00rB7           2969 	mov	dptr,#(_configFona_atString_1_1 + 0x0003)
   06B2 F0                 2970 	movx	@dptr,a
   06B3 90s00rB8           2971 	mov	dptr,#(_configFona_atString_1_1 + 0x0004)
   06B6 E4                 2972 	clr	a
   06B7 F0                 2973 	movx	@dptr,a
   06B8 90s00rB9           2974 	mov	dptr,#(_configFona_atString_1_1 + 0x0005)
   06BB F0                 2975 	movx	@dptr,a
   06BC 90s00rBA           2976 	mov	dptr,#(_configFona_atString_1_1 + 0x0006)
   06BF F0                 2977 	movx	@dptr,a
   06C0 90s00rBB           2978 	mov	dptr,#(_configFona_atString_1_1 + 0x0007)
   06C3 F0                 2979 	movx	@dptr,a
   06C4 90s00rBC           2980 	mov	dptr,#(_configFona_atString_1_1 + 0x0008)
   06C7 E4                 2981 	clr	a
   06C8 F0                 2982 	movx	@dptr,a
   06C9 90s00rBD           2983 	mov	dptr,#(_configFona_atString_1_1 + 0x0009)
   06CC F0                 2984 	movx	@dptr,a
   06CD 90s00rBE           2985 	mov	dptr,#(_configFona_atString_1_1 + 0x000a)
   06D0 F0                 2986 	movx	@dptr,a
   06D1 90s00rBF           2987 	mov	dptr,#(_configFona_atString_1_1 + 0x000b)
   06D4 F0                 2988 	movx	@dptr,a
   06D5 90s00rC0           2989 	mov	dptr,#(_configFona_atString_1_1 + 0x000c)
   06D8 E4                 2990 	clr	a
   06D9 F0                 2991 	movx	@dptr,a
   06DA 90s00rC1           2992 	mov	dptr,#(_configFona_atString_1_1 + 0x000d)
   06DD F0                 2993 	movx	@dptr,a
   06DE 90s00rC2           2994 	mov	dptr,#(_configFona_atString_1_1 + 0x000e)
   06E1 F0                 2995 	movx	@dptr,a
   06E2 90s00rC3           2996 	mov	dptr,#(_configFona_atString_1_1 + 0x000f)
   06E5 F0                 2997 	movx	@dptr,a
   06E6 90s00rC4           2998 	mov	dptr,#(_configFona_atString_1_1 + 0x0010)
   06E9 E4                 2999 	clr	a
   06EA F0                 3000 	movx	@dptr,a
   06EB 90s00rC5           3001 	mov	dptr,#(_configFona_atString_1_1 + 0x0011)
   06EE F0                 3002 	movx	@dptr,a
   06EF 90s00rC6           3003 	mov	dptr,#(_configFona_atString_1_1 + 0x0012)
   06F2 F0                 3004 	movx	@dptr,a
   06F3 90s00rC7           3005 	mov	dptr,#(_configFona_atString_1_1 + 0x0013)
   06F6 F0                 3006 	movx	@dptr,a
   06F7 90s00rC8           3007 	mov	dptr,#(_configFona_atString_1_1 + 0x0014)
   06FA E4                 3008 	clr	a
   06FB F0                 3009 	movx	@dptr,a
   06FC 90s00rC9           3010 	mov	dptr,#(_configFona_atString_1_1 + 0x0015)
   06FF F0                 3011 	movx	@dptr,a
   0700 90s00rCA           3012 	mov	dptr,#(_configFona_atString_1_1 + 0x0016)
   0703 F0                 3013 	movx	@dptr,a
   0704 90s00rCB           3014 	mov	dptr,#(_configFona_atString_1_1 + 0x0017)
   0707 F0                 3015 	movx	@dptr,a
   0708 90s00rCC           3016 	mov	dptr,#(_configFona_atString_1_1 + 0x0018)
   070B E4                 3017 	clr	a
   070C F0                 3018 	movx	@dptr,a
   070D 90s00rCD           3019 	mov	dptr,#(_configFona_atString_1_1 + 0x0019)
   0710 F0                 3020 	movx	@dptr,a
   0711 90s00rCE           3021 	mov	dptr,#(_configFona_atString_1_1 + 0x001a)
   0714 F0                 3022 	movx	@dptr,a
   0715 90s00rCF           3023 	mov	dptr,#(_configFona_atString_1_1 + 0x001b)
   0718 F0                 3024 	movx	@dptr,a
   0719 90s00rD0           3025 	mov	dptr,#(_configFona_atString_1_1 + 0x001c)
   071C E4                 3026 	clr	a
   071D F0                 3027 	movx	@dptr,a
   071E 90s00rD1           3028 	mov	dptr,#(_configFona_atString_1_1 + 0x001d)
   0721 F0                 3029 	movx	@dptr,a
   0722 90s00rD2           3030 	mov	dptr,#(_configFona_atString_1_1 + 0x001e)
   0725 F0                 3031 	movx	@dptr,a
   0726 90s00rD3           3032 	mov	dptr,#(_configFona_atString_1_1 + 0x001f)
   0729 F0                 3033 	movx	@dptr,a
   072A 90s00rD4           3034 	mov	dptr,#(_configFona_atString_1_1 + 0x0020)
   072D E4                 3035 	clr	a
   072E F0                 3036 	movx	@dptr,a
   072F 90s00rD5           3037 	mov	dptr,#(_configFona_atString_1_1 + 0x0021)
   0732 F0                 3038 	movx	@dptr,a
   0733 90s00rD6           3039 	mov	dptr,#(_configFona_atString_1_1 + 0x0022)
   0736 F0                 3040 	movx	@dptr,a
   0737 90s00rD7           3041 	mov	dptr,#(_configFona_atString_1_1 + 0x0023)
   073A F0                 3042 	movx	@dptr,a
   073B 90s00rD8           3043 	mov	dptr,#(_configFona_atString_1_1 + 0x0024)
   073E E4                 3044 	clr	a
   073F F0                 3045 	movx	@dptr,a
   0740 90s00rD9           3046 	mov	dptr,#(_configFona_atString_1_1 + 0x0025)
   0743 F0                 3047 	movx	@dptr,a
   0744 90s00rDA           3048 	mov	dptr,#(_configFona_atString_1_1 + 0x0026)
   0747 F0                 3049 	movx	@dptr,a
   0748 90s00rDB           3050 	mov	dptr,#(_configFona_atString_1_1 + 0x0027)
   074B F0                 3051 	movx	@dptr,a
                    074C   3052 	C$mdrip.c$352$1$1 ==.
                           3053 ;	apps/mdrip/mdrip.c:352: uartEnable();												// Enable the serial connection
   074C 12s00r2D           3054 	lcall	_uartEnable
                    074F   3055 	C$mdrip.c$353$1$1 ==.
                           3056 ;	apps/mdrip/mdrip.c:353: strcpy(atString, "AT+CFUN=0\r\n"); sendAT(atString); // delayMs(4000);				// Sleep my little Fona		- Response should be "OK"
   074F 78r00              3057 	mov	r0,#_strcpy_PARM_2
   0751 74r10              3058 	mov	a,#__str_0
   0753 F2                 3059 	movx	@r0,a
   0754 08                 3060 	inc	r0
   0755 74s00              3061 	mov	a,#(__str_0 >> 8)
   0757 F2                 3062 	movx	@r0,a
   0758 08                 3063 	inc	r0
   0759 74 80              3064 	mov	a,#0x80
   075B F2                 3065 	movx	@r0,a
   075C 90s00rB4           3066 	mov	dptr,#_configFona_atString_1_1
   075F 75 F0 00           3067 	mov	b,#0x00
   0762 12s00r00           3068 	lcall	_strcpy
   0765 90s00rB4           3069 	mov	dptr,#_configFona_atString_1_1
   0768 12s04rF9           3070 	lcall	_sendAT
                    076B   3071 	C$mdrip.c$354$1$1 ==.
                           3072 ;	apps/mdrip/mdrip.c:354: strcpy(atString, "ATE0&W\r\n"); sendAT(atString); // delayMs(defaultATWait);					// Switch off echo of commands so that wixel can buffer responses properly
   076B 78r00              3073 	mov	r0,#_strcpy_PARM_2
   076D 74r1C              3074 	mov	a,#__str_1
   076F F2                 3075 	movx	@r0,a
   0770 08                 3076 	inc	r0
   0771 74s00              3077 	mov	a,#(__str_1 >> 8)
   0773 F2                 3078 	movx	@r0,a
   0774 08                 3079 	inc	r0
   0775 74 80              3080 	mov	a,#0x80
   0777 F2                 3081 	movx	@r0,a
   0778 90s00rB4           3082 	mov	dptr,#_configFona_atString_1_1
   077B 75 F0 00           3083 	mov	b,#0x00
   077E 12s00r00           3084 	lcall	_strcpy
   0781 90s00rB4           3085 	mov	dptr,#_configFona_atString_1_1
   0784 12s04rF9           3086 	lcall	_sendAT
                    0787   3087 	C$mdrip.c$355$1$1 ==.
                           3088 ;	apps/mdrip/mdrip.c:355: strcpy(atString, "AT+SLEDS=1,50,7500\r\n"); sendAT(atString); // delayMs(defaultATWait);	// Change timing of LED flashes for no connection - .05/7.5 secs: brief blink
   0787 78r00              3089 	mov	r0,#_strcpy_PARM_2
   0789 74r25              3090 	mov	a,#__str_2
   078B F2                 3091 	movx	@r0,a
   078C 08                 3092 	inc	r0
   078D 74s00              3093 	mov	a,#(__str_2 >> 8)
   078F F2                 3094 	movx	@r0,a
   0790 08                 3095 	inc	r0
   0791 74 80              3096 	mov	a,#0x80
   0793 F2                 3097 	movx	@r0,a
   0794 90s00rB4           3098 	mov	dptr,#_configFona_atString_1_1
   0797 75 F0 00           3099 	mov	b,#0x00
   079A 12s00r00           3100 	lcall	_strcpy
   079D 90s00rB4           3101 	mov	dptr,#_configFona_atString_1_1
   07A0 12s04rF9           3102 	lcall	_sendAT
                    07A3   3103 	C$mdrip.c$356$1$1 ==.
                           3104 ;	apps/mdrip/mdrip.c:356: strcpy(atString, "AT&W\r\n"); sendAT(atString); // delayMs(defaultATWait);					// Save changes
   07A3 78r00              3105 	mov	r0,#_strcpy_PARM_2
   07A5 74r3A              3106 	mov	a,#__str_3
   07A7 F2                 3107 	movx	@r0,a
   07A8 08                 3108 	inc	r0
   07A9 74s00              3109 	mov	a,#(__str_3 >> 8)
   07AB F2                 3110 	movx	@r0,a
   07AC 08                 3111 	inc	r0
   07AD 74 80              3112 	mov	a,#0x80
   07AF F2                 3113 	movx	@r0,a
   07B0 90s00rB4           3114 	mov	dptr,#_configFona_atString_1_1
   07B3 75 F0 00           3115 	mov	b,#0x00
   07B6 12s00r00           3116 	lcall	_strcpy
   07B9 90s00rB4           3117 	mov	dptr,#_configFona_atString_1_1
   07BC 12s04rF9           3118 	lcall	_sendAT
                    07BF   3119 	C$mdrip.c$357$1$1 ==.
                           3120 ;	apps/mdrip/mdrip.c:357: strcpy(atString, "AT+SLEDS=2,500,2500\r\n"); sendAT(atString); // delayMs(defaultATWait);	// Change timing of LED flashes for network connection - .5/2.5 secs: slow
   07BF 78r00              3121 	mov	r0,#_strcpy_PARM_2
   07C1 74r41              3122 	mov	a,#__str_4
   07C3 F2                 3123 	movx	@r0,a
   07C4 08                 3124 	inc	r0
   07C5 74s00              3125 	mov	a,#(__str_4 >> 8)
   07C7 F2                 3126 	movx	@r0,a
   07C8 08                 3127 	inc	r0
   07C9 74 80              3128 	mov	a,#0x80
   07CB F2                 3129 	movx	@r0,a
   07CC 90s00rB4           3130 	mov	dptr,#_configFona_atString_1_1
   07CF 75 F0 00           3131 	mov	b,#0x00
   07D2 12s00r00           3132 	lcall	_strcpy
   07D5 90s00rB4           3133 	mov	dptr,#_configFona_atString_1_1
   07D8 12s04rF9           3134 	lcall	_sendAT
                    07DB   3135 	C$mdrip.c$358$1$1 ==.
                           3136 ;	apps/mdrip/mdrip.c:358: strcpy(atString, "AT&W\r\n"); sendAT(atString); // delayMs(defaultATWait);					// Save changes
   07DB 78r00              3137 	mov	r0,#_strcpy_PARM_2
   07DD 74r3A              3138 	mov	a,#__str_3
   07DF F2                 3139 	movx	@r0,a
   07E0 08                 3140 	inc	r0
   07E1 74s00              3141 	mov	a,#(__str_3 >> 8)
   07E3 F2                 3142 	movx	@r0,a
   07E4 08                 3143 	inc	r0
   07E5 74 80              3144 	mov	a,#0x80
   07E7 F2                 3145 	movx	@r0,a
   07E8 90s00rB4           3146 	mov	dptr,#_configFona_atString_1_1
   07EB 75 F0 00           3147 	mov	b,#0x00
   07EE 12s00r00           3148 	lcall	_strcpy
   07F1 90s00rB4           3149 	mov	dptr,#_configFona_atString_1_1
   07F4 12s04rF9           3150 	lcall	_sendAT
                    07F7   3151 	C$mdrip.c$359$1$1 ==.
                           3152 ;	apps/mdrip/mdrip.c:359: strcpy(atString, "AT+SLEDS=3,50,50\r\n"); sendAT(atString); // delayMs(defaultATWait);		// Change timing of LED flashes for GPRS connection - very fast
   07F7 78r00              3153 	mov	r0,#_strcpy_PARM_2
   07F9 74r57              3154 	mov	a,#__str_5
   07FB F2                 3155 	movx	@r0,a
   07FC 08                 3156 	inc	r0
   07FD 74s00              3157 	mov	a,#(__str_5 >> 8)
   07FF F2                 3158 	movx	@r0,a
   0800 08                 3159 	inc	r0
   0801 74 80              3160 	mov	a,#0x80
   0803 F2                 3161 	movx	@r0,a
   0804 90s00rB4           3162 	mov	dptr,#_configFona_atString_1_1
   0807 75 F0 00           3163 	mov	b,#0x00
   080A 12s00r00           3164 	lcall	_strcpy
   080D 90s00rB4           3165 	mov	dptr,#_configFona_atString_1_1
   0810 12s04rF9           3166 	lcall	_sendAT
                    0813   3167 	C$mdrip.c$360$1$1 ==.
                           3168 ;	apps/mdrip/mdrip.c:360: strcpy(atString, "AT&W\r\n"); sendAT(atString); // delayMs(defaultATWait);					// Save changes
   0813 78r00              3169 	mov	r0,#_strcpy_PARM_2
   0815 74r3A              3170 	mov	a,#__str_3
   0817 F2                 3171 	movx	@r0,a
   0818 08                 3172 	inc	r0
   0819 74s00              3173 	mov	a,#(__str_3 >> 8)
   081B F2                 3174 	movx	@r0,a
   081C 08                 3175 	inc	r0
   081D 74 80              3176 	mov	a,#0x80
   081F F2                 3177 	movx	@r0,a
   0820 90s00rB4           3178 	mov	dptr,#_configFona_atString_1_1
   0823 75 F0 00           3179 	mov	b,#0x00
   0826 12s00r00           3180 	lcall	_strcpy
   0829 90s00rB4           3181 	mov	dptr,#_configFona_atString_1_1
   082C 12s04rF9           3182 	lcall	_sendAT
                    082F   3183 	C$mdrip.c$361$1$1 ==.
                    082F   3184 	XG$configFona$0$0 ==.
   082F 22                 3185 	ret
                           3186 ;------------------------------------------------------------
                           3187 ;Allocation info for local variables in function 'enableFona'
                           3188 ;------------------------------------------------------------
                           3189 ;atString                  Allocated with name '_enableFona_atString_1_1'
                           3190 ;------------------------------------------------------------
                    0830   3191 	G$enableFona$0$0 ==.
                    0830   3192 	C$mdrip.c$363$1$1 ==.
                           3193 ;	apps/mdrip/mdrip.c:363: BIT enableFona() {
                           3194 ;	-----------------------------------------
                           3195 ;	 function enableFona
                           3196 ;	-----------------------------------------
   0830                    3197 _enableFona:
                    0830   3198 	C$mdrip.c$367$1$1 ==.
                           3199 ;	apps/mdrip/mdrip.c:367: uartEnable();												// Enable the serial connection
   0830 12s00r2D           3200 	lcall	_uartEnable
                    0833   3201 	C$mdrip.c$368$1$1 ==.
                           3202 ;	apps/mdrip/mdrip.c:368: strcpy(atString, "AT\r\n"); sendAT(atString); // delayMs(defaultATWait);					// Ignore the first one as we just want to get the baudrate autosynched
   0833 78r00              3203 	mov	r0,#_strcpy_PARM_2
   0835 74r6A              3204 	mov	a,#__str_6
   0837 F2                 3205 	movx	@r0,a
   0838 08                 3206 	inc	r0
   0839 74s00              3207 	mov	a,#(__str_6 >> 8)
   083B F2                 3208 	movx	@r0,a
   083C 08                 3209 	inc	r0
   083D 74 80              3210 	mov	a,#0x80
   083F F2                 3211 	movx	@r0,a
   0840 90s00rDC           3212 	mov	dptr,#_enableFona_atString_1_1
   0843 75 F0 00           3213 	mov	b,#0x00
   0846 12s00r00           3214 	lcall	_strcpy
   0849 90s00rDC           3215 	mov	dptr,#_enableFona_atString_1_1
   084C 12s04rF9           3216 	lcall	_sendAT
                    084F   3217 	C$mdrip.c$369$1$1 ==.
                           3218 ;	apps/mdrip/mdrip.c:369: strcpy(atString, "AT+CFUN=1,1\r\n"); sendAT(atString); // delayMs(defaultATWait);			// Wake up Baby
   084F 78r00              3219 	mov	r0,#_strcpy_PARM_2
   0851 74r6F              3220 	mov	a,#__str_7
   0853 F2                 3221 	movx	@r0,a
   0854 08                 3222 	inc	r0
   0855 74s00              3223 	mov	a,#(__str_7 >> 8)
   0857 F2                 3224 	movx	@r0,a
   0858 08                 3225 	inc	r0
   0859 74 80              3226 	mov	a,#0x80
   085B F2                 3227 	movx	@r0,a
   085C 90s00rDC           3228 	mov	dptr,#_enableFona_atString_1_1
   085F 75 F0 00           3229 	mov	b,#0x00
   0862 12s00r00           3230 	lcall	_strcpy
   0865 90s00rDC           3231 	mov	dptr,#_enableFona_atString_1_1
   0868 12s04rF9           3232 	lcall	_sendAT
                    086B   3233 	C$mdrip.c$370$1$1 ==.
                           3234 ;	apps/mdrip/mdrip.c:370: delayMs(4000);												// Wait for Fona to reboot
   086B 90 0F A0           3235 	mov	dptr,#0x0FA0
   086E 12s00r00           3236 	lcall	_delayMs
                    0871   3237 	C$mdrip.c$371$1$1 ==.
                           3238 ;	apps/mdrip/mdrip.c:371: strcpy(atString, "AT\r\n"); sendAT(atString); // delayMs(defaultATWait);					// Ignore the first one as we just want to get the baudrate autosynched
   0871 78r00              3239 	mov	r0,#_strcpy_PARM_2
   0873 74r6A              3240 	mov	a,#__str_6
   0875 F2                 3241 	movx	@r0,a
   0876 08                 3242 	inc	r0
   0877 74s00              3243 	mov	a,#(__str_6 >> 8)
   0879 F2                 3244 	movx	@r0,a
   087A 08                 3245 	inc	r0
   087B 74 80              3246 	mov	a,#0x80
   087D F2                 3247 	movx	@r0,a
   087E 90s00rDC           3248 	mov	dptr,#_enableFona_atString_1_1
   0881 75 F0 00           3249 	mov	b,#0x00
   0884 12s00r00           3250 	lcall	_strcpy
   0887 90s00rDC           3251 	mov	dptr,#_enableFona_atString_1_1
   088A 12s04rF9           3252 	lcall	_sendAT
                    088D   3253 	C$mdrip.c$372$1$1 ==.
                           3254 ;	apps/mdrip/mdrip.c:372: return 1;													// I might take this out altogether if I'm not going to bother checking responses
   088D D3                 3255 	setb	c
                    088E   3256 	C$mdrip.c$373$1$1 ==.
                    088E   3257 	XG$enableFona$0$0 ==.
   088E 22                 3258 	ret
                           3259 ;------------------------------------------------------------
                           3260 ;Allocation info for local variables in function 'fonaDisable'
                           3261 ;------------------------------------------------------------
                           3262 ;atString                  Allocated with name '_fonaDisable_atString_1_1'
                           3263 ;------------------------------------------------------------
                    088F   3264 	G$fonaDisable$0$0 ==.
                    088F   3265 	C$mdrip.c$375$1$1 ==.
                           3266 ;	apps/mdrip/mdrip.c:375: void fonaDisable () {
                           3267 ;	-----------------------------------------
                           3268 ;	 function fonaDisable
                           3269 ;	-----------------------------------------
   088F                    3270 _fonaDisable:
                    088F   3271 	C$mdrip.c$378$1$1 ==.
                           3272 ;	apps/mdrip/mdrip.c:378: strcpy(atString, "AT+CIPCLOSE\r\n"); sendAT(atString); // delayMs(defaultATWait);			// Close the TCP connection	- Response should be CLOSE OK
   088F 78r00              3273 	mov	r0,#_strcpy_PARM_2
   0891 74r7D              3274 	mov	a,#__str_8
   0893 F2                 3275 	movx	@r0,a
   0894 08                 3276 	inc	r0
   0895 74s00              3277 	mov	a,#(__str_8 >> 8)
   0897 F2                 3278 	movx	@r0,a
   0898 08                 3279 	inc	r0
   0899 74 80              3280 	mov	a,#0x80
   089B F2                 3281 	movx	@r0,a
   089C 90s01r04           3282 	mov	dptr,#_fonaDisable_atString_1_1
   089F 75 F0 00           3283 	mov	b,#0x00
   08A2 12s00r00           3284 	lcall	_strcpy
   08A5 90s01r04           3285 	mov	dptr,#_fonaDisable_atString_1_1
   08A8 12s04rF9           3286 	lcall	_sendAT
                    08AB   3287 	C$mdrip.c$379$1$1 ==.
                           3288 ;	apps/mdrip/mdrip.c:379: strcpy(atString, "AT+CGATT=0\r\n"); sendAT(atString); // delayMs(defaultATWait);			// Check if connected to the GPRS network		- Response should be +CGATT: 1
   08AB 78r00              3289 	mov	r0,#_strcpy_PARM_2
   08AD 74r8B              3290 	mov	a,#__str_9
   08AF F2                 3291 	movx	@r0,a
   08B0 08                 3292 	inc	r0
   08B1 74s00              3293 	mov	a,#(__str_9 >> 8)
   08B3 F2                 3294 	movx	@r0,a
   08B4 08                 3295 	inc	r0
   08B5 74 80              3296 	mov	a,#0x80
   08B7 F2                 3297 	movx	@r0,a
   08B8 90s01r04           3298 	mov	dptr,#_fonaDisable_atString_1_1
   08BB 75 F0 00           3299 	mov	b,#0x00
   08BE 12s00r00           3300 	lcall	_strcpy
   08C1 90s01r04           3301 	mov	dptr,#_fonaDisable_atString_1_1
   08C4 12s04rF9           3302 	lcall	_sendAT
                    08C7   3303 	C$mdrip.c$380$1$1 ==.
                           3304 ;	apps/mdrip/mdrip.c:380: strcpy(atString, "AT+CIPSHUT\r\n"); sendAT(atString); // delayMs(defaultATWait);			// Shut down GPRS			- Response should be SHUT OK
   08C7 78r00              3305 	mov	r0,#_strcpy_PARM_2
   08C9 74r98              3306 	mov	a,#__str_10
   08CB F2                 3307 	movx	@r0,a
   08CC 08                 3308 	inc	r0
   08CD 74s00              3309 	mov	a,#(__str_10 >> 8)
   08CF F2                 3310 	movx	@r0,a
   08D0 08                 3311 	inc	r0
   08D1 74 80              3312 	mov	a,#0x80
   08D3 F2                 3313 	movx	@r0,a
   08D4 90s01r04           3314 	mov	dptr,#_fonaDisable_atString_1_1
   08D7 75 F0 00           3315 	mov	b,#0x00
   08DA 12s00r00           3316 	lcall	_strcpy
   08DD 90s01r04           3317 	mov	dptr,#_fonaDisable_atString_1_1
   08E0 12s04rF9           3318 	lcall	_sendAT
                    08E3   3319 	C$mdrip.c$381$1$1 ==.
                           3320 ;	apps/mdrip/mdrip.c:381: strcpy(atString, "AT+CFUN=0\r\n"); sendAT(atString); // delayMs(defaultATWait);			// Sleep my little Fona		- Response should be "OK"
   08E3 78r00              3321 	mov	r0,#_strcpy_PARM_2
   08E5 74r10              3322 	mov	a,#__str_0
   08E7 F2                 3323 	movx	@r0,a
   08E8 08                 3324 	inc	r0
   08E9 74s00              3325 	mov	a,#(__str_0 >> 8)
   08EB F2                 3326 	movx	@r0,a
   08EC 08                 3327 	inc	r0
   08ED 74 80              3328 	mov	a,#0x80
   08EF F2                 3329 	movx	@r0,a
   08F0 90s01r04           3330 	mov	dptr,#_fonaDisable_atString_1_1
   08F3 75 F0 00           3331 	mov	b,#0x00
   08F6 12s00r00           3332 	lcall	_strcpy
   08F9 90s01r04           3333 	mov	dptr,#_fonaDisable_atString_1_1
   08FC 12s04rF9           3334 	lcall	_sendAT
                    08FF   3335 	C$mdrip.c$384$1$1 ==.
                    08FF   3336 	XG$fonaDisable$0$0 ==.
   08FF 22                 3337 	ret
                           3338 ;------------------------------------------------------------
                           3339 ;Allocation info for local variables in function 'fonaConnect'
                           3340 ;------------------------------------------------------------
                           3341 ;atString                  Allocated with name '_fonaConnect_atString_1_1'
                           3342 ;------------------------------------------------------------
                    0900   3343 	G$fonaConnect$0$0 ==.
                    0900   3344 	C$mdrip.c$386$1$1 ==.
                           3345 ;	apps/mdrip/mdrip.c:386: void fonaConnect() {
                           3346 ;	-----------------------------------------
                           3347 ;	 function fonaConnect
                           3348 ;	-----------------------------------------
   0900                    3349 _fonaConnect:
                    0900   3350 	C$mdrip.c$389$1$1 ==.
                           3351 ;	apps/mdrip/mdrip.c:389: strcpy(atString, "AT+CSTT=");
   0900 78r00              3352 	mov	r0,#_strcpy_PARM_2
   0902 74rA5              3353 	mov	a,#__str_11
   0904 F2                 3354 	movx	@r0,a
   0905 08                 3355 	inc	r0
   0906 74s00              3356 	mov	a,#(__str_11 >> 8)
   0908 F2                 3357 	movx	@r0,a
   0909 08                 3358 	inc	r0
   090A 74 80              3359 	mov	a,#0x80
   090C F2                 3360 	movx	@r0,a
   090D 90s01r2C           3361 	mov	dptr,#_fonaConnect_atString_1_1
   0910 75 F0 00           3362 	mov	b,#0x00
   0913 12s00r00           3363 	lcall	_strcpy
                    0916   3364 	C$mdrip.c$390$1$1 ==.
                           3365 ;	apps/mdrip/mdrip.c:390: strcat(atString, apnString);
   0916 78r00              3366 	mov	r0,#_strcat_PARM_2
   0918 74r00              3367 	mov	a,#_apnString
   091A F2                 3368 	movx	@r0,a
   091B 08                 3369 	inc	r0
   091C 74s00              3370 	mov	a,#(_apnString >> 8)
   091E F2                 3371 	movx	@r0,a
   091F 08                 3372 	inc	r0
   0920 74 80              3373 	mov	a,#0x80
   0922 F2                 3374 	movx	@r0,a
   0923 90s01r2C           3375 	mov	dptr,#_fonaConnect_atString_1_1
   0926 75 F0 00           3376 	mov	b,#0x00
   0929 12s00r00           3377 	lcall	_strcat
                    092C   3378 	C$mdrip.c$391$1$1 ==.
                           3379 ;	apps/mdrip/mdrip.c:391: strcat(atString, "\r\n");
   092C 78r00              3380 	mov	r0,#_strcat_PARM_2
   092E 74rAE              3381 	mov	a,#__str_12
   0930 F2                 3382 	movx	@r0,a
   0931 08                 3383 	inc	r0
   0932 74s00              3384 	mov	a,#(__str_12 >> 8)
   0934 F2                 3385 	movx	@r0,a
   0935 08                 3386 	inc	r0
   0936 74 80              3387 	mov	a,#0x80
   0938 F2                 3388 	movx	@r0,a
   0939 90s01r2C           3389 	mov	dptr,#_fonaConnect_atString_1_1
   093C 75 F0 00           3390 	mov	b,#0x00
   093F 12s00r00           3391 	lcall	_strcat
                    0942   3392 	C$mdrip.c$392$1$1 ==.
                           3393 ;	apps/mdrip/mdrip.c:392: sendAT(atString);
   0942 90s01r2C           3394 	mov	dptr,#_fonaConnect_atString_1_1
   0945 12s04rF9           3395 	lcall	_sendAT
                    0948   3396 	C$mdrip.c$393$1$1 ==.
                           3397 ;	apps/mdrip/mdrip.c:393: strcpy(atString, "AT+CGATT?\r\n"); sendAT(atString); // delayMs(defaultATWait);			// Check if connected to the GPRS network		- Response should be +CGATT: 1
   0948 78r00              3398 	mov	r0,#_strcpy_PARM_2
   094A 74rB1              3399 	mov	a,#__str_13
   094C F2                 3400 	movx	@r0,a
   094D 08                 3401 	inc	r0
   094E 74s00              3402 	mov	a,#(__str_13 >> 8)
   0950 F2                 3403 	movx	@r0,a
   0951 08                 3404 	inc	r0
   0952 74 80              3405 	mov	a,#0x80
   0954 F2                 3406 	movx	@r0,a
   0955 90s01r2C           3407 	mov	dptr,#_fonaConnect_atString_1_1
   0958 75 F0 00           3408 	mov	b,#0x00
   095B 12s00r00           3409 	lcall	_strcpy
   095E 90s01r2C           3410 	mov	dptr,#_fonaConnect_atString_1_1
   0961 12s04rF9           3411 	lcall	_sendAT
                    0964   3412 	C$mdrip.c$394$1$1 ==.
                           3413 ;	apps/mdrip/mdrip.c:394: strcpy(atString, "AT+CIICR\r\n"); sendAT(atString); // delayMs(defaultATWait);				// Bring up wireless connection with GPRS		- Response should be "OK"
   0964 78r00              3414 	mov	r0,#_strcpy_PARM_2
   0966 74rBD              3415 	mov	a,#__str_14
   0968 F2                 3416 	movx	@r0,a
   0969 08                 3417 	inc	r0
   096A 74s00              3418 	mov	a,#(__str_14 >> 8)
   096C F2                 3419 	movx	@r0,a
   096D 08                 3420 	inc	r0
   096E 74 80              3421 	mov	a,#0x80
   0970 F2                 3422 	movx	@r0,a
   0971 90s01r2C           3423 	mov	dptr,#_fonaConnect_atString_1_1
   0974 75 F0 00           3424 	mov	b,#0x00
   0977 12s00r00           3425 	lcall	_strcpy
   097A 90s01r2C           3426 	mov	dptr,#_fonaConnect_atString_1_1
   097D 12s04rF9           3427 	lcall	_sendAT
                    0980   3428 	C$mdrip.c$395$1$1 ==.
                           3429 ;	apps/mdrip/mdrip.c:395: strcpy(atString, "AT+CIFSR\r\n"); sendAT(atString); // delayMs(defaultATWait);				// Get local IP address (not sure why)          - Response should be IP
   0980 78r00              3430 	mov	r0,#_strcpy_PARM_2
   0982 74rC8              3431 	mov	a,#__str_15
   0984 F2                 3432 	movx	@r0,a
   0985 08                 3433 	inc	r0
   0986 74s00              3434 	mov	a,#(__str_15 >> 8)
   0988 F2                 3435 	movx	@r0,a
   0989 08                 3436 	inc	r0
   098A 74 80              3437 	mov	a,#0x80
   098C F2                 3438 	movx	@r0,a
   098D 90s01r2C           3439 	mov	dptr,#_fonaConnect_atString_1_1
   0990 75 F0 00           3440 	mov	b,#0x00
   0993 12s00r00           3441 	lcall	_strcpy
   0996 90s01r2C           3442 	mov	dptr,#_fonaConnect_atString_1_1
   0999 12s04rF9           3443 	lcall	_sendAT
                    099C   3444 	C$mdrip.c$396$1$1 ==.
                           3445 ;	apps/mdrip/mdrip.c:396: strcpy(atString, "AT+CIPSTART=tcp,");
   099C 78r00              3446 	mov	r0,#_strcpy_PARM_2
   099E 74rD3              3447 	mov	a,#__str_16
   09A0 F2                 3448 	movx	@r0,a
   09A1 08                 3449 	inc	r0
   09A2 74s00              3450 	mov	a,#(__str_16 >> 8)
   09A4 F2                 3451 	movx	@r0,a
   09A5 08                 3452 	inc	r0
   09A6 74 80              3453 	mov	a,#0x80
   09A8 F2                 3454 	movx	@r0,a
   09A9 90s01r2C           3455 	mov	dptr,#_fonaConnect_atString_1_1
   09AC 75 F0 00           3456 	mov	b,#0x00
   09AF 12s00r00           3457 	lcall	_strcpy
                    09B2   3458 	C$mdrip.c$397$1$1 ==.
                           3459 ;	apps/mdrip/mdrip.c:397: strcat(atString, dexie_host_address);
   09B2 78r00              3460 	mov	r0,#_strcat_PARM_2
   09B4 74r06              3461 	mov	a,#_dexie_host_address
   09B6 F2                 3462 	movx	@r0,a
   09B7 08                 3463 	inc	r0
   09B8 74s00              3464 	mov	a,#(_dexie_host_address >> 8)
   09BA F2                 3465 	movx	@r0,a
   09BB 08                 3466 	inc	r0
   09BC E4                 3467 	clr	a
   09BD F2                 3468 	movx	@r0,a
   09BE 90s01r2C           3469 	mov	dptr,#_fonaConnect_atString_1_1
   09C1 75 F0 00           3470 	mov	b,#0x00
   09C4 12s00r00           3471 	lcall	_strcat
                    09C7   3472 	C$mdrip.c$398$1$1 ==.
                           3473 ;	apps/mdrip/mdrip.c:398: strcat(atString, "\r\n");
   09C7 78r00              3474 	mov	r0,#_strcat_PARM_2
   09C9 74rAE              3475 	mov	a,#__str_12
   09CB F2                 3476 	movx	@r0,a
   09CC 08                 3477 	inc	r0
   09CD 74s00              3478 	mov	a,#(__str_12 >> 8)
   09CF F2                 3479 	movx	@r0,a
   09D0 08                 3480 	inc	r0
   09D1 74 80              3481 	mov	a,#0x80
   09D3 F2                 3482 	movx	@r0,a
   09D4 90s01r2C           3483 	mov	dptr,#_fonaConnect_atString_1_1
   09D7 75 F0 00           3484 	mov	b,#0x00
   09DA 12s00r00           3485 	lcall	_strcat
                    09DD   3486 	C$mdrip.c$399$1$1 ==.
                           3487 ;	apps/mdrip/mdrip.c:399: sendAT(atString);
   09DD 90s01r2C           3488 	mov	dptr,#_fonaConnect_atString_1_1
   09E0 12s04rF9           3489 	lcall	_sendAT
                    09E3   3490 	C$mdrip.c$400$1$1 ==.
                           3491 ;	apps/mdrip/mdrip.c:400: printf("AT+CIPSEND\r\n");									// Just send this once as a second one confuses Dexie
   09E3 74rE4              3492 	mov	a,#__str_17
   09E5 C0 E0              3493 	push	acc
   09E7 74s00              3494 	mov	a,#(__str_17 >> 8)
   09E9 C0 E0              3495 	push	acc
   09EB 74 80              3496 	mov	a,#0x80
   09ED C0 E0              3497 	push	acc
   09EF 12s00r00           3498 	lcall	_printf
   09F2 15 81              3499 	dec	sp
   09F4 15 81              3500 	dec	sp
   09F6 15 81              3501 	dec	sp
                    09F8   3502 	C$mdrip.c$401$1$1 ==.
                           3503 ;	apps/mdrip/mdrip.c:401: delayMs(defaultATWait);
   09F8 90s00r37           3504 	mov	dptr,#_defaultATWait
   09FB E0                 3505 	movx	a,@dptr
   09FC FC                 3506 	mov	r4,a
   09FD A3                 3507 	inc	dptr
   09FE E0                 3508 	movx	a,@dptr
   09FF FD                 3509 	mov	r5,a
   0A00 A3                 3510 	inc	dptr
   0A01 E0                 3511 	movx	a,@dptr
   0A02 A3                 3512 	inc	dptr
   0A03 E0                 3513 	movx	a,@dptr
   0A04 8C 82              3514 	mov	dpl,r4
   0A06 8D 83              3515 	mov	dph,r5
   0A08 12s00r00           3516 	lcall	_delayMs
                    0A0B   3517 	C$mdrip.c$402$1$1 ==.
                           3518 ;	apps/mdrip/mdrip.c:402: delayMs(defaultATWait);								        // another delay to be sure server is listening
   0A0B 90s00r37           3519 	mov	dptr,#_defaultATWait
   0A0E E0                 3520 	movx	a,@dptr
   0A0F FC                 3521 	mov	r4,a
   0A10 A3                 3522 	inc	dptr
   0A11 E0                 3523 	movx	a,@dptr
   0A12 FD                 3524 	mov	r5,a
   0A13 A3                 3525 	inc	dptr
   0A14 E0                 3526 	movx	a,@dptr
   0A15 A3                 3527 	inc	dptr
   0A16 E0                 3528 	movx	a,@dptr
   0A17 8C 82              3529 	mov	dpl,r4
   0A19 8D 83              3530 	mov	dph,r5
   0A1B 12s00r00           3531 	lcall	_delayMs
                    0A1E   3532 	C$mdrip.c$405$1$1 ==.
                    0A1E   3533 	XG$fonaConnect$0$0 ==.
   0A1E 22                 3534 	ret
                           3535 ;------------------------------------------------------------
                           3536 ;Allocation info for local variables in function 'getFonaMillivolts'
                           3537 ;------------------------------------------------------------
                           3538 ;sloc0                     Allocated with name '_getFonaMillivolts_sloc0_1_0'
                           3539 ;i                         Allocated with name '_getFonaMillivolts_i_1_1'
                           3540 ;counter                   Allocated with name '_getFonaMillivolts_counter_1_1'
                           3541 ;loop                      Allocated with name '_getFonaMillivolts_loop_1_1'
                           3542 ;rxCount                   Allocated with name '_getFonaMillivolts_rxCount_1_1'
                           3543 ;intMV                     Allocated with name '_getFonaMillivolts_intMV_1_1'
                           3544 ;c                         Allocated with name '_getFonaMillivolts_c_1_1'
                           3545 ;atString                  Allocated with name '_getFonaMillivolts_atString_1_1'
                           3546 ;------------------------------------------------------------
                    0A1F   3547 	G$getFonaMillivolts$0$0 ==.
                    0A1F   3548 	C$mdrip.c$408$1$1 ==.
                           3549 ;	apps/mdrip/mdrip.c:408: XDATA int16 getFonaMillivolts() {										// Get battery strength using Fona AT command - no extra resistors required!
                           3550 ;	-----------------------------------------
                           3551 ;	 function getFonaMillivolts
                           3552 ;	-----------------------------------------
   0A1F                    3553 _getFonaMillivolts:
                    0A1F   3554 	C$mdrip.c$414$1$1 ==.
                           3555 ;	apps/mdrip/mdrip.c:414: XDATA char c[80] = {0};
   0A1F 90s01r58           3556 	mov	dptr,#_getFonaMillivolts_c_1_1
   0A22 E4                 3557 	clr	a
   0A23 F0                 3558 	movx	@dptr,a
   0A24 90s01r59           3559 	mov	dptr,#(_getFonaMillivolts_c_1_1 + 0x0001)
   0A27 F0                 3560 	movx	@dptr,a
   0A28 90s01r5A           3561 	mov	dptr,#(_getFonaMillivolts_c_1_1 + 0x0002)
   0A2B F0                 3562 	movx	@dptr,a
   0A2C 90s01r5B           3563 	mov	dptr,#(_getFonaMillivolts_c_1_1 + 0x0003)
   0A2F F0                 3564 	movx	@dptr,a
   0A30 90s01r5C           3565 	mov	dptr,#(_getFonaMillivolts_c_1_1 + 0x0004)
   0A33 E4                 3566 	clr	a
   0A34 F0                 3567 	movx	@dptr,a
   0A35 90s01r5D           3568 	mov	dptr,#(_getFonaMillivolts_c_1_1 + 0x0005)
   0A38 F0                 3569 	movx	@dptr,a
   0A39 90s01r5E           3570 	mov	dptr,#(_getFonaMillivolts_c_1_1 + 0x0006)
   0A3C F0                 3571 	movx	@dptr,a
   0A3D 90s01r5F           3572 	mov	dptr,#(_getFonaMillivolts_c_1_1 + 0x0007)
   0A40 F0                 3573 	movx	@dptr,a
   0A41 90s01r60           3574 	mov	dptr,#(_getFonaMillivolts_c_1_1 + 0x0008)
   0A44 E4                 3575 	clr	a
   0A45 F0                 3576 	movx	@dptr,a
   0A46 90s01r61           3577 	mov	dptr,#(_getFonaMillivolts_c_1_1 + 0x0009)
   0A49 F0                 3578 	movx	@dptr,a
   0A4A 90s01r62           3579 	mov	dptr,#(_getFonaMillivolts_c_1_1 + 0x000a)
   0A4D F0                 3580 	movx	@dptr,a
   0A4E 90s01r63           3581 	mov	dptr,#(_getFonaMillivolts_c_1_1 + 0x000b)
   0A51 F0                 3582 	movx	@dptr,a
   0A52 90s01r64           3583 	mov	dptr,#(_getFonaMillivolts_c_1_1 + 0x000c)
   0A55 E4                 3584 	clr	a
   0A56 F0                 3585 	movx	@dptr,a
   0A57 90s01r65           3586 	mov	dptr,#(_getFonaMillivolts_c_1_1 + 0x000d)
   0A5A F0                 3587 	movx	@dptr,a
   0A5B 90s01r66           3588 	mov	dptr,#(_getFonaMillivolts_c_1_1 + 0x000e)
   0A5E F0                 3589 	movx	@dptr,a
   0A5F 90s01r67           3590 	mov	dptr,#(_getFonaMillivolts_c_1_1 + 0x000f)
   0A62 F0                 3591 	movx	@dptr,a
   0A63 90s01r68           3592 	mov	dptr,#(_getFonaMillivolts_c_1_1 + 0x0010)
   0A66 E4                 3593 	clr	a
   0A67 F0                 3594 	movx	@dptr,a
   0A68 90s01r69           3595 	mov	dptr,#(_getFonaMillivolts_c_1_1 + 0x0011)
   0A6B F0                 3596 	movx	@dptr,a
   0A6C 90s01r6A           3597 	mov	dptr,#(_getFonaMillivolts_c_1_1 + 0x0012)
   0A6F F0                 3598 	movx	@dptr,a
   0A70 90s01r6B           3599 	mov	dptr,#(_getFonaMillivolts_c_1_1 + 0x0013)
   0A73 F0                 3600 	movx	@dptr,a
   0A74 90s01r6C           3601 	mov	dptr,#(_getFonaMillivolts_c_1_1 + 0x0014)
   0A77 E4                 3602 	clr	a
   0A78 F0                 3603 	movx	@dptr,a
   0A79 90s01r6D           3604 	mov	dptr,#(_getFonaMillivolts_c_1_1 + 0x0015)
   0A7C F0                 3605 	movx	@dptr,a
   0A7D 90s01r6E           3606 	mov	dptr,#(_getFonaMillivolts_c_1_1 + 0x0016)
   0A80 F0                 3607 	movx	@dptr,a
   0A81 90s01r6F           3608 	mov	dptr,#(_getFonaMillivolts_c_1_1 + 0x0017)
   0A84 F0                 3609 	movx	@dptr,a
   0A85 90s01r70           3610 	mov	dptr,#(_getFonaMillivolts_c_1_1 + 0x0018)
   0A88 E4                 3611 	clr	a
   0A89 F0                 3612 	movx	@dptr,a
   0A8A 90s01r71           3613 	mov	dptr,#(_getFonaMillivolts_c_1_1 + 0x0019)
   0A8D F0                 3614 	movx	@dptr,a
   0A8E 90s01r72           3615 	mov	dptr,#(_getFonaMillivolts_c_1_1 + 0x001a)
   0A91 F0                 3616 	movx	@dptr,a
   0A92 90s01r73           3617 	mov	dptr,#(_getFonaMillivolts_c_1_1 + 0x001b)
   0A95 F0                 3618 	movx	@dptr,a
   0A96 90s01r74           3619 	mov	dptr,#(_getFonaMillivolts_c_1_1 + 0x001c)
   0A99 E4                 3620 	clr	a
   0A9A F0                 3621 	movx	@dptr,a
   0A9B 90s01r75           3622 	mov	dptr,#(_getFonaMillivolts_c_1_1 + 0x001d)
   0A9E F0                 3623 	movx	@dptr,a
   0A9F 90s01r76           3624 	mov	dptr,#(_getFonaMillivolts_c_1_1 + 0x001e)
   0AA2 F0                 3625 	movx	@dptr,a
   0AA3 90s01r77           3626 	mov	dptr,#(_getFonaMillivolts_c_1_1 + 0x001f)
   0AA6 F0                 3627 	movx	@dptr,a
   0AA7 90s01r78           3628 	mov	dptr,#(_getFonaMillivolts_c_1_1 + 0x0020)
   0AAA E4                 3629 	clr	a
   0AAB F0                 3630 	movx	@dptr,a
   0AAC 90s01r79           3631 	mov	dptr,#(_getFonaMillivolts_c_1_1 + 0x0021)
   0AAF F0                 3632 	movx	@dptr,a
   0AB0 90s01r7A           3633 	mov	dptr,#(_getFonaMillivolts_c_1_1 + 0x0022)
   0AB3 F0                 3634 	movx	@dptr,a
   0AB4 90s01r7B           3635 	mov	dptr,#(_getFonaMillivolts_c_1_1 + 0x0023)
   0AB7 F0                 3636 	movx	@dptr,a
   0AB8 90s01r7C           3637 	mov	dptr,#(_getFonaMillivolts_c_1_1 + 0x0024)
   0ABB E4                 3638 	clr	a
   0ABC F0                 3639 	movx	@dptr,a
   0ABD 90s01r7D           3640 	mov	dptr,#(_getFonaMillivolts_c_1_1 + 0x0025)
   0AC0 F0                 3641 	movx	@dptr,a
   0AC1 90s01r7E           3642 	mov	dptr,#(_getFonaMillivolts_c_1_1 + 0x0026)
   0AC4 F0                 3643 	movx	@dptr,a
   0AC5 90s01r7F           3644 	mov	dptr,#(_getFonaMillivolts_c_1_1 + 0x0027)
   0AC8 F0                 3645 	movx	@dptr,a
   0AC9 90s01r80           3646 	mov	dptr,#(_getFonaMillivolts_c_1_1 + 0x0028)
   0ACC E4                 3647 	clr	a
   0ACD F0                 3648 	movx	@dptr,a
   0ACE 90s01r81           3649 	mov	dptr,#(_getFonaMillivolts_c_1_1 + 0x0029)
   0AD1 F0                 3650 	movx	@dptr,a
   0AD2 90s01r82           3651 	mov	dptr,#(_getFonaMillivolts_c_1_1 + 0x002a)
   0AD5 F0                 3652 	movx	@dptr,a
   0AD6 90s01r83           3653 	mov	dptr,#(_getFonaMillivolts_c_1_1 + 0x002b)
   0AD9 F0                 3654 	movx	@dptr,a
   0ADA 90s01r84           3655 	mov	dptr,#(_getFonaMillivolts_c_1_1 + 0x002c)
   0ADD E4                 3656 	clr	a
   0ADE F0                 3657 	movx	@dptr,a
   0ADF 90s01r85           3658 	mov	dptr,#(_getFonaMillivolts_c_1_1 + 0x002d)
   0AE2 F0                 3659 	movx	@dptr,a
   0AE3 90s01r86           3660 	mov	dptr,#(_getFonaMillivolts_c_1_1 + 0x002e)
   0AE6 F0                 3661 	movx	@dptr,a
   0AE7 90s01r87           3662 	mov	dptr,#(_getFonaMillivolts_c_1_1 + 0x002f)
   0AEA F0                 3663 	movx	@dptr,a
   0AEB 90s01r88           3664 	mov	dptr,#(_getFonaMillivolts_c_1_1 + 0x0030)
   0AEE E4                 3665 	clr	a
   0AEF F0                 3666 	movx	@dptr,a
   0AF0 90s01r89           3667 	mov	dptr,#(_getFonaMillivolts_c_1_1 + 0x0031)
   0AF3 F0                 3668 	movx	@dptr,a
   0AF4 90s01r8A           3669 	mov	dptr,#(_getFonaMillivolts_c_1_1 + 0x0032)
   0AF7 F0                 3670 	movx	@dptr,a
   0AF8 90s01r8B           3671 	mov	dptr,#(_getFonaMillivolts_c_1_1 + 0x0033)
   0AFB F0                 3672 	movx	@dptr,a
   0AFC 90s01r8C           3673 	mov	dptr,#(_getFonaMillivolts_c_1_1 + 0x0034)
   0AFF E4                 3674 	clr	a
   0B00 F0                 3675 	movx	@dptr,a
   0B01 90s01r8D           3676 	mov	dptr,#(_getFonaMillivolts_c_1_1 + 0x0035)
   0B04 F0                 3677 	movx	@dptr,a
   0B05 90s01r8E           3678 	mov	dptr,#(_getFonaMillivolts_c_1_1 + 0x0036)
   0B08 F0                 3679 	movx	@dptr,a
   0B09 90s01r8F           3680 	mov	dptr,#(_getFonaMillivolts_c_1_1 + 0x0037)
   0B0C F0                 3681 	movx	@dptr,a
   0B0D 90s01r90           3682 	mov	dptr,#(_getFonaMillivolts_c_1_1 + 0x0038)
   0B10 E4                 3683 	clr	a
   0B11 F0                 3684 	movx	@dptr,a
   0B12 90s01r91           3685 	mov	dptr,#(_getFonaMillivolts_c_1_1 + 0x0039)
   0B15 F0                 3686 	movx	@dptr,a
   0B16 90s01r92           3687 	mov	dptr,#(_getFonaMillivolts_c_1_1 + 0x003a)
   0B19 F0                 3688 	movx	@dptr,a
   0B1A 90s01r93           3689 	mov	dptr,#(_getFonaMillivolts_c_1_1 + 0x003b)
   0B1D F0                 3690 	movx	@dptr,a
   0B1E 90s01r94           3691 	mov	dptr,#(_getFonaMillivolts_c_1_1 + 0x003c)
   0B21 E4                 3692 	clr	a
   0B22 F0                 3693 	movx	@dptr,a
   0B23 90s01r95           3694 	mov	dptr,#(_getFonaMillivolts_c_1_1 + 0x003d)
   0B26 F0                 3695 	movx	@dptr,a
   0B27 90s01r96           3696 	mov	dptr,#(_getFonaMillivolts_c_1_1 + 0x003e)
   0B2A F0                 3697 	movx	@dptr,a
   0B2B 90s01r97           3698 	mov	dptr,#(_getFonaMillivolts_c_1_1 + 0x003f)
   0B2E F0                 3699 	movx	@dptr,a
   0B2F 90s01r98           3700 	mov	dptr,#(_getFonaMillivolts_c_1_1 + 0x0040)
   0B32 E4                 3701 	clr	a
   0B33 F0                 3702 	movx	@dptr,a
   0B34 90s01r99           3703 	mov	dptr,#(_getFonaMillivolts_c_1_1 + 0x0041)
   0B37 F0                 3704 	movx	@dptr,a
   0B38 90s01r9A           3705 	mov	dptr,#(_getFonaMillivolts_c_1_1 + 0x0042)
   0B3B F0                 3706 	movx	@dptr,a
   0B3C 90s01r9B           3707 	mov	dptr,#(_getFonaMillivolts_c_1_1 + 0x0043)
   0B3F F0                 3708 	movx	@dptr,a
   0B40 90s01r9C           3709 	mov	dptr,#(_getFonaMillivolts_c_1_1 + 0x0044)
   0B43 E4                 3710 	clr	a
   0B44 F0                 3711 	movx	@dptr,a
   0B45 90s01r9D           3712 	mov	dptr,#(_getFonaMillivolts_c_1_1 + 0x0045)
   0B48 F0                 3713 	movx	@dptr,a
   0B49 90s01r9E           3714 	mov	dptr,#(_getFonaMillivolts_c_1_1 + 0x0046)
   0B4C F0                 3715 	movx	@dptr,a
   0B4D 90s01r9F           3716 	mov	dptr,#(_getFonaMillivolts_c_1_1 + 0x0047)
   0B50 F0                 3717 	movx	@dptr,a
   0B51 90s01rA0           3718 	mov	dptr,#(_getFonaMillivolts_c_1_1 + 0x0048)
   0B54 E4                 3719 	clr	a
   0B55 F0                 3720 	movx	@dptr,a
   0B56 90s01rA1           3721 	mov	dptr,#(_getFonaMillivolts_c_1_1 + 0x0049)
   0B59 F0                 3722 	movx	@dptr,a
   0B5A 90s01rA2           3723 	mov	dptr,#(_getFonaMillivolts_c_1_1 + 0x004a)
   0B5D F0                 3724 	movx	@dptr,a
   0B5E 90s01rA3           3725 	mov	dptr,#(_getFonaMillivolts_c_1_1 + 0x004b)
   0B61 F0                 3726 	movx	@dptr,a
   0B62 90s01rA4           3727 	mov	dptr,#(_getFonaMillivolts_c_1_1 + 0x004c)
   0B65 E4                 3728 	clr	a
   0B66 F0                 3729 	movx	@dptr,a
   0B67 90s01rA5           3730 	mov	dptr,#(_getFonaMillivolts_c_1_1 + 0x004d)
   0B6A F0                 3731 	movx	@dptr,a
   0B6B 90s01rA6           3732 	mov	dptr,#(_getFonaMillivolts_c_1_1 + 0x004e)
   0B6E F0                 3733 	movx	@dptr,a
   0B6F 90s01rA7           3734 	mov	dptr,#(_getFonaMillivolts_c_1_1 + 0x004f)
   0B72 F0                 3735 	movx	@dptr,a
                    0B73   3736 	C$mdrip.c$416$1$1 ==.
                           3737 ;	apps/mdrip/mdrip.c:416: XDATA char atString[40] = {0};
   0B73 90s01rA8           3738 	mov	dptr,#_getFonaMillivolts_atString_1_1
   0B76 E4                 3739 	clr	a
   0B77 F0                 3740 	movx	@dptr,a
   0B78 90s01rA9           3741 	mov	dptr,#(_getFonaMillivolts_atString_1_1 + 0x0001)
   0B7B F0                 3742 	movx	@dptr,a
   0B7C 90s01rAA           3743 	mov	dptr,#(_getFonaMillivolts_atString_1_1 + 0x0002)
   0B7F F0                 3744 	movx	@dptr,a
   0B80 90s01rAB           3745 	mov	dptr,#(_getFonaMillivolts_atString_1_1 + 0x0003)
   0B83 F0                 3746 	movx	@dptr,a
   0B84 90s01rAC           3747 	mov	dptr,#(_getFonaMillivolts_atString_1_1 + 0x0004)
   0B87 E4                 3748 	clr	a
   0B88 F0                 3749 	movx	@dptr,a
   0B89 90s01rAD           3750 	mov	dptr,#(_getFonaMillivolts_atString_1_1 + 0x0005)
   0B8C F0                 3751 	movx	@dptr,a
   0B8D 90s01rAE           3752 	mov	dptr,#(_getFonaMillivolts_atString_1_1 + 0x0006)
   0B90 F0                 3753 	movx	@dptr,a
   0B91 90s01rAF           3754 	mov	dptr,#(_getFonaMillivolts_atString_1_1 + 0x0007)
   0B94 F0                 3755 	movx	@dptr,a
   0B95 90s01rB0           3756 	mov	dptr,#(_getFonaMillivolts_atString_1_1 + 0x0008)
   0B98 E4                 3757 	clr	a
   0B99 F0                 3758 	movx	@dptr,a
   0B9A 90s01rB1           3759 	mov	dptr,#(_getFonaMillivolts_atString_1_1 + 0x0009)
   0B9D F0                 3760 	movx	@dptr,a
   0B9E 90s01rB2           3761 	mov	dptr,#(_getFonaMillivolts_atString_1_1 + 0x000a)
   0BA1 F0                 3762 	movx	@dptr,a
   0BA2 90s01rB3           3763 	mov	dptr,#(_getFonaMillivolts_atString_1_1 + 0x000b)
   0BA5 F0                 3764 	movx	@dptr,a
   0BA6 90s01rB4           3765 	mov	dptr,#(_getFonaMillivolts_atString_1_1 + 0x000c)
   0BA9 E4                 3766 	clr	a
   0BAA F0                 3767 	movx	@dptr,a
   0BAB 90s01rB5           3768 	mov	dptr,#(_getFonaMillivolts_atString_1_1 + 0x000d)
   0BAE F0                 3769 	movx	@dptr,a
   0BAF 90s01rB6           3770 	mov	dptr,#(_getFonaMillivolts_atString_1_1 + 0x000e)
   0BB2 F0                 3771 	movx	@dptr,a
   0BB3 90s01rB7           3772 	mov	dptr,#(_getFonaMillivolts_atString_1_1 + 0x000f)
   0BB6 F0                 3773 	movx	@dptr,a
   0BB7 90s01rB8           3774 	mov	dptr,#(_getFonaMillivolts_atString_1_1 + 0x0010)
   0BBA E4                 3775 	clr	a
   0BBB F0                 3776 	movx	@dptr,a
   0BBC 90s01rB9           3777 	mov	dptr,#(_getFonaMillivolts_atString_1_1 + 0x0011)
   0BBF F0                 3778 	movx	@dptr,a
   0BC0 90s01rBA           3779 	mov	dptr,#(_getFonaMillivolts_atString_1_1 + 0x0012)
   0BC3 F0                 3780 	movx	@dptr,a
   0BC4 90s01rBB           3781 	mov	dptr,#(_getFonaMillivolts_atString_1_1 + 0x0013)
   0BC7 F0                 3782 	movx	@dptr,a
   0BC8 90s01rBC           3783 	mov	dptr,#(_getFonaMillivolts_atString_1_1 + 0x0014)
   0BCB E4                 3784 	clr	a
   0BCC F0                 3785 	movx	@dptr,a
   0BCD 90s01rBD           3786 	mov	dptr,#(_getFonaMillivolts_atString_1_1 + 0x0015)
   0BD0 F0                 3787 	movx	@dptr,a
   0BD1 90s01rBE           3788 	mov	dptr,#(_getFonaMillivolts_atString_1_1 + 0x0016)
   0BD4 F0                 3789 	movx	@dptr,a
   0BD5 90s01rBF           3790 	mov	dptr,#(_getFonaMillivolts_atString_1_1 + 0x0017)
   0BD8 F0                 3791 	movx	@dptr,a
   0BD9 90s01rC0           3792 	mov	dptr,#(_getFonaMillivolts_atString_1_1 + 0x0018)
   0BDC E4                 3793 	clr	a
   0BDD F0                 3794 	movx	@dptr,a
   0BDE 90s01rC1           3795 	mov	dptr,#(_getFonaMillivolts_atString_1_1 + 0x0019)
   0BE1 F0                 3796 	movx	@dptr,a
   0BE2 90s01rC2           3797 	mov	dptr,#(_getFonaMillivolts_atString_1_1 + 0x001a)
   0BE5 F0                 3798 	movx	@dptr,a
   0BE6 90s01rC3           3799 	mov	dptr,#(_getFonaMillivolts_atString_1_1 + 0x001b)
   0BE9 F0                 3800 	movx	@dptr,a
   0BEA 90s01rC4           3801 	mov	dptr,#(_getFonaMillivolts_atString_1_1 + 0x001c)
   0BED E4                 3802 	clr	a
   0BEE F0                 3803 	movx	@dptr,a
   0BEF 90s01rC5           3804 	mov	dptr,#(_getFonaMillivolts_atString_1_1 + 0x001d)
   0BF2 F0                 3805 	movx	@dptr,a
   0BF3 90s01rC6           3806 	mov	dptr,#(_getFonaMillivolts_atString_1_1 + 0x001e)
   0BF6 F0                 3807 	movx	@dptr,a
   0BF7 90s01rC7           3808 	mov	dptr,#(_getFonaMillivolts_atString_1_1 + 0x001f)
   0BFA F0                 3809 	movx	@dptr,a
   0BFB 90s01rC8           3810 	mov	dptr,#(_getFonaMillivolts_atString_1_1 + 0x0020)
   0BFE E4                 3811 	clr	a
   0BFF F0                 3812 	movx	@dptr,a
   0C00 90s01rC9           3813 	mov	dptr,#(_getFonaMillivolts_atString_1_1 + 0x0021)
   0C03 F0                 3814 	movx	@dptr,a
   0C04 90s01rCA           3815 	mov	dptr,#(_getFonaMillivolts_atString_1_1 + 0x0022)
   0C07 F0                 3816 	movx	@dptr,a
   0C08 90s01rCB           3817 	mov	dptr,#(_getFonaMillivolts_atString_1_1 + 0x0023)
   0C0B F0                 3818 	movx	@dptr,a
   0C0C 90s01rCC           3819 	mov	dptr,#(_getFonaMillivolts_atString_1_1 + 0x0024)
   0C0F E4                 3820 	clr	a
   0C10 F0                 3821 	movx	@dptr,a
   0C11 90s01rCD           3822 	mov	dptr,#(_getFonaMillivolts_atString_1_1 + 0x0025)
   0C14 F0                 3823 	movx	@dptr,a
   0C15 90s01rCE           3824 	mov	dptr,#(_getFonaMillivolts_atString_1_1 + 0x0026)
   0C18 F0                 3825 	movx	@dptr,a
   0C19 90s01rCF           3826 	mov	dptr,#(_getFonaMillivolts_atString_1_1 + 0x0027)
   0C1C F0                 3827 	movx	@dptr,a
                    0C1D   3828 	C$mdrip.c$418$1$1 ==.
                           3829 ;	apps/mdrip/mdrip.c:418: strcpy(atString, "ATE0\r\n"); sendAT(atString); // delayMs(defaultATWait);					// Switch off echo of commands so that wixel can buffer responses properly
   0C1D 78r00              3830 	mov	r0,#_strcpy_PARM_2
   0C1F 74rF1              3831 	mov	a,#__str_18
   0C21 F2                 3832 	movx	@r0,a
   0C22 08                 3833 	inc	r0
   0C23 74s00              3834 	mov	a,#(__str_18 >> 8)
   0C25 F2                 3835 	movx	@r0,a
   0C26 08                 3836 	inc	r0
   0C27 74 80              3837 	mov	a,#0x80
   0C29 F2                 3838 	movx	@r0,a
   0C2A 90s01rA8           3839 	mov	dptr,#_getFonaMillivolts_atString_1_1
   0C2D 75 F0 00           3840 	mov	b,#0x00
   0C30 12s00r00           3841 	lcall	_strcpy
   0C33 90s01rA8           3842 	mov	dptr,#_getFonaMillivolts_atString_1_1
   0C36 12s04rF9           3843 	lcall	_sendAT
                    0C39   3844 	C$mdrip.c$420$1$1 ==.
                           3845 ;	apps/mdrip/mdrip.c:420: c[0]=0;														// And mark string as empty
   0C39 90s01r58           3846 	mov	dptr,#_getFonaMillivolts_c_1_1
   0C3C E4                 3847 	clr	a
   0C3D F0                 3848 	movx	@dptr,a
                    0C3E   3849 	C$mdrip.c$421$1$1 ==.
                           3850 ;	apps/mdrip/mdrip.c:421: clearRxErrors();
   0C3E 12s03r47           3851 	lcall	_clearRxErrors
                    0C41   3852 	C$mdrip.c$423$1$1 ==.
                           3853 ;	apps/mdrip/mdrip.c:423: boardService();
   0C41 12s00r00           3854 	lcall	_boardService
                    0C44   3855 	C$mdrip.c$424$1$1 ==.
                           3856 ;	apps/mdrip/mdrip.c:424: strcpy(atString, "AT+CBC\r\n"); //  sendAT(atString); //delayMs(1000);	// Ask for battery info - charging state, percentage and millivolts
   0C44 78r00              3857 	mov	r0,#_strcpy_PARM_2
   0C46 74rF8              3858 	mov	a,#__str_19
   0C48 F2                 3859 	movx	@r0,a
   0C49 08                 3860 	inc	r0
   0C4A 74s00              3861 	mov	a,#(__str_19 >> 8)
   0C4C F2                 3862 	movx	@r0,a
   0C4D 08                 3863 	inc	r0
   0C4E 74 80              3864 	mov	a,#0x80
   0C50 F2                 3865 	movx	@r0,a
   0C51 90s01rA8           3866 	mov	dptr,#_getFonaMillivolts_atString_1_1
   0C54 75 F0 00           3867 	mov	b,#0x00
   0C57 12s00r00           3868 	lcall	_strcpy
                    0C5A   3869 	C$mdrip.c$427$1$1 ==.
                           3870 ;	apps/mdrip/mdrip.c:427: uartEnable();
   0C5A 12s00r2D           3871 	lcall	_uartEnable
                    0C5D   3872 	C$mdrip.c$428$1$1 ==.
                           3873 ;	apps/mdrip/mdrip.c:428: printf(atString);
   0C5D 74rA8              3874 	mov	a,#_getFonaMillivolts_atString_1_1
   0C5F C0 E0              3875 	push	acc
   0C61 74s01              3876 	mov	a,#(_getFonaMillivolts_atString_1_1 >> 8)
   0C63 C0 E0              3877 	push	acc
   0C65 E4                 3878 	clr	a
   0C66 C0 E0              3879 	push	acc
   0C68 12s00r00           3880 	lcall	_printf
   0C6B 15 81              3881 	dec	sp
   0C6D 15 81              3882 	dec	sp
   0C6F 15 81              3883 	dec	sp
                    0C71   3884 	C$mdrip.c$429$1$1 ==.
                           3885 ;	apps/mdrip/mdrip.c:429: delayMs(100);
   0C71 90 00 64           3886 	mov	dptr,#0x0064
   0C74 12s00r00           3887 	lcall	_delayMs
                    0C77   3888 	C$mdrip.c$431$1$1 ==.
                           3889 ;	apps/mdrip/mdrip.c:431: rxCount = uart1RxAvailable();
   0C77 12s00r00           3890 	lcall	_uart1RxAvailable
   0C7A AF 82              3891 	mov	r7,dpl
                    0C7C   3892 	C$mdrip.c$432$1$1 ==.
                           3893 ;	apps/mdrip/mdrip.c:432: strcpy(c, (getFonaString()));
   0C7C C0 07              3894 	push	ar7
   0C7E 12s03rBF           3895 	lcall	_getFonaString
   0C81 AD 82              3896 	mov	r5,dpl
   0C83 AE 83              3897 	mov	r6,dph
   0C85 78r00              3898 	mov	r0,#_strcpy_PARM_2
   0C87 ED                 3899 	mov	a,r5
   0C88 F2                 3900 	movx	@r0,a
   0C89 08                 3901 	inc	r0
   0C8A EE                 3902 	mov	a,r6
   0C8B F2                 3903 	movx	@r0,a
   0C8C 08                 3904 	inc	r0
   0C8D E4                 3905 	clr	a
   0C8E F2                 3906 	movx	@r0,a
   0C8F 90s01r58           3907 	mov	dptr,#_getFonaMillivolts_c_1_1
   0C92 75 F0 00           3908 	mov	b,#0x00
   0C95 12s00r00           3909 	lcall	_strcpy
                    0C98   3910 	C$mdrip.c$434$1$1 ==.
                           3911 ;	apps/mdrip/mdrip.c:434: if (usbPowerPresent()) {
   0C98 12s00r00           3912 	lcall	_usbPowerPresent
   0C9B D0 07              3913 	pop	ar7
   0C9D 50 62              3914 	jnc	00104$
                    0C9F   3915 	C$mdrip.c$435$2$2 ==.
                           3916 ;	apps/mdrip/mdrip.c:435: if(usbComTxAvailable() > 40) {							//  Check if room to send string
   0C9F C0 07              3917 	push	ar7
   0CA1 12s00r00           3918 	lcall	_usbComTxAvailable
   0CA4 AE 82              3919 	mov	r6,dpl
   0CA6 D0 07              3920 	pop	ar7
   0CA8 EE                 3921 	mov	a,r6
   0CA9 24 D7              3922 	add	a,#0xff - 0x28
   0CAB 50 54              3923 	jnc	00104$
                    0CAD   3924 	C$mdrip.c$436$3$3 ==.
                           3925 ;	apps/mdrip/mdrip.c:436: strcpy(atString, "CBC> ");
   0CAD 78r00              3926 	mov	r0,#_strcpy_PARM_2
   0CAF 74r01              3927 	mov	a,#__str_20
   0CB1 F2                 3928 	movx	@r0,a
   0CB2 08                 3929 	inc	r0
   0CB3 74s01              3930 	mov	a,#(__str_20 >> 8)
   0CB5 F2                 3931 	movx	@r0,a
   0CB6 08                 3932 	inc	r0
   0CB7 74 80              3933 	mov	a,#0x80
   0CB9 F2                 3934 	movx	@r0,a
   0CBA 90s01rA8           3935 	mov	dptr,#_getFonaMillivolts_atString_1_1
   0CBD 75 F0 00           3936 	mov	b,#0x00
   0CC0 C0 07              3937 	push	ar7
   0CC2 12s00r00           3938 	lcall	_strcpy
                    0CC5   3939 	C$mdrip.c$437$3$3 ==.
                           3940 ;	apps/mdrip/mdrip.c:437: strcat(atString, c);
   0CC5 78r00              3941 	mov	r0,#_strcat_PARM_2
   0CC7 74r58              3942 	mov	a,#_getFonaMillivolts_c_1_1
   0CC9 F2                 3943 	movx	@r0,a
   0CCA 08                 3944 	inc	r0
   0CCB 74s01              3945 	mov	a,#(_getFonaMillivolts_c_1_1 >> 8)
   0CCD F2                 3946 	movx	@r0,a
   0CCE 08                 3947 	inc	r0
   0CCF E4                 3948 	clr	a
   0CD0 F2                 3949 	movx	@r0,a
   0CD1 90s01rA8           3950 	mov	dptr,#_getFonaMillivolts_atString_1_1
   0CD4 75 F0 00           3951 	mov	b,#0x00
   0CD7 12s00r00           3952 	lcall	_strcat
                    0CDA   3953 	C$mdrip.c$438$3$3 ==.
                           3954 ;	apps/mdrip/mdrip.c:438: usbComTxSend(atString, strlen(atString));
   0CDA 7DrA8              3955 	mov	r5,#_getFonaMillivolts_atString_1_1
   0CDC 7Es01              3956 	mov	r6,#(_getFonaMillivolts_atString_1_1 >> 8)
   0CDE 90s01rA8           3957 	mov	dptr,#_getFonaMillivolts_atString_1_1
   0CE1 75 F0 00           3958 	mov	b,#0x00
   0CE4 C0 06              3959 	push	ar6
   0CE6 C0 05              3960 	push	ar5
   0CE8 12s00r00           3961 	lcall	_strlen
   0CEB AB 82              3962 	mov	r3,dpl
   0CED D0 05              3963 	pop	ar5
   0CEF D0 06              3964 	pop	ar6
   0CF1 78r00              3965 	mov	r0,#_usbComTxSend_PARM_2
   0CF3 EB                 3966 	mov	a,r3
   0CF4 F2                 3967 	movx	@r0,a
   0CF5 8D 82              3968 	mov	dpl,r5
   0CF7 8E 83              3969 	mov	dph,r6
   0CF9 12s00r00           3970 	lcall	_usbComTxSend
                    0CFC   3971 	C$mdrip.c$439$3$3 ==.
                           3972 ;	apps/mdrip/mdrip.c:439: doServices();
   0CFC 12s03r73           3973 	lcall	_doServices
   0CFF D0 07              3974 	pop	ar7
   0D01                    3975 00104$:
                    0D01   3976 	C$mdrip.c$446$1$1 ==.
                           3977 ;	apps/mdrip/mdrip.c:446: i = strlen(c);
   0D01 90s01r58           3978 	mov	dptr,#_getFonaMillivolts_c_1_1
   0D04 75 F0 00           3979 	mov	b,#0x00
   0D07 C0 07              3980 	push	ar7
   0D09 12s00r00           3981 	lcall	_strlen
   0D0C AD 82              3982 	mov	r5,dpl
   0D0E AE 83              3983 	mov	r6,dph
   0D10 D0 07              3984 	pop	ar7
   0D12 90s01r54           3985 	mov	dptr,#_getFonaMillivolts_i_1_1
   0D15 ED                 3986 	mov	a,r5
   0D16 F0                 3987 	movx	@dptr,a
   0D17 A3                 3988 	inc	dptr
   0D18 EE                 3989 	mov	a,r6
   0D19 F0                 3990 	movx	@dptr,a
                    0D1A   3991 	C$mdrip.c$448$1$1 ==.
                           3992 ;	apps/mdrip/mdrip.c:448: if  (c[0]!=0) {
   0D1A 90s01r58           3993 	mov	dptr,#_getFonaMillivolts_c_1_1
   0D1D E0                 3994 	movx	a,@dptr
   0D1E 70 03              3995 	jnz	00126$
   0D20 02s0DrCB           3996 	ljmp	00112$
   0D23                    3997 00126$:
                    0D23   3998 	C$mdrip.c$449$2$4 ==.
                           3999 ;	apps/mdrip/mdrip.c:449: if (c[i-13]==',') 	// Was 16 but that is before not after the percentage
   0D23 8D 04              4000 	mov	ar4,r5
   0D25 EC                 4001 	mov	a,r4
   0D26 24 F3              4002 	add	a,#0xF3
   0D28 24r58              4003 	add	a,#_getFonaMillivolts_c_1_1
   0D2A F5 82              4004 	mov	dpl,a
   0D2C E4                 4005 	clr	a
   0D2D 34s01              4006 	addc	a,#(_getFonaMillivolts_c_1_1 >> 8)
   0D2F F5 83              4007 	mov	dph,a
   0D31 E0                 4008 	movx	a,@dptr
   0D32 FB                 4009 	mov	r3,a
   0D33 BB 2C 55           4010 	cjne	r3,#0x2C,00109$
                    0D36   4011 	C$mdrip.c$452$3$5 ==.
                           4012 ;	apps/mdrip/mdrip.c:452: intMV=(((((c[i-15])-'0')*10))+((((c[i-14])-'0'))));		// Bit of maths to work out the percentage from these two characters
   0D36 EC                 4013 	mov	a,r4
   0D37 24 F1              4014 	add	a,#0xF1
   0D39 24r58              4015 	add	a,#_getFonaMillivolts_c_1_1
   0D3B F5 82              4016 	mov	dpl,a
   0D3D E4                 4017 	clr	a
   0D3E 34s01              4018 	addc	a,#(_getFonaMillivolts_c_1_1 >> 8)
   0D40 F5 83              4019 	mov	dph,a
   0D42 E0                 4020 	movx	a,@dptr
   0D43 FB                 4021 	mov	r3,a
   0D44 33                 4022 	rlc	a
   0D45 95 E0              4023 	subb	a,acc
   0D47 FA                 4024 	mov	r2,a
   0D48 78r00              4025 	mov	r0,#__mulint_PARM_2
   0D4A EB                 4026 	mov	a,r3
   0D4B 24 D0              4027 	add	a,#0xD0
   0D4D F2                 4028 	movx	@r0,a
   0D4E EA                 4029 	mov	a,r2
   0D4F 34 FF              4030 	addc	a,#0xFF
   0D51 08                 4031 	inc	r0
   0D52 F2                 4032 	movx	@r0,a
   0D53 90 00 0A           4033 	mov	dptr,#0x000A
   0D56 C0 04              4034 	push	ar4
   0D58 12s00r00           4035 	lcall	__mulint
   0D5B 85 82*04           4036 	mov	_getFonaMillivolts_sloc0_1_0,dpl
   0D5E 85 83*05           4037 	mov	(_getFonaMillivolts_sloc0_1_0 + 1),dph
   0D61 D0 04              4038 	pop	ar4
   0D63 EC                 4039 	mov	a,r4
   0D64 24 F2              4040 	add	a,#0xF2
   0D66 24r58              4041 	add	a,#_getFonaMillivolts_c_1_1
   0D68 F5 82              4042 	mov	dpl,a
   0D6A E4                 4043 	clr	a
   0D6B 34s01              4044 	addc	a,#(_getFonaMillivolts_c_1_1 >> 8)
   0D6D F5 83              4045 	mov	dph,a
   0D6F E0                 4046 	movx	a,@dptr
   0D70 FB                 4047 	mov	r3,a
   0D71 33                 4048 	rlc	a
   0D72 95 E0              4049 	subb	a,acc
   0D74 FA                 4050 	mov	r2,a
   0D75 EB                 4051 	mov	a,r3
   0D76 24 D0              4052 	add	a,#0xD0
   0D78 FB                 4053 	mov	r3,a
   0D79 EA                 4054 	mov	a,r2
   0D7A 34 FF              4055 	addc	a,#0xFF
   0D7C FA                 4056 	mov	r2,a
   0D7D 90s01r56           4057 	mov	dptr,#_getFonaMillivolts_intMV_1_1
   0D80 EB                 4058 	mov	a,r3
   0D81 25*04              4059 	add	a,_getFonaMillivolts_sloc0_1_0
   0D83 F0                 4060 	movx	@dptr,a
   0D84 EA                 4061 	mov	a,r2
   0D85 35*05              4062 	addc	a,(_getFonaMillivolts_sloc0_1_0 + 1)
   0D87 A3                 4063 	inc	dptr
   0D88 F0                 4064 	movx	@dptr,a
   0D89 80 6D              4065 	sjmp	00113$
   0D8B                    4066 00109$:
                    0D8B   4067 	C$mdrip.c$455$3$6 ==.
                           4068 ;	apps/mdrip/mdrip.c:455: if (c[i-14]==',') 											// There are only two digits if the 16th last character is a comma
   0D8B EC                 4069 	mov	a,r4
   0D8C 24 F2              4070 	add	a,#0xF2
   0D8E 24r58              4071 	add	a,#_getFonaMillivolts_c_1_1
   0D90 F5 82              4072 	mov	dpl,a
   0D92 E4                 4073 	clr	a
   0D93 34s01              4074 	addc	a,#(_getFonaMillivolts_c_1_1 >> 8)
   0D95 F5 83              4075 	mov	dph,a
   0D97 E0                 4076 	movx	a,@dptr
   0D98 FB                 4077 	mov	r3,a
   0D99 BB 2C 24           4078 	cjne	r3,#0x2C,00106$
                    0D9C   4079 	C$mdrip.c$457$4$7 ==.
                           4080 ;	apps/mdrip/mdrip.c:457: intMV=((((c[i-15])-'0')));		// Bit of maths to work out the percentage from these two characters
   0D9C EC                 4081 	mov	a,r4
   0D9D 24 F1              4082 	add	a,#0xF1
   0D9F 24r58              4083 	add	a,#_getFonaMillivolts_c_1_1
   0DA1 F5 82              4084 	mov	dpl,a
   0DA3 E4                 4085 	clr	a
   0DA4 34s01              4086 	addc	a,#(_getFonaMillivolts_c_1_1 >> 8)
   0DA6 F5 83              4087 	mov	dph,a
   0DA8 E0                 4088 	movx	a,@dptr
   0DA9 FC                 4089 	mov	r4,a
   0DAA 33                 4090 	rlc	a
   0DAB 95 E0              4091 	subb	a,acc
   0DAD FB                 4092 	mov	r3,a
   0DAE EC                 4093 	mov	a,r4
   0DAF 24 D0              4094 	add	a,#0xD0
   0DB1 FC                 4095 	mov	r4,a
   0DB2 EB                 4096 	mov	a,r3
   0DB3 34 FF              4097 	addc	a,#0xFF
   0DB5 FB                 4098 	mov	r3,a
   0DB6 90s01r56           4099 	mov	dptr,#_getFonaMillivolts_intMV_1_1
   0DB9 EC                 4100 	mov	a,r4
   0DBA F0                 4101 	movx	@dptr,a
   0DBB A3                 4102 	inc	dptr
   0DBC EB                 4103 	mov	a,r3
   0DBD F0                 4104 	movx	@dptr,a
   0DBE 80 38              4105 	sjmp	00113$
   0DC0                    4106 00106$:
                    0DC0   4107 	C$mdrip.c$459$4$8 ==.
                           4108 ;	apps/mdrip/mdrip.c:459: intMV=(100);											// Oherwise presumably the battery is 100% as 3 digits were found
   0DC0 90s01r56           4109 	mov	dptr,#_getFonaMillivolts_intMV_1_1
   0DC3 74 64              4110 	mov	a,#0x64
   0DC5 F0                 4111 	movx	@dptr,a
   0DC6 A3                 4112 	inc	dptr
   0DC7 E4                 4113 	clr	a
   0DC8 F0                 4114 	movx	@dptr,a
   0DC9 80 2D              4115 	sjmp	00113$
   0DCB                    4116 00112$:
                    0DCB   4117 	C$mdrip.c$464$2$9 ==.
                           4118 ;	apps/mdrip/mdrip.c:464: intMV=((1000*rxCount)+(100+i));							// If we get no response back then default to 100% as we don't know.
   0DCB 78r00              4119 	mov	r0,#__mulint_PARM_2
   0DCD EF                 4120 	mov	a,r7
   0DCE F2                 4121 	movx	@r0,a
   0DCF EF                 4122 	mov	a,r7
   0DD0 33                 4123 	rlc	a
   0DD1 95 E0              4124 	subb	a,acc
   0DD3 08                 4125 	inc	r0
   0DD4 F2                 4126 	movx	@r0,a
   0DD5 90 03 E8           4127 	mov	dptr,#0x03E8
   0DD8 C0 06              4128 	push	ar6
   0DDA C0 05              4129 	push	ar5
   0DDC 12s00r00           4130 	lcall	__mulint
   0DDF AC 82              4131 	mov	r4,dpl
   0DE1 AF 83              4132 	mov	r7,dph
   0DE3 D0 05              4133 	pop	ar5
   0DE5 D0 06              4134 	pop	ar6
   0DE7 74 64              4135 	mov	a,#0x64
   0DE9 2D                 4136 	add	a,r5
   0DEA FD                 4137 	mov	r5,a
   0DEB E4                 4138 	clr	a
   0DEC 3E                 4139 	addc	a,r6
   0DED FE                 4140 	mov	r6,a
   0DEE 90s01r56           4141 	mov	dptr,#_getFonaMillivolts_intMV_1_1
   0DF1 ED                 4142 	mov	a,r5
   0DF2 2C                 4143 	add	a,r4
   0DF3 F0                 4144 	movx	@dptr,a
   0DF4 EE                 4145 	mov	a,r6
   0DF5 3F                 4146 	addc	a,r7
   0DF6 A3                 4147 	inc	dptr
   0DF7 F0                 4148 	movx	@dptr,a
   0DF8                    4149 00113$:
                    0DF8   4150 	C$mdrip.c$467$1$1 ==.
                           4151 ;	apps/mdrip/mdrip.c:467: if (intMV < 15) {												// If battery is less than a third then
   0DF8 90s01r56           4152 	mov	dptr,#_getFonaMillivolts_intMV_1_1
   0DFB E0                 4153 	movx	a,@dptr
   0DFC FE                 4154 	mov	r6,a
   0DFD A3                 4155 	inc	dptr
   0DFE E0                 4156 	movx	a,@dptr
   0DFF FF                 4157 	mov	r7,a
   0E00 C3                 4158 	clr	c
   0E01 EE                 4159 	mov	a,r6
   0E02 94 0F              4160 	subb	a,#0x0F
   0E04 EF                 4161 	mov	a,r7
   0E05 64 80              4162 	xrl	a,#0x80
   0E07 94 80              4163 	subb	a,#0x80
   0E09 50 03              4164 	jnc	00115$
                    0E0B   4165 	C$mdrip.c$468$3$11 ==.
                           4166 ;	apps/mdrip/mdrip.c:468: LED_RED(1);	 }												// Switch on Red LED on Wixel to show low battery
   0E0B 43 FF 02           4167 	orl	_P2DIR,#0x02
   0E0E                    4168 00115$:
                    0E0E   4169 	C$mdrip.c$470$1$1 ==.
                           4170 ;	apps/mdrip/mdrip.c:470: return intMV;
   0E0E 8E 82              4171 	mov	dpl,r6
   0E10 8F 83              4172 	mov	dph,r7
                    0E12   4173 	C$mdrip.c$471$1$1 ==.
                    0E12   4174 	XG$getFonaMillivolts$0$0 ==.
   0E12 22                 4175 	ret
                           4176 ;------------------------------------------------------------
                           4177 ;Allocation info for local variables in function 'getFonaGPS'
                           4178 ;------------------------------------------------------------
                           4179 ;sloc0                     Allocated with name '_getFonaGPS_sloc0_1_0'
                           4180 ;sloc1                     Allocated with name '_getFonaGPS_sloc1_1_0'
                           4181 ;i                         Allocated with name '_getFonaGPS_i_1_1'
                           4182 ;j                         Allocated with name '_getFonaGPS_j_1_1'
                           4183 ;clen                      Allocated with name '_getFonaGPS_clen_1_1'
                           4184 ;stage                     Allocated with name '_getFonaGPS_stage_1_1'
                           4185 ;status                    Allocated with name '_getFonaGPS_status_1_1'
                           4186 ;atString                  Allocated with name '_getFonaGPS_atString_1_1'
                           4187 ;c                         Allocated with name '_getFonaGPS_c_1_1'
                           4188 ;------------------------------------------------------------
                    0E13   4189 	G$getFonaGPS$0$0 ==.
                    0E13   4190 	C$mdrip.c$482$1$1 ==.
                           4191 ;	apps/mdrip/mdrip.c:482: void getFonaGPS(GSMlocInfo* CIPGSMLOC) {
                           4192 ;	-----------------------------------------
                           4193 ;	 function getFonaGPS
                           4194 ;	-----------------------------------------
   0E13                    4195 _getFonaGPS:
   0E13 AF 83              4196 	mov	r7,dph
   0E15 E5 82              4197 	mov	a,dpl
   0E17 78r45              4198 	mov	r0,#_getFonaGPS_CIPGSMLOC_1_1
   0E19 F2                 4199 	movx	@r0,a
   0E1A 08                 4200 	inc	r0
   0E1B EF                 4201 	mov	a,r7
   0E1C F2                 4202 	movx	@r0,a
                    0E1D   4203 	C$mdrip.c$485$1$1 ==.
                           4204 ;	apps/mdrip/mdrip.c:485: XDATA char status[6] = {0};								//	Maximum of 5 characters and a termination character
   0E1D 90s01rD3           4205 	mov	dptr,#_getFonaGPS_status_1_1
   0E20 E4                 4206 	clr	a
   0E21 F0                 4207 	movx	@dptr,a
   0E22 90s01rD4           4208 	mov	dptr,#(_getFonaGPS_status_1_1 + 0x0001)
   0E25 F0                 4209 	movx	@dptr,a
   0E26 90s01rD5           4210 	mov	dptr,#(_getFonaGPS_status_1_1 + 0x0002)
   0E29 F0                 4211 	movx	@dptr,a
   0E2A 90s01rD6           4212 	mov	dptr,#(_getFonaGPS_status_1_1 + 0x0003)
   0E2D F0                 4213 	movx	@dptr,a
   0E2E 90s01rD7           4214 	mov	dptr,#(_getFonaGPS_status_1_1 + 0x0004)
                    0E31   4215 	C$mdrip.c$487$1$1 ==.
                           4216 ;	apps/mdrip/mdrip.c:487: XDATA char c[80] = {0};
   0E31 E4                 4217 	clr	a
   0E32 F0                 4218 	movx	@dptr,a
   0E33 90s01rD8           4219 	mov	dptr,#(_getFonaGPS_status_1_1 + 0x0005)
   0E36 F0                 4220 	movx	@dptr,a
   0E37 90s02r01           4221 	mov	dptr,#_getFonaGPS_c_1_1
   0E3A F0                 4222 	movx	@dptr,a
   0E3B 90s02r02           4223 	mov	dptr,#(_getFonaGPS_c_1_1 + 0x0001)
   0E3E F0                 4224 	movx	@dptr,a
   0E3F 90s02r03           4225 	mov	dptr,#(_getFonaGPS_c_1_1 + 0x0002)
   0E42 E4                 4226 	clr	a
   0E43 F0                 4227 	movx	@dptr,a
   0E44 90s02r04           4228 	mov	dptr,#(_getFonaGPS_c_1_1 + 0x0003)
   0E47 F0                 4229 	movx	@dptr,a
   0E48 90s02r05           4230 	mov	dptr,#(_getFonaGPS_c_1_1 + 0x0004)
   0E4B F0                 4231 	movx	@dptr,a
   0E4C 90s02r06           4232 	mov	dptr,#(_getFonaGPS_c_1_1 + 0x0005)
   0E4F F0                 4233 	movx	@dptr,a
   0E50 90s02r07           4234 	mov	dptr,#(_getFonaGPS_c_1_1 + 0x0006)
   0E53 E4                 4235 	clr	a
   0E54 F0                 4236 	movx	@dptr,a
   0E55 90s02r08           4237 	mov	dptr,#(_getFonaGPS_c_1_1 + 0x0007)
   0E58 F0                 4238 	movx	@dptr,a
   0E59 90s02r09           4239 	mov	dptr,#(_getFonaGPS_c_1_1 + 0x0008)
   0E5C F0                 4240 	movx	@dptr,a
   0E5D 90s02r0A           4241 	mov	dptr,#(_getFonaGPS_c_1_1 + 0x0009)
   0E60 F0                 4242 	movx	@dptr,a
   0E61 90s02r0B           4243 	mov	dptr,#(_getFonaGPS_c_1_1 + 0x000a)
   0E64 E4                 4244 	clr	a
   0E65 F0                 4245 	movx	@dptr,a
   0E66 90s02r0C           4246 	mov	dptr,#(_getFonaGPS_c_1_1 + 0x000b)
   0E69 F0                 4247 	movx	@dptr,a
   0E6A 90s02r0D           4248 	mov	dptr,#(_getFonaGPS_c_1_1 + 0x000c)
   0E6D F0                 4249 	movx	@dptr,a
   0E6E 90s02r0E           4250 	mov	dptr,#(_getFonaGPS_c_1_1 + 0x000d)
   0E71 F0                 4251 	movx	@dptr,a
   0E72 90s02r0F           4252 	mov	dptr,#(_getFonaGPS_c_1_1 + 0x000e)
   0E75 E4                 4253 	clr	a
   0E76 F0                 4254 	movx	@dptr,a
   0E77 90s02r10           4255 	mov	dptr,#(_getFonaGPS_c_1_1 + 0x000f)
   0E7A F0                 4256 	movx	@dptr,a
   0E7B 90s02r11           4257 	mov	dptr,#(_getFonaGPS_c_1_1 + 0x0010)
   0E7E F0                 4258 	movx	@dptr,a
   0E7F 90s02r12           4259 	mov	dptr,#(_getFonaGPS_c_1_1 + 0x0011)
   0E82 F0                 4260 	movx	@dptr,a
   0E83 90s02r13           4261 	mov	dptr,#(_getFonaGPS_c_1_1 + 0x0012)
   0E86 E4                 4262 	clr	a
   0E87 F0                 4263 	movx	@dptr,a
   0E88 90s02r14           4264 	mov	dptr,#(_getFonaGPS_c_1_1 + 0x0013)
   0E8B F0                 4265 	movx	@dptr,a
   0E8C 90s02r15           4266 	mov	dptr,#(_getFonaGPS_c_1_1 + 0x0014)
   0E8F F0                 4267 	movx	@dptr,a
   0E90 90s02r16           4268 	mov	dptr,#(_getFonaGPS_c_1_1 + 0x0015)
   0E93 F0                 4269 	movx	@dptr,a
   0E94 90s02r17           4270 	mov	dptr,#(_getFonaGPS_c_1_1 + 0x0016)
   0E97 E4                 4271 	clr	a
   0E98 F0                 4272 	movx	@dptr,a
   0E99 90s02r18           4273 	mov	dptr,#(_getFonaGPS_c_1_1 + 0x0017)
   0E9C F0                 4274 	movx	@dptr,a
   0E9D 90s02r19           4275 	mov	dptr,#(_getFonaGPS_c_1_1 + 0x0018)
   0EA0 F0                 4276 	movx	@dptr,a
   0EA1 90s02r1A           4277 	mov	dptr,#(_getFonaGPS_c_1_1 + 0x0019)
   0EA4 F0                 4278 	movx	@dptr,a
   0EA5 90s02r1B           4279 	mov	dptr,#(_getFonaGPS_c_1_1 + 0x001a)
   0EA8 E4                 4280 	clr	a
   0EA9 F0                 4281 	movx	@dptr,a
   0EAA 90s02r1C           4282 	mov	dptr,#(_getFonaGPS_c_1_1 + 0x001b)
   0EAD F0                 4283 	movx	@dptr,a
   0EAE 90s02r1D           4284 	mov	dptr,#(_getFonaGPS_c_1_1 + 0x001c)
   0EB1 F0                 4285 	movx	@dptr,a
   0EB2 90s02r1E           4286 	mov	dptr,#(_getFonaGPS_c_1_1 + 0x001d)
   0EB5 F0                 4287 	movx	@dptr,a
   0EB6 90s02r1F           4288 	mov	dptr,#(_getFonaGPS_c_1_1 + 0x001e)
   0EB9 E4                 4289 	clr	a
   0EBA F0                 4290 	movx	@dptr,a
   0EBB 90s02r20           4291 	mov	dptr,#(_getFonaGPS_c_1_1 + 0x001f)
   0EBE F0                 4292 	movx	@dptr,a
   0EBF 90s02r21           4293 	mov	dptr,#(_getFonaGPS_c_1_1 + 0x0020)
   0EC2 F0                 4294 	movx	@dptr,a
   0EC3 90s02r22           4295 	mov	dptr,#(_getFonaGPS_c_1_1 + 0x0021)
   0EC6 F0                 4296 	movx	@dptr,a
   0EC7 90s02r23           4297 	mov	dptr,#(_getFonaGPS_c_1_1 + 0x0022)
   0ECA E4                 4298 	clr	a
   0ECB F0                 4299 	movx	@dptr,a
   0ECC 90s02r24           4300 	mov	dptr,#(_getFonaGPS_c_1_1 + 0x0023)
   0ECF F0                 4301 	movx	@dptr,a
   0ED0 90s02r25           4302 	mov	dptr,#(_getFonaGPS_c_1_1 + 0x0024)
   0ED3 F0                 4303 	movx	@dptr,a
   0ED4 90s02r26           4304 	mov	dptr,#(_getFonaGPS_c_1_1 + 0x0025)
   0ED7 F0                 4305 	movx	@dptr,a
   0ED8 90s02r27           4306 	mov	dptr,#(_getFonaGPS_c_1_1 + 0x0026)
   0EDB E4                 4307 	clr	a
   0EDC F0                 4308 	movx	@dptr,a
   0EDD 90s02r28           4309 	mov	dptr,#(_getFonaGPS_c_1_1 + 0x0027)
   0EE0 F0                 4310 	movx	@dptr,a
   0EE1 90s02r29           4311 	mov	dptr,#(_getFonaGPS_c_1_1 + 0x0028)
   0EE4 F0                 4312 	movx	@dptr,a
   0EE5 90s02r2A           4313 	mov	dptr,#(_getFonaGPS_c_1_1 + 0x0029)
   0EE8 F0                 4314 	movx	@dptr,a
   0EE9 90s02r2B           4315 	mov	dptr,#(_getFonaGPS_c_1_1 + 0x002a)
   0EEC E4                 4316 	clr	a
   0EED F0                 4317 	movx	@dptr,a
   0EEE 90s02r2C           4318 	mov	dptr,#(_getFonaGPS_c_1_1 + 0x002b)
   0EF1 F0                 4319 	movx	@dptr,a
   0EF2 90s02r2D           4320 	mov	dptr,#(_getFonaGPS_c_1_1 + 0x002c)
   0EF5 F0                 4321 	movx	@dptr,a
   0EF6 90s02r2E           4322 	mov	dptr,#(_getFonaGPS_c_1_1 + 0x002d)
   0EF9 F0                 4323 	movx	@dptr,a
   0EFA 90s02r2F           4324 	mov	dptr,#(_getFonaGPS_c_1_1 + 0x002e)
   0EFD E4                 4325 	clr	a
   0EFE F0                 4326 	movx	@dptr,a
   0EFF 90s02r30           4327 	mov	dptr,#(_getFonaGPS_c_1_1 + 0x002f)
   0F02 F0                 4328 	movx	@dptr,a
   0F03 90s02r31           4329 	mov	dptr,#(_getFonaGPS_c_1_1 + 0x0030)
   0F06 F0                 4330 	movx	@dptr,a
   0F07 90s02r32           4331 	mov	dptr,#(_getFonaGPS_c_1_1 + 0x0031)
   0F0A F0                 4332 	movx	@dptr,a
   0F0B 90s02r33           4333 	mov	dptr,#(_getFonaGPS_c_1_1 + 0x0032)
   0F0E E4                 4334 	clr	a
   0F0F F0                 4335 	movx	@dptr,a
   0F10 90s02r34           4336 	mov	dptr,#(_getFonaGPS_c_1_1 + 0x0033)
   0F13 F0                 4337 	movx	@dptr,a
   0F14 90s02r35           4338 	mov	dptr,#(_getFonaGPS_c_1_1 + 0x0034)
   0F17 F0                 4339 	movx	@dptr,a
   0F18 90s02r36           4340 	mov	dptr,#(_getFonaGPS_c_1_1 + 0x0035)
   0F1B F0                 4341 	movx	@dptr,a
   0F1C 90s02r37           4342 	mov	dptr,#(_getFonaGPS_c_1_1 + 0x0036)
   0F1F E4                 4343 	clr	a
   0F20 F0                 4344 	movx	@dptr,a
   0F21 90s02r38           4345 	mov	dptr,#(_getFonaGPS_c_1_1 + 0x0037)
   0F24 F0                 4346 	movx	@dptr,a
   0F25 90s02r39           4347 	mov	dptr,#(_getFonaGPS_c_1_1 + 0x0038)
   0F28 F0                 4348 	movx	@dptr,a
   0F29 90s02r3A           4349 	mov	dptr,#(_getFonaGPS_c_1_1 + 0x0039)
   0F2C F0                 4350 	movx	@dptr,a
   0F2D 90s02r3B           4351 	mov	dptr,#(_getFonaGPS_c_1_1 + 0x003a)
   0F30 E4                 4352 	clr	a
   0F31 F0                 4353 	movx	@dptr,a
   0F32 90s02r3C           4354 	mov	dptr,#(_getFonaGPS_c_1_1 + 0x003b)
   0F35 F0                 4355 	movx	@dptr,a
   0F36 90s02r3D           4356 	mov	dptr,#(_getFonaGPS_c_1_1 + 0x003c)
   0F39 F0                 4357 	movx	@dptr,a
   0F3A 90s02r3E           4358 	mov	dptr,#(_getFonaGPS_c_1_1 + 0x003d)
   0F3D F0                 4359 	movx	@dptr,a
   0F3E 90s02r3F           4360 	mov	dptr,#(_getFonaGPS_c_1_1 + 0x003e)
   0F41 E4                 4361 	clr	a
   0F42 F0                 4362 	movx	@dptr,a
   0F43 90s02r40           4363 	mov	dptr,#(_getFonaGPS_c_1_1 + 0x003f)
   0F46 F0                 4364 	movx	@dptr,a
   0F47 90s02r41           4365 	mov	dptr,#(_getFonaGPS_c_1_1 + 0x0040)
   0F4A F0                 4366 	movx	@dptr,a
   0F4B 90s02r42           4367 	mov	dptr,#(_getFonaGPS_c_1_1 + 0x0041)
   0F4E F0                 4368 	movx	@dptr,a
   0F4F 90s02r43           4369 	mov	dptr,#(_getFonaGPS_c_1_1 + 0x0042)
   0F52 E4                 4370 	clr	a
   0F53 F0                 4371 	movx	@dptr,a
   0F54 90s02r44           4372 	mov	dptr,#(_getFonaGPS_c_1_1 + 0x0043)
   0F57 F0                 4373 	movx	@dptr,a
   0F58 90s02r45           4374 	mov	dptr,#(_getFonaGPS_c_1_1 + 0x0044)
   0F5B F0                 4375 	movx	@dptr,a
   0F5C 90s02r46           4376 	mov	dptr,#(_getFonaGPS_c_1_1 + 0x0045)
   0F5F F0                 4377 	movx	@dptr,a
   0F60 90s02r47           4378 	mov	dptr,#(_getFonaGPS_c_1_1 + 0x0046)
   0F63 E4                 4379 	clr	a
   0F64 F0                 4380 	movx	@dptr,a
   0F65 90s02r48           4381 	mov	dptr,#(_getFonaGPS_c_1_1 + 0x0047)
   0F68 F0                 4382 	movx	@dptr,a
   0F69 90s02r49           4383 	mov	dptr,#(_getFonaGPS_c_1_1 + 0x0048)
   0F6C F0                 4384 	movx	@dptr,a
   0F6D 90s02r4A           4385 	mov	dptr,#(_getFonaGPS_c_1_1 + 0x0049)
   0F70 F0                 4386 	movx	@dptr,a
   0F71 90s02r4B           4387 	mov	dptr,#(_getFonaGPS_c_1_1 + 0x004a)
   0F74 E4                 4388 	clr	a
   0F75 F0                 4389 	movx	@dptr,a
   0F76 90s02r4C           4390 	mov	dptr,#(_getFonaGPS_c_1_1 + 0x004b)
   0F79 F0                 4391 	movx	@dptr,a
   0F7A 90s02r4D           4392 	mov	dptr,#(_getFonaGPS_c_1_1 + 0x004c)
   0F7D F0                 4393 	movx	@dptr,a
   0F7E 90s02r4E           4394 	mov	dptr,#(_getFonaGPS_c_1_1 + 0x004d)
   0F81 F0                 4395 	movx	@dptr,a
   0F82 90s02r4F           4396 	mov	dptr,#(_getFonaGPS_c_1_1 + 0x004e)
   0F85 E4                 4397 	clr	a
   0F86 F0                 4398 	movx	@dptr,a
   0F87 90s02r50           4399 	mov	dptr,#(_getFonaGPS_c_1_1 + 0x004f)
   0F8A F0                 4400 	movx	@dptr,a
                    0F8B   4401 	C$mdrip.c$489$1$1 ==.
                           4402 ;	apps/mdrip/mdrip.c:489: strcpy(atString, "AT+CDNSCFG=8.8.8.8\r\n"); sendAT(atString);					// Using google for DNS here - you can replace if you like!
   0F8B 78r00              4403 	mov	r0,#_strcpy_PARM_2
   0F8D 74r07              4404 	mov	a,#__str_21
   0F8F F2                 4405 	movx	@r0,a
   0F90 08                 4406 	inc	r0
   0F91 74s01              4407 	mov	a,#(__str_21 >> 8)
   0F93 F2                 4408 	movx	@r0,a
   0F94 08                 4409 	inc	r0
   0F95 74 80              4410 	mov	a,#0x80
   0F97 F2                 4411 	movx	@r0,a
   0F98 90s01rD9           4412 	mov	dptr,#_getFonaGPS_atString_1_1
   0F9B 75 F0 00           4413 	mov	b,#0x00
   0F9E 12s00r00           4414 	lcall	_strcpy
   0FA1 90s01rD9           4415 	mov	dptr,#_getFonaGPS_atString_1_1
   0FA4 12s04rF9           4416 	lcall	_sendAT
                    0FA7   4417 	C$mdrip.c$490$1$1 ==.
                           4418 ;	apps/mdrip/mdrip.c:490: strcpy(atString, "AT+SAPBR=0,1\r\n"); sendAT(atString);							// Not sure if I need this one
   0FA7 78r00              4419 	mov	r0,#_strcpy_PARM_2
   0FA9 74r1C              4420 	mov	a,#__str_22
   0FAB F2                 4421 	movx	@r0,a
   0FAC 08                 4422 	inc	r0
   0FAD 74s01              4423 	mov	a,#(__str_22 >> 8)
   0FAF F2                 4424 	movx	@r0,a
   0FB0 08                 4425 	inc	r0
   0FB1 74 80              4426 	mov	a,#0x80
   0FB3 F2                 4427 	movx	@r0,a
   0FB4 90s01rD9           4428 	mov	dptr,#_getFonaGPS_atString_1_1
   0FB7 75 F0 00           4429 	mov	b,#0x00
   0FBA 12s00r00           4430 	lcall	_strcpy
   0FBD 90s01rD9           4431 	mov	dptr,#_getFonaGPS_atString_1_1
   0FC0 12s04rF9           4432 	lcall	_sendAT
                    0FC3   4433 	C$mdrip.c$491$1$1 ==.
                           4434 ;	apps/mdrip/mdrip.c:491: strcpy(atString, "AT+SAPBR=3,1,\"Contype\",GPRS\r\n"); sendAT(atString);
   0FC3 78r00              4435 	mov	r0,#_strcpy_PARM_2
   0FC5 74r2B              4436 	mov	a,#__str_23
   0FC7 F2                 4437 	movx	@r0,a
   0FC8 08                 4438 	inc	r0
   0FC9 74s01              4439 	mov	a,#(__str_23 >> 8)
   0FCB F2                 4440 	movx	@r0,a
   0FCC 08                 4441 	inc	r0
   0FCD 74 80              4442 	mov	a,#0x80
   0FCF F2                 4443 	movx	@r0,a
   0FD0 90s01rD9           4444 	mov	dptr,#_getFonaGPS_atString_1_1
   0FD3 75 F0 00           4445 	mov	b,#0x00
   0FD6 12s00r00           4446 	lcall	_strcpy
   0FD9 90s01rD9           4447 	mov	dptr,#_getFonaGPS_atString_1_1
   0FDC 12s04rF9           4448 	lcall	_sendAT
                    0FDF   4449 	C$mdrip.c$497$1$1 ==.
                           4450 ;	apps/mdrip/mdrip.c:497: strcpy(atString, "AT+SAPBR=3,1,\"APN\",\"internet\"\r\n"); sendAT(atString);
   0FDF 78r00              4451 	mov	r0,#_strcpy_PARM_2
   0FE1 74r49              4452 	mov	a,#__str_24
   0FE3 F2                 4453 	movx	@r0,a
   0FE4 08                 4454 	inc	r0
   0FE5 74s01              4455 	mov	a,#(__str_24 >> 8)
   0FE7 F2                 4456 	movx	@r0,a
   0FE8 08                 4457 	inc	r0
   0FE9 74 80              4458 	mov	a,#0x80
   0FEB F2                 4459 	movx	@r0,a
   0FEC 90s01rD9           4460 	mov	dptr,#_getFonaGPS_atString_1_1
   0FEF 75 F0 00           4461 	mov	b,#0x00
   0FF2 12s00r00           4462 	lcall	_strcpy
   0FF5 90s01rD9           4463 	mov	dptr,#_getFonaGPS_atString_1_1
   0FF8 12s04rF9           4464 	lcall	_sendAT
                    0FFB   4465 	C$mdrip.c$514$1$1 ==.
                           4466 ;	apps/mdrip/mdrip.c:514: strcpy(atString, "AT+SAPBR=1,1\r\n"); sendAT(atString);
   0FFB 78r00              4467 	mov	r0,#_strcpy_PARM_2
   0FFD 74r69              4468 	mov	a,#__str_25
   0FFF F2                 4469 	movx	@r0,a
   1000 08                 4470 	inc	r0
   1001 74s01              4471 	mov	a,#(__str_25 >> 8)
   1003 F2                 4472 	movx	@r0,a
   1004 08                 4473 	inc	r0
   1005 74 80              4474 	mov	a,#0x80
   1007 F2                 4475 	movx	@r0,a
   1008 90s01rD9           4476 	mov	dptr,#_getFonaGPS_atString_1_1
   100B 75 F0 00           4477 	mov	b,#0x00
   100E 12s00r00           4478 	lcall	_strcpy
   1011 90s01rD9           4479 	mov	dptr,#_getFonaGPS_atString_1_1
   1014 12s04rF9           4480 	lcall	_sendAT
                    1017   4481 	C$mdrip.c$516$1$1 ==.
                           4482 ;	apps/mdrip/mdrip.c:516: strcpy(atString, "AT+CIPGSMLOC=1,1\r\n");
   1017 78r00              4483 	mov	r0,#_strcpy_PARM_2
   1019 74r78              4484 	mov	a,#__str_26
   101B F2                 4485 	movx	@r0,a
   101C 08                 4486 	inc	r0
   101D 74s01              4487 	mov	a,#(__str_26 >> 8)
   101F F2                 4488 	movx	@r0,a
   1020 08                 4489 	inc	r0
   1021 74 80              4490 	mov	a,#0x80
   1023 F2                 4491 	movx	@r0,a
   1024 90s01rD9           4492 	mov	dptr,#_getFonaGPS_atString_1_1
   1027 75 F0 00           4493 	mov	b,#0x00
   102A 12s00r00           4494 	lcall	_strcpy
                    102D   4495 	C$mdrip.c$517$1$1 ==.
                           4496 ;	apps/mdrip/mdrip.c:517: printf(atString);
   102D 74rD9              4497 	mov	a,#_getFonaGPS_atString_1_1
   102F C0 E0              4498 	push	acc
   1031 74s01              4499 	mov	a,#(_getFonaGPS_atString_1_1 >> 8)
   1033 C0 E0              4500 	push	acc
   1035 E4                 4501 	clr	a
   1036 C0 E0              4502 	push	acc
   1038 12s00r00           4503 	lcall	_printf
   103B 15 81              4504 	dec	sp
   103D 15 81              4505 	dec	sp
   103F 15 81              4506 	dec	sp
                    1041   4507 	C$mdrip.c$519$1$1 ==.
                           4508 ;	apps/mdrip/mdrip.c:519: strcpy(c, getFonaString());		// I don't know if this is working - seem to be blanks if I don't muck about with responseStr
   1041 12s03rBF           4509 	lcall	_getFonaString
   1044 AC 82              4510 	mov	r4,dpl
   1046 AD 83              4511 	mov	r5,dph
   1048 78r00              4512 	mov	r0,#_strcpy_PARM_2
   104A EC                 4513 	mov	a,r4
   104B F2                 4514 	movx	@r0,a
   104C 08                 4515 	inc	r0
   104D ED                 4516 	mov	a,r5
   104E F2                 4517 	movx	@r0,a
   104F 08                 4518 	inc	r0
   1050 E4                 4519 	clr	a
   1051 F2                 4520 	movx	@r0,a
   1052 90s02r01           4521 	mov	dptr,#_getFonaGPS_c_1_1
   1055 75 F0 00           4522 	mov	b,#0x00
   1058 12s00r00           4523 	lcall	_strcpy
                    105B   4524 	C$mdrip.c$520$1$1 ==.
                           4525 ;	apps/mdrip/mdrip.c:520: clen=strlen(c);
   105B 90s02r01           4526 	mov	dptr,#_getFonaGPS_c_1_1
   105E 75 F0 00           4527 	mov	b,#0x00
   1061 12s00r00           4528 	lcall	_strlen
   1064 AC 82              4529 	mov	r4,dpl
                    1066   4530 	C$mdrip.c$522$1$1 ==.
                           4531 ;	apps/mdrip/mdrip.c:522: stage = 1;												//	Start with scanning for "+CIPGSMLOC: "
   1066 90s01rD2           4532 	mov	dptr,#_getFonaGPS_stage_1_1
   1069 74 01              4533 	mov	a,#0x01
   106B F0                 4534 	movx	@dptr,a
                    106C   4535 	C$mdrip.c$523$1$1 ==.
                           4536 ;	apps/mdrip/mdrip.c:523: j=0;
   106C 90s01rD1           4537 	mov	dptr,#_getFonaGPS_j_1_1
                    106F   4538 	C$mdrip.c$524$1$1 ==.
                           4539 ;	apps/mdrip/mdrip.c:524: for(i=0; i<clen; i++) {									//	Loop through every character of the response from the Fona to the AT command
   106F E4                 4540 	clr	a
   1070 F0                 4541 	movx	@dptr,a
   1071 90s01rD0           4542 	mov	dptr,#_getFonaGPS_i_1_1
   1074 F0                 4543 	movx	@dptr,a
   1075 78r45              4544 	mov	r0,#_getFonaGPS_CIPGSMLOC_1_1
   1077 E2                 4545 	movx	a,@r0
   1078 24 19              4546 	add	a,#0x19
   107A FB                 4547 	mov	r3,a
   107B 08                 4548 	inc	r0
   107C E2                 4549 	movx	a,@r0
   107D 34 00              4550 	addc	a,#0x00
   107F FD                 4551 	mov	r5,a
   1080                    4552 00137$:
   1080 90s01rD0           4553 	mov	dptr,#_getFonaGPS_i_1_1
   1083 E0                 4554 	movx	a,@dptr
   1084 FA                 4555 	mov	r2,a
   1085 C3                 4556 	clr	c
   1086 9C                 4557 	subb	a,r4
   1087 40 03              4558 	jc	00170$
   1089 02s12rD1           4559 	ljmp	00140$
   108C                    4560 00170$:
                    108C   4561 	C$mdrip.c$526$2$2 ==.
                           4562 ;	apps/mdrip/mdrip.c:526: if (stage == 1) {									//	Stage 1 - Find the '+' sign
   108C 90s01rD2           4563 	mov	dptr,#_getFonaGPS_stage_1_1
   108F E0                 4564 	movx	a,@dptr
   1090 F5*06              4565 	mov	_getFonaGPS_sloc0_1_0,a
   1092 74 01              4566 	mov	a,#0x01
   1094 B5*06 32           4567 	cjne	a,_getFonaGPS_sloc0_1_0,00104$
                    1097   4568 	C$mdrip.c$527$2$1 ==.
                           4569 ;	apps/mdrip/mdrip.c:527: if (c[i]=='+') {								//	Seemingly valid CIPGSMLOC response
   1097 C0 03              4570 	push	ar3
   1099 C0 05              4571 	push	ar5
   109B EA                 4572 	mov	a,r2
   109C 24r01              4573 	add	a,#_getFonaGPS_c_1_1
   109E F5 82              4574 	mov	dpl,a
   10A0 E4                 4575 	clr	a
   10A1 34s02              4576 	addc	a,#(_getFonaGPS_c_1_1 >> 8)
   10A3 F5 83              4577 	mov	dph,a
   10A5 E0                 4578 	movx	a,@dptr
   10A6 FD                 4579 	mov	r5,a
   10A7 BD 2B 02           4580 	cjne	r5,#0x2B,00173$
   10AA 80 06              4581 	sjmp	00174$
   10AC                    4582 00173$:
   10AC D0 05              4583 	pop	ar5
   10AE D0 03              4584 	pop	ar3
   10B0 80 17              4585 	sjmp	00104$
   10B2                    4586 00174$:
   10B2 D0 05              4587 	pop	ar5
   10B4 D0 03              4588 	pop	ar3
                    10B6   4589 	C$mdrip.c$528$4$4 ==.
                           4590 ;	apps/mdrip/mdrip.c:528: i=i+12;										//	Position index to start of status field
   10B6 90s01rD0           4591 	mov	dptr,#_getFonaGPS_i_1_1
   10B9 74 0C              4592 	mov	a,#0x0C
   10BB 2A                 4593 	add	a,r2
   10BC F0                 4594 	movx	@dptr,a
                    10BD   4595 	C$mdrip.c$529$4$4 ==.
                           4596 ;	apps/mdrip/mdrip.c:529: stage++;									//	Finish this stage of string processing and get ready for the next one
   10BD 90s01rD2           4597 	mov	dptr,#_getFonaGPS_stage_1_1
   10C0 E5*06              4598 	mov	a,_getFonaGPS_sloc0_1_0
   10C2 04                 4599 	inc	a
   10C3 F0                 4600 	movx	@dptr,a
                    10C4   4601 	C$mdrip.c$530$4$4 ==.
                           4602 ;	apps/mdrip/mdrip.c:530: j=0;
   10C4 90s01rD1           4603 	mov	dptr,#_getFonaGPS_j_1_1
   10C7 E4                 4604 	clr	a
   10C8 F0                 4605 	movx	@dptr,a
   10C9                    4606 00104$:
                    10C9   4607 	C$mdrip.c$533$2$2 ==.
                           4608 ;	apps/mdrip/mdrip.c:533: if (stage == 2) {									//	Stage 2 - Get the status of the command
   10C9 90s01rD2           4609 	mov	dptr,#_getFonaGPS_stage_1_1
   10CC E0                 4610 	movx	a,@dptr
   10CD FA                 4611 	mov	r2,a
   10CE BA 02 02           4612 	cjne	r2,#0x02,00175$
   10D1 80 03              4613 	sjmp	00176$
   10D3                    4614 00175$:
   10D3 02s11r5A           4615 	ljmp	00112$
   10D6                    4616 00176$:
                    10D6   4617 	C$mdrip.c$534$3$5 ==.
                           4618 ;	apps/mdrip/mdrip.c:534: if (c[i]==',') {
   10D6 90s01rD0           4619 	mov	dptr,#_getFonaGPS_i_1_1
   10D9 E0                 4620 	movx	a,@dptr
   10DA F5*06              4621 	mov	_getFonaGPS_sloc0_1_0,a
   10DC 24r01              4622 	add	a,#_getFonaGPS_c_1_1
   10DE F5 82              4623 	mov	dpl,a
   10E0 E4                 4624 	clr	a
   10E1 34s02              4625 	addc	a,#(_getFonaGPS_c_1_1 >> 8)
   10E3 F5 83              4626 	mov	dph,a
   10E5 E0                 4627 	movx	a,@dptr
   10E6 F5*07              4628 	mov	_getFonaGPS_sloc1_1_0,a
   10E8 74 2C              4629 	mov	a,#0x2C
   10EA B5*07 56           4630 	cjne	a,_getFonaGPS_sloc1_1_0,00109$
                    10ED   4631 	C$mdrip.c$535$2$1 ==.
                           4632 ;	apps/mdrip/mdrip.c:535: status[j]=0;								//	We have all of the status so terminate the string
   10ED C0 03              4633 	push	ar3
   10EF C0 05              4634 	push	ar5
   10F1 90s01rD1           4635 	mov	dptr,#_getFonaGPS_j_1_1
   10F4 E0                 4636 	movx	a,@dptr
   10F5 24rD3              4637 	add	a,#_getFonaGPS_status_1_1
   10F7 F5 82              4638 	mov	dpl,a
   10F9 E4                 4639 	clr	a
   10FA 34s01              4640 	addc	a,#(_getFonaGPS_status_1_1 >> 8)
   10FC F5 83              4641 	mov	dph,a
   10FE E4                 4642 	clr	a
   10FF F0                 4643 	movx	@dptr,a
                    1100   4644 	C$mdrip.c$536$4$6 ==.
                           4645 ;	apps/mdrip/mdrip.c:536: if (strlen(status) == 1) {					//	If staus is 0 then move to next stage
   1100 90s01rD3           4646 	mov	dptr,#_getFonaGPS_status_1_1
   1103 75 F0 00           4647 	mov	b,#0x00
   1106 C0 04              4648 	push	ar4
   1108 C0 02              4649 	push	ar2
   110A 12s00r00           4650 	lcall	_strlen
   110D AB 82              4651 	mov	r3,dpl
   110F AD 83              4652 	mov	r5,dph
   1111 D0 02              4653 	pop	ar2
   1113 D0 04              4654 	pop	ar4
   1115 BB 01 05           4655 	cjne	r3,#0x01,00179$
   1118 BD 00 02           4656 	cjne	r5,#0x00,00179$
   111B 80 06              4657 	sjmp	00180$
   111D                    4658 00179$:
   111D D0 05              4659 	pop	ar5
   111F D0 03              4660 	pop	ar3
   1121 80 18              4661 	sjmp	00106$
   1123                    4662 00180$:
   1123 D0 05              4663 	pop	ar5
   1125 D0 03              4664 	pop	ar3
                    1127   4665 	C$mdrip.c$537$5$7 ==.
                           4666 ;	apps/mdrip/mdrip.c:537: i++;									//	Skip past this comma before starting Stage 3
   1127 90s01rD0           4667 	mov	dptr,#_getFonaGPS_i_1_1
   112A E5*06              4668 	mov	a,_getFonaGPS_sloc0_1_0
   112C 04                 4669 	inc	a
   112D F0                 4670 	movx	@dptr,a
                    112E   4671 	C$mdrip.c$538$5$7 ==.
                           4672 ;	apps/mdrip/mdrip.c:538: stage++;								//	Finish this stage of string processing and get ready for the next one
   112E 90s01rD2           4673 	mov	dptr,#_getFonaGPS_stage_1_1
   1131 EA                 4674 	mov	a,r2
   1132 04                 4675 	inc	a
   1133 F0                 4676 	movx	@dptr,a
                    1134   4677 	C$mdrip.c$539$5$7 ==.
                           4678 ;	apps/mdrip/mdrip.c:539: j=0;
   1134 90s01rD1           4679 	mov	dptr,#_getFonaGPS_j_1_1
   1137 E4                 4680 	clr	a
   1138 F0                 4681 	movx	@dptr,a
   1139 80 1F              4682 	sjmp	00112$
   113B                    4683 00106$:
                    113B   4684 	C$mdrip.c$541$5$8 ==.
                           4685 ;	apps/mdrip/mdrip.c:541: stage=9;								//	Flag that we are complete as we got an error
   113B 90s01rD2           4686 	mov	dptr,#_getFonaGPS_stage_1_1
   113E 74 09              4687 	mov	a,#0x09
   1140 F0                 4688 	movx	@dptr,a
   1141 80 17              4689 	sjmp	00112$
   1143                    4690 00109$:
                    1143   4691 	C$mdrip.c$544$4$9 ==.
                           4692 ;	apps/mdrip/mdrip.c:544: status[j]=c[i];								//	Copy into the status variable, one character at a time
   1143 90s01rD1           4693 	mov	dptr,#_getFonaGPS_j_1_1
   1146 E0                 4694 	movx	a,@dptr
   1147 FA                 4695 	mov	r2,a
   1148 24rD3              4696 	add	a,#_getFonaGPS_status_1_1
   114A F5 82              4697 	mov	dpl,a
   114C E4                 4698 	clr	a
   114D 34s01              4699 	addc	a,#(_getFonaGPS_status_1_1 >> 8)
   114F F5 83              4700 	mov	dph,a
   1151 E5*07              4701 	mov	a,_getFonaGPS_sloc1_1_0
   1153 F0                 4702 	movx	@dptr,a
                    1154   4703 	C$mdrip.c$545$4$9 ==.
                           4704 ;	apps/mdrip/mdrip.c:545: j++;
   1154 90s01rD1           4705 	mov	dptr,#_getFonaGPS_j_1_1
   1157 EA                 4706 	mov	a,r2
   1158 04                 4707 	inc	a
   1159 F0                 4708 	movx	@dptr,a
   115A                    4709 00112$:
                    115A   4710 	C$mdrip.c$554$2$2 ==.
                           4711 ;	apps/mdrip/mdrip.c:554: if (stage == 3) {									//	Stage 3 - Get the GPS coordinates and place them in the pointered string
   115A 90s01rD2           4712 	mov	dptr,#_getFonaGPS_stage_1_1
   115D E0                 4713 	movx	a,@dptr
   115E FA                 4714 	mov	r2,a
   115F BA 03 02           4715 	cjne	r2,#0x03,00181$
   1162 80 03              4716 	sjmp	00182$
   1164                    4717 00181$:
   1164 02s11rE9           4718 	ljmp	00118$
   1167                    4719 00182$:
                    1167   4720 	C$mdrip.c$555$2$1 ==.
                           4721 ;	apps/mdrip/mdrip.c:555: if (c[i]==',' && j> 11) {						//	Check if we found the second comma in the longitude/latitude
   1167 C0 03              4722 	push	ar3
   1169 C0 05              4723 	push	ar5
   116B 90s01rD0           4724 	mov	dptr,#_getFonaGPS_i_1_1
   116E E0                 4725 	movx	a,@dptr
   116F F5*07              4726 	mov	_getFonaGPS_sloc1_1_0,a
   1171 24r01              4727 	add	a,#_getFonaGPS_c_1_1
   1173 F5 82              4728 	mov	dpl,a
   1175 E4                 4729 	clr	a
   1176 34s02              4730 	addc	a,#(_getFonaGPS_c_1_1 >> 8)
   1178 F5 83              4731 	mov	dph,a
   117A E0                 4732 	movx	a,@dptr
   117B FD                 4733 	mov	r5,a
   117C BD 2C 02           4734 	cjne	r5,#0x2C,00183$
   117F 80 06              4735 	sjmp	00184$
   1181                    4736 00183$:
   1181 D0 05              4737 	pop	ar5
   1183 D0 03              4738 	pop	ar3
   1185 80 31              4739 	sjmp	00114$
   1187                    4740 00184$:
   1187 D0 05              4741 	pop	ar5
   1189 D0 03              4742 	pop	ar3
   118B 90s01rD1           4743 	mov	dptr,#_getFonaGPS_j_1_1
   118E E0                 4744 	movx	a,@dptr
   118F F5*06              4745 	mov  _getFonaGPS_sloc0_1_0,a
   1191 24 F4              4746 	add	a,#0xff - 0x0B
   1193 50 23              4747 	jnc	00114$
                    1195   4748 	C$mdrip.c$557$4$11 ==.
                           4749 ;	apps/mdrip/mdrip.c:557: CIPGSMLOC->LatLong[j]='\0';
   1195 78r45              4750 	mov	r0,#_getFonaGPS_CIPGSMLOC_1_1
   1197 E2                 4751 	movx	a,@r0
   1198 25*06              4752 	add	a,_getFonaGPS_sloc0_1_0
   119A F5 82              4753 	mov	dpl,a
   119C 08                 4754 	inc	r0
   119D E2                 4755 	movx	a,@r0
   119E 34 00              4756 	addc	a,#0x00
   11A0 F5 83              4757 	mov	dph,a
   11A2 E4                 4758 	clr	a
   11A3 F0                 4759 	movx	@dptr,a
                    11A4   4760 	C$mdrip.c$558$4$11 ==.
                           4761 ;	apps/mdrip/mdrip.c:558: i++;										//	Skip past this comma before starting stage 4
   11A4 90s01rD0           4762 	mov	dptr,#_getFonaGPS_i_1_1
   11A7 E5*07              4763 	mov	a,_getFonaGPS_sloc1_1_0
   11A9 04                 4764 	inc	a
   11AA F0                 4765 	movx	@dptr,a
                    11AB   4766 	C$mdrip.c$559$4$11 ==.
                           4767 ;	apps/mdrip/mdrip.c:559: stage++;									//	Finish this stage of string processing and get ready for the next one
   11AB 90s01rD2           4768 	mov	dptr,#_getFonaGPS_stage_1_1
   11AE EA                 4769 	mov	a,r2
   11AF 04                 4770 	inc	a
   11B0 F0                 4771 	movx	@dptr,a
                    11B1   4772 	C$mdrip.c$560$4$11 ==.
                           4773 ;	apps/mdrip/mdrip.c:560: j=0;
   11B1 90s01rD1           4774 	mov	dptr,#_getFonaGPS_j_1_1
   11B4 E4                 4775 	clr	a
   11B5 F0                 4776 	movx	@dptr,a
   11B6 80 31              4777 	sjmp	00118$
   11B8                    4778 00114$:
                    11B8   4779 	C$mdrip.c$563$2$1 ==.
                           4780 ;	apps/mdrip/mdrip.c:563: CIPGSMLOC->LatLong[j]=c[i];
   11B8 C0 03              4781 	push	ar3
   11BA C0 05              4782 	push	ar5
   11BC 90s01rD1           4783 	mov	dptr,#_getFonaGPS_j_1_1
   11BF E0                 4784 	movx	a,@dptr
   11C0 FA                 4785 	mov	r2,a
   11C1 78r45              4786 	mov	r0,#_getFonaGPS_CIPGSMLOC_1_1
   11C3 E2                 4787 	movx	a,@r0
   11C4 2A                 4788 	add	a,r2
   11C5 FB                 4789 	mov	r3,a
   11C6 08                 4790 	inc	r0
   11C7 E2                 4791 	movx	a,@r0
   11C8 34 00              4792 	addc	a,#0x00
   11CA FD                 4793 	mov	r5,a
   11CB 90s01rD0           4794 	mov	dptr,#_getFonaGPS_i_1_1
   11CE E0                 4795 	movx	a,@dptr
   11CF 24r01              4796 	add	a,#_getFonaGPS_c_1_1
   11D1 F5 82              4797 	mov	dpl,a
   11D3 E4                 4798 	clr	a
   11D4 34s02              4799 	addc	a,#(_getFonaGPS_c_1_1 >> 8)
   11D6 F5 83              4800 	mov	dph,a
   11D8 E0                 4801 	movx	a,@dptr
   11D9 FF                 4802 	mov	r7,a
   11DA 8B 82              4803 	mov	dpl,r3
   11DC 8D 83              4804 	mov	dph,r5
   11DE F0                 4805 	movx	@dptr,a
                    11DF   4806 	C$mdrip.c$566$4$12 ==.
                           4807 ;	apps/mdrip/mdrip.c:566: j++;
   11DF 90s01rD1           4808 	mov	dptr,#_getFonaGPS_j_1_1
   11E2 EA                 4809 	mov	a,r2
   11E3 04                 4810 	inc	a
   11E4 F0                 4811 	movx	@dptr,a
                    11E5   4812 	C$mdrip.c$610$2$1 ==.
                           4813 ;	apps/mdrip/mdrip.c:610: CIPGSMLOC->returncode=clen;
   11E5 D0 05              4814 	pop	ar5
   11E7 D0 03              4815 	pop	ar3
                    11E9   4816 	C$mdrip.c$566$2$2 ==.
                           4817 ;	apps/mdrip/mdrip.c:566: j++;
   11E9                    4818 00118$:
                    11E9   4819 	C$mdrip.c$570$2$2 ==.
                           4820 ;	apps/mdrip/mdrip.c:570: if (stage == 4) {									//	Stage 4 - Use the Date & Time to populate the first 14 bytes of the IV
   11E9 90s01rD2           4821 	mov	dptr,#_getFonaGPS_stage_1_1
   11EC E0                 4822 	movx	a,@dptr
   11ED FF                 4823 	mov	r7,a
   11EE BF 04 02           4824 	cjne	r7,#0x04,00186$
   11F1 80 03              4825 	sjmp	00187$
   11F3                    4826 00186$:
   11F3 02s12r6E           4827 	ljmp	00126$
   11F6                    4828 00187$:
                    11F6   4829 	C$mdrip.c$571$3$13 ==.
                           4830 ;	apps/mdrip/mdrip.c:571: if(c[i]<'0') {
   11F6 90s01rD0           4831 	mov	dptr,#_getFonaGPS_i_1_1
   11F9 E0                 4832 	movx	a,@dptr
   11FA FF                 4833 	mov	r7,a
   11FB 24r01              4834 	add	a,#_getFonaGPS_c_1_1
   11FD F5 82              4835 	mov	dpl,a
   11FF E4                 4836 	clr	a
   1200 34s02              4837 	addc	a,#(_getFonaGPS_c_1_1 >> 8)
   1202 F5 83              4838 	mov	dph,a
   1204 E0                 4839 	movx	a,@dptr
   1205 FE                 4840 	mov	r6,a
   1206 C3                 4841 	clr	c
   1207 64 80              4842 	xrl	a,#0x80
   1209 94 B0              4843 	subb	a,#0xb0
   120B 50 06              4844 	jnc	00120$
                    120D   4845 	C$mdrip.c$572$4$14 ==.
                           4846 ;	apps/mdrip/mdrip.c:572: i++;									// NEW	//	Skip the special character and assume next one is a number
   120D 90s01rD0           4847 	mov	dptr,#_getFonaGPS_i_1_1
   1210 EF                 4848 	mov	a,r7
   1211 04                 4849 	inc	a
   1212 F0                 4850 	movx	@dptr,a
   1213                    4851 00120$:
                    1213   4852 	C$mdrip.c$574$3$13 ==.
                           4853 ;	apps/mdrip/mdrip.c:574: if(c[i]>'9') {
   1213 90s01rD0           4854 	mov	dptr,#_getFonaGPS_i_1_1
   1216 E0                 4855 	movx	a,@dptr
   1217 FF                 4856 	mov	r7,a
   1218 24r01              4857 	add	a,#_getFonaGPS_c_1_1
   121A F5 82              4858 	mov	dpl,a
   121C E4                 4859 	clr	a
   121D 34s02              4860 	addc	a,#(_getFonaGPS_c_1_1 >> 8)
   121F F5 83              4861 	mov	dph,a
   1221 E0                 4862 	movx	a,@dptr
   1222 FE                 4863 	mov	r6,a
   1223 C3                 4864 	clr	c
   1224 74 B9              4865 	mov	a,#(0x39 ^ 0x80)
   1226 8E F0              4866 	mov	b,r6
   1228 63 F0 80           4867 	xrl	b,#0x80
   122B 95 F0              4868 	subb	a,b
   122D 50 06              4869 	jnc	00122$
                    122F   4870 	C$mdrip.c$575$4$15 ==.
                           4871 ;	apps/mdrip/mdrip.c:575: i++;									// NEW	//	Skip the special character and assume next one is a number
   122F 90s01rD0           4872 	mov	dptr,#_getFonaGPS_i_1_1
   1232 EF                 4873 	mov	a,r7
   1233 04                 4874 	inc	a
   1234 F0                 4875 	movx	@dptr,a
   1235                    4876 00122$:
                    1235   4877 	C$mdrip.c$577$2$1 ==.
                           4878 ;	apps/mdrip/mdrip.c:577: CIPGSMLOC->iv[j]=c[i];
   1235 C0 04              4879 	push	ar4
   1237 90s01rD1           4880 	mov	dptr,#_getFonaGPS_j_1_1
   123A E0                 4881 	movx	a,@dptr
   123B FF                 4882 	mov	r7,a
   123C 2B                 4883 	add	a,r3
   123D FA                 4884 	mov	r2,a
   123E E4                 4885 	clr	a
   123F 3D                 4886 	addc	a,r5
   1240 FE                 4887 	mov	r6,a
   1241 90s01rD0           4888 	mov	dptr,#_getFonaGPS_i_1_1
   1244 E0                 4889 	movx	a,@dptr
   1245 24r01              4890 	add	a,#_getFonaGPS_c_1_1
   1247 F5 82              4891 	mov	dpl,a
   1249 E4                 4892 	clr	a
   124A 34s02              4893 	addc	a,#(_getFonaGPS_c_1_1 >> 8)
   124C F5 83              4894 	mov	dph,a
   124E E0                 4895 	movx	a,@dptr
   124F 8A 82              4896 	mov	dpl,r2
   1251 8E 83              4897 	mov	dph,r6
   1253 F0                 4898 	movx	@dptr,a
                    1254   4899 	C$mdrip.c$580$3$13 ==.
                           4900 ;	apps/mdrip/mdrip.c:580: j++;
   1254 90s01rD1           4901 	mov	dptr,#_getFonaGPS_j_1_1
   1257 EF                 4902 	mov	a,r7
   1258 04                 4903 	inc	a
   1259 F0                 4904 	movx	@dptr,a
                    125A   4905 	C$mdrip.c$581$3$13 ==.
                           4906 ;	apps/mdrip/mdrip.c:581: if(j>13) {
   125A 90s01rD1           4907 	mov	dptr,#_getFonaGPS_j_1_1
   125D E0                 4908 	movx	a,@dptr
   125E FF                 4909 	mov	r7,a
   125F C3                 4910 	clr	c
   1260 74 0D              4911 	mov	a,#0x0D
   1262 9F                 4912 	subb	a,r7
   1263 D0 04              4913 	pop	ar4
   1265 50 07              4914 	jnc	00126$
                    1267   4915 	C$mdrip.c$582$4$16 ==.
                           4916 ;	apps/mdrip/mdrip.c:582: stage++;
   1267 90s01rD2           4917 	mov	dptr,#_getFonaGPS_stage_1_1
   126A E0                 4918 	movx	a,@dptr
   126B 24 01              4919 	add	a,#0x01
   126D F0                 4920 	movx	@dptr,a
   126E                    4921 00126$:
                    126E   4922 	C$mdrip.c$587$2$2 ==.
                           4923 ;	apps/mdrip/mdrip.c:587: if (stage == 9) {									//	Stage 9 - If we are here then Heuston, we have a problem.
   126E 90s01rD2           4924 	mov	dptr,#_getFonaGPS_stage_1_1
   1271 E0                 4925 	movx	a,@dptr
   1272 FF                 4926 	mov	r7,a
   1273 BF 09 47           4927 	cjne	r7,#0x09,00128$
                    1276   4928 	C$mdrip.c$588$3$17 ==.
                           4929 ;	apps/mdrip/mdrip.c:588: for(i=0; i>j; i++) {							//	Re-using i here is not a problem as we will terminate anyway in the next condition
   1276 90s01rD1           4930 	mov	dptr,#_getFonaGPS_j_1_1
   1279 E0                 4931 	movx	a,@dptr
   127A F5*07              4932 	mov	_getFonaGPS_sloc1_1_0,a
   127C 7A 00              4933 	mov	r2,#0x00
   127E                    4934 00133$:
   127E C3                 4935 	clr	c
   127F E5*07              4936 	mov	a,_getFonaGPS_sloc1_1_0
   1281 9A                 4937 	subb	a,r2
   1282 50 26              4938 	jnc	00168$
                    1284   4939 	C$mdrip.c$590$2$1 ==.
                           4940 ;	apps/mdrip/mdrip.c:590: CIPGSMLOC->LatLong[i]=status[i];
   1284 C0 03              4941 	push	ar3
   1286 C0 05              4942 	push	ar5
   1288 78r45              4943 	mov	r0,#_getFonaGPS_CIPGSMLOC_1_1
   128A E2                 4944 	movx	a,@r0
   128B 2A                 4945 	add	a,r2
   128C FB                 4946 	mov	r3,a
   128D 08                 4947 	inc	r0
   128E E2                 4948 	movx	a,@r0
   128F 34 00              4949 	addc	a,#0x00
   1291 FD                 4950 	mov	r5,a
   1292 EA                 4951 	mov	a,r2
   1293 24rD3              4952 	add	a,#_getFonaGPS_status_1_1
   1295 F5 82              4953 	mov	dpl,a
   1297 E4                 4954 	clr	a
   1298 34s01              4955 	addc	a,#(_getFonaGPS_status_1_1 >> 8)
   129A F5 83              4956 	mov	dph,a
   129C E0                 4957 	movx	a,@dptr
   129D FE                 4958 	mov	r6,a
   129E 8B 82              4959 	mov	dpl,r3
   12A0 8D 83              4960 	mov	dph,r5
   12A2 F0                 4961 	movx	@dptr,a
                    12A3   4962 	C$mdrip.c$588$3$17 ==.
                           4963 ;	apps/mdrip/mdrip.c:588: for(i=0; i>j; i++) {							//	Re-using i here is not a problem as we will terminate anyway in the next condition
   12A3 0A                 4964 	inc	r2
   12A4 D0 05              4965 	pop	ar5
   12A6 D0 03              4966 	pop	ar3
   12A8 80 D4              4967 	sjmp	00133$
   12AA                    4968 00168$:
   12AA 90s01rD0           4969 	mov	dptr,#_getFonaGPS_i_1_1
   12AD EA                 4970 	mov	a,r2
   12AE F0                 4971 	movx	@dptr,a
                    12AF   4972 	C$mdrip.c$592$3$17 ==.
                           4973 ;	apps/mdrip/mdrip.c:592: CIPGSMLOC->LatLong[i]='\0';						//	Terminate the copy of the status string
   12AF 78r45              4974 	mov	r0,#_getFonaGPS_CIPGSMLOC_1_1
   12B1 E2                 4975 	movx	a,@r0
   12B2 2A                 4976 	add	a,r2
   12B3 F5 82              4977 	mov	dpl,a
   12B5 08                 4978 	inc	r0
   12B6 E2                 4979 	movx	a,@r0
   12B7 34 00              4980 	addc	a,#0x00
   12B9 F5 83              4981 	mov	dph,a
   12BB E4                 4982 	clr	a
   12BC F0                 4983 	movx	@dptr,a
   12BD                    4984 00128$:
                    12BD   4985 	C$mdrip.c$594$2$2 ==.
                           4986 ;	apps/mdrip/mdrip.c:594: if (stage>4) {										//	Terminate the loop if we are finished all the processing (or have an error)
   12BD EF                 4987 	mov	a,r7
   12BE 24 FB              4988 	add	a,#0xff - 0x04
   12C0 50 05              4989 	jnc	00139$
                    12C2   4990 	C$mdrip.c$595$3$19 ==.
                           4991 ;	apps/mdrip/mdrip.c:595: i=clen;
   12C2 90s01rD0           4992 	mov	dptr,#_getFonaGPS_i_1_1
   12C5 EC                 4993 	mov	a,r4
   12C6 F0                 4994 	movx	@dptr,a
   12C7                    4995 00139$:
                    12C7   4996 	C$mdrip.c$524$1$1 ==.
                           4997 ;	apps/mdrip/mdrip.c:524: for(i=0; i<clen; i++) {									//	Loop through every character of the response from the Fona to the AT command
   12C7 90s01rD0           4998 	mov	dptr,#_getFonaGPS_i_1_1
   12CA E0                 4999 	movx	a,@dptr
   12CB 24 01              5000 	add	a,#0x01
   12CD F0                 5001 	movx	@dptr,a
   12CE 02s10r80           5002 	ljmp	00137$
   12D1                    5003 00140$:
                    12D1   5004 	C$mdrip.c$600$1$1 ==.
                           5005 ;	apps/mdrip/mdrip.c:600: if (stage == 1) {										// If we did not get values then we want to indicate this with a unique error code
   12D1 90s01rD2           5006 	mov	dptr,#_getFonaGPS_stage_1_1
   12D4 E0                 5007 	movx	a,@dptr
   12D5 FF                 5008 	mov	r7,a
   12D6 BF 01 02           5009 	cjne	r7,#0x01,00195$
   12D9 80 03              5010 	sjmp	00196$
   12DB                    5011 00195$:
   12DB 02s13r86           5012 	ljmp	00145$
   12DE                    5013 00196$:
                    12DE   5014 	C$mdrip.c$602$2$20 ==.
                           5015 ;	apps/mdrip/mdrip.c:602: strcpy(CIPGSMLOC->LatLong,"999");
   12DE 78r45              5016 	mov	r0,#_getFonaGPS_CIPGSMLOC_1_1
   12E0 E2                 5017 	movx	a,@r0
   12E1 FE                 5018 	mov	r6,a
   12E2 08                 5019 	inc	r0
   12E3 E2                 5020 	movx	a,@r0
   12E4 FF                 5021 	mov	r7,a
   12E5 7D 00              5022 	mov	r5,#0x00
   12E7 78r00              5023 	mov	r0,#_strcpy_PARM_2
   12E9 74r8B              5024 	mov	a,#__str_27
   12EB F2                 5025 	movx	@r0,a
   12EC 08                 5026 	inc	r0
   12ED 74s01              5027 	mov	a,#(__str_27 >> 8)
   12EF F2                 5028 	movx	@r0,a
   12F0 08                 5029 	inc	r0
   12F1 74 80              5030 	mov	a,#0x80
   12F3 F2                 5031 	movx	@r0,a
   12F4 8E 82              5032 	mov	dpl,r6
   12F6 8F 83              5033 	mov	dph,r7
   12F8 8D F0              5034 	mov	b,r5
   12FA C0 04              5035 	push	ar4
   12FC 12s00r00           5036 	lcall	_strcpy
   12FF D0 04              5037 	pop	ar4
                    1301   5038 	C$mdrip.c$603$2$1 ==.
                           5039 ;	apps/mdrip/mdrip.c:603: for(i=0; i==23; i++) {							//	Re-using i here is not a problem as we will terminate anyway in the next condition
   1301 7F 00              5040 	mov	r7,#0x00
   1303                    5041 00141$:
   1303 BF 17 1E           5042 	cjne	r7,#0x17,00144$
                    1306   5043 	C$mdrip.c$604$3$21 ==.
                           5044 ;	apps/mdrip/mdrip.c:604: CIPGSMLOC->LatLong[i]=c[i];
   1306 78r45              5045 	mov	r0,#_getFonaGPS_CIPGSMLOC_1_1
   1308 E2                 5046 	movx	a,@r0
   1309 2F                 5047 	add	a,r7
   130A FD                 5048 	mov	r5,a
   130B 08                 5049 	inc	r0
   130C E2                 5050 	movx	a,@r0
   130D 34 00              5051 	addc	a,#0x00
   130F FE                 5052 	mov	r6,a
   1310 EF                 5053 	mov	a,r7
   1311 24r01              5054 	add	a,#_getFonaGPS_c_1_1
   1313 F5 82              5055 	mov	dpl,a
   1315 E4                 5056 	clr	a
   1316 34s02              5057 	addc	a,#(_getFonaGPS_c_1_1 >> 8)
   1318 F5 83              5058 	mov	dph,a
   131A E0                 5059 	movx	a,@dptr
   131B FB                 5060 	mov	r3,a
   131C 8D 82              5061 	mov	dpl,r5
   131E 8E 83              5062 	mov	dph,r6
   1320 F0                 5063 	movx	@dptr,a
                    1321   5064 	C$mdrip.c$603$2$20 ==.
                           5065 ;	apps/mdrip/mdrip.c:603: for(i=0; i==23; i++) {							//	Re-using i here is not a problem as we will terminate anyway in the next condition
   1321 0F                 5066 	inc	r7
   1322 80 DF              5067 	sjmp	00141$
   1324                    5068 00144$:
                    1324   5069 	C$mdrip.c$606$2$20 ==.
                           5070 ;	apps/mdrip/mdrip.c:606: CIPGSMLOC->LatLong[24]='\0';
   1324 78r45              5071 	mov	r0,#_getFonaGPS_CIPGSMLOC_1_1
   1326 E2                 5072 	movx	a,@r0
   1327 24 18              5073 	add	a,#0x18
   1329 F5 82              5074 	mov	dpl,a
   132B 08                 5075 	inc	r0
   132C E2                 5076 	movx	a,@r0
   132D 34 00              5077 	addc	a,#0x00
   132F F5 83              5078 	mov	dph,a
   1331 E4                 5079 	clr	a
   1332 F0                 5080 	movx	@dptr,a
                    1333   5081 	C$mdrip.c$607$2$20 ==.
                           5082 ;	apps/mdrip/mdrip.c:607: strcpy(CIPGSMLOC->LatLong,"999");
   1333 78r45              5083 	mov	r0,#_getFonaGPS_CIPGSMLOC_1_1
   1335 E2                 5084 	movx	a,@r0
   1336 FE                 5085 	mov	r6,a
   1337 08                 5086 	inc	r0
   1338 E2                 5087 	movx	a,@r0
   1339 FF                 5088 	mov	r7,a
   133A 7D 00              5089 	mov	r5,#0x00
   133C 78r00              5090 	mov	r0,#_strcpy_PARM_2
   133E 74r8B              5091 	mov	a,#__str_27
   1340 F2                 5092 	movx	@r0,a
   1341 08                 5093 	inc	r0
   1342 74s01              5094 	mov	a,#(__str_27 >> 8)
   1344 F2                 5095 	movx	@r0,a
   1345 08                 5096 	inc	r0
   1346 74 80              5097 	mov	a,#0x80
   1348 F2                 5098 	movx	@r0,a
   1349 8E 82              5099 	mov	dpl,r6
   134B 8F 83              5100 	mov	dph,r7
   134D 8D F0              5101 	mov	b,r5
   134F C0 04              5102 	push	ar4
   1351 12s00r00           5103 	lcall	_strcpy
   1354 D0 04              5104 	pop	ar4
                    1356   5105 	C$mdrip.c$608$2$20 ==.
                           5106 ;	apps/mdrip/mdrip.c:608: CIPGSMLOC->iv[0]=clen;
   1356 78r45              5107 	mov	r0,#_getFonaGPS_CIPGSMLOC_1_1
   1358 E2                 5108 	movx	a,@r0
   1359 24 19              5109 	add	a,#0x19
   135B F5 82              5110 	mov	dpl,a
   135D 08                 5111 	inc	r0
   135E E2                 5112 	movx	a,@r0
   135F 34 00              5113 	addc	a,#0x00
   1361 F5 83              5114 	mov	dph,a
   1363 EC                 5115 	mov	a,r4
   1364 F0                 5116 	movx	@dptr,a
                    1365   5117 	C$mdrip.c$609$2$20 ==.
                           5118 ;	apps/mdrip/mdrip.c:609: CIPGSMLOC->iv[1]=clen;
   1365 78r45              5119 	mov	r0,#_getFonaGPS_CIPGSMLOC_1_1
   1367 E2                 5120 	movx	a,@r0
   1368 24 19              5121 	add	a,#0x19
   136A FE                 5122 	mov	r6,a
   136B 08                 5123 	inc	r0
   136C E2                 5124 	movx	a,@r0
   136D 34 00              5125 	addc	a,#0x00
   136F FF                 5126 	mov	r7,a
   1370 8E 82              5127 	mov	dpl,r6
   1372 8F 83              5128 	mov	dph,r7
   1374 A3                 5129 	inc	dptr
   1375 EC                 5130 	mov	a,r4
   1376 F0                 5131 	movx	@dptr,a
                    1377   5132 	C$mdrip.c$610$2$20 ==.
                           5133 ;	apps/mdrip/mdrip.c:610: CIPGSMLOC->returncode=clen;
   1377 78r45              5134 	mov	r0,#_getFonaGPS_CIPGSMLOC_1_1
   1379 E2                 5135 	movx	a,@r0
   137A 24 29              5136 	add	a,#0x29
   137C F5 82              5137 	mov	dpl,a
   137E 08                 5138 	inc	r0
   137F E2                 5139 	movx	a,@r0
   1380 34 00              5140 	addc	a,#0x00
   1382 F5 83              5141 	mov	dph,a
   1384 EC                 5142 	mov	a,r4
   1385 F0                 5143 	movx	@dptr,a
   1386                    5144 00145$:
                    1386   5145 	C$mdrip.c$613$2$1 ==.
                    1386   5146 	XG$getFonaGPS$0$0 ==.
   1386 22                 5147 	ret
                           5148 ;------------------------------------------------------------
                           5149 ;Allocation info for local variables in function 'print_packet'
                           5150 ;------------------------------------------------------------
                           5151 ;sloc0                     Allocated with name '_print_packet_sloc0_1_0'
                           5152 ;sloc1                     Allocated with name '_print_packet_sloc1_1_0'
                           5153 ;sloc2                     Allocated with name '_print_packet_sloc2_1_0'
                           5154 ;sloc3                     Allocated with name '_print_packet_sloc3_1_0'
                           5155 ;fonaBat                   Allocated with name '_print_packet_fonaBat_1_1'
                           5156 ;fonaLatLong               Allocated with name '_print_packet_fonaLatLong_1_1'
                           5157 ;transID                   Allocated with name '_print_packet_transID_1_1'
                           5158 ;CIPResponse               Allocated with name '_print_packet_CIPResponse_1_1'
                           5159 ;iv                        Allocated with name '_print_packet_iv_1_1'
                           5160 ;i                         Allocated with name '_print_packet_i_1_1'
                           5161 ;sprintfBuffer             Allocated with name '_print_packet_sprintfBuffer_1_1'
                           5162 ;AESBuffer                 Allocated with name '_print_packet_AESBuffer_1_1'
                           5163 ;prtlen                    Allocated with name '_print_packet_prtlen_1_1'
                           5164 ;------------------------------------------------------------
                    1387   5165 	G$print_packet$0$0 ==.
                    1387   5166 	C$mdrip.c$616$2$1 ==.
                           5167 ;	apps/mdrip/mdrip.c:616: void print_packet(Dexcom_packet* pPkt) {
                           5168 ;	-----------------------------------------
                           5169 ;	 function print_packet
                           5170 ;	-----------------------------------------
   1387                    5171 _print_packet:
   1387 AF 83              5172 	mov	r7,dph
   1389 E5 82              5173 	mov	a,dpl
   138B 78r47              5174 	mov	r0,#_print_packet_pPkt_1_1
   138D F2                 5175 	movx	@r0,a
   138E 08                 5176 	inc	r0
   138F EF                 5177 	mov	a,r7
   1390 F2                 5178 	movx	@r0,a
                    1391   5179 	C$mdrip.c$618$1$1 ==.
                           5180 ;	apps/mdrip/mdrip.c:618: XDATA char fonaLatLong[25] = {0};
   1391 90s02r51           5181 	mov	dptr,#_print_packet_fonaLatLong_1_1
   1394 E4                 5182 	clr	a
   1395 F0                 5183 	movx	@dptr,a
   1396 90s02r52           5184 	mov	dptr,#(_print_packet_fonaLatLong_1_1 + 0x0001)
   1399 F0                 5185 	movx	@dptr,a
   139A 90s02r53           5186 	mov	dptr,#(_print_packet_fonaLatLong_1_1 + 0x0002)
   139D F0                 5187 	movx	@dptr,a
   139E 90s02r54           5188 	mov	dptr,#(_print_packet_fonaLatLong_1_1 + 0x0003)
   13A1 F0                 5189 	movx	@dptr,a
   13A2 90s02r55           5190 	mov	dptr,#(_print_packet_fonaLatLong_1_1 + 0x0004)
   13A5 E4                 5191 	clr	a
   13A6 F0                 5192 	movx	@dptr,a
   13A7 90s02r56           5193 	mov	dptr,#(_print_packet_fonaLatLong_1_1 + 0x0005)
   13AA F0                 5194 	movx	@dptr,a
   13AB 90s02r57           5195 	mov	dptr,#(_print_packet_fonaLatLong_1_1 + 0x0006)
   13AE F0                 5196 	movx	@dptr,a
   13AF 90s02r58           5197 	mov	dptr,#(_print_packet_fonaLatLong_1_1 + 0x0007)
   13B2 F0                 5198 	movx	@dptr,a
   13B3 90s02r59           5199 	mov	dptr,#(_print_packet_fonaLatLong_1_1 + 0x0008)
   13B6 E4                 5200 	clr	a
   13B7 F0                 5201 	movx	@dptr,a
   13B8 90s02r5A           5202 	mov	dptr,#(_print_packet_fonaLatLong_1_1 + 0x0009)
   13BB F0                 5203 	movx	@dptr,a
   13BC 90s02r5B           5204 	mov	dptr,#(_print_packet_fonaLatLong_1_1 + 0x000a)
   13BF F0                 5205 	movx	@dptr,a
   13C0 90s02r5C           5206 	mov	dptr,#(_print_packet_fonaLatLong_1_1 + 0x000b)
   13C3 F0                 5207 	movx	@dptr,a
   13C4 90s02r5D           5208 	mov	dptr,#(_print_packet_fonaLatLong_1_1 + 0x000c)
   13C7 E4                 5209 	clr	a
   13C8 F0                 5210 	movx	@dptr,a
   13C9 90s02r5E           5211 	mov	dptr,#(_print_packet_fonaLatLong_1_1 + 0x000d)
   13CC F0                 5212 	movx	@dptr,a
   13CD 90s02r5F           5213 	mov	dptr,#(_print_packet_fonaLatLong_1_1 + 0x000e)
   13D0 F0                 5214 	movx	@dptr,a
   13D1 90s02r60           5215 	mov	dptr,#(_print_packet_fonaLatLong_1_1 + 0x000f)
   13D4 F0                 5216 	movx	@dptr,a
   13D5 90s02r61           5217 	mov	dptr,#(_print_packet_fonaLatLong_1_1 + 0x0010)
   13D8 E4                 5218 	clr	a
   13D9 F0                 5219 	movx	@dptr,a
   13DA 90s02r62           5220 	mov	dptr,#(_print_packet_fonaLatLong_1_1 + 0x0011)
   13DD F0                 5221 	movx	@dptr,a
   13DE 90s02r63           5222 	mov	dptr,#(_print_packet_fonaLatLong_1_1 + 0x0012)
   13E1 F0                 5223 	movx	@dptr,a
   13E2 90s02r64           5224 	mov	dptr,#(_print_packet_fonaLatLong_1_1 + 0x0013)
   13E5 F0                 5225 	movx	@dptr,a
   13E6 90s02r65           5226 	mov	dptr,#(_print_packet_fonaLatLong_1_1 + 0x0014)
   13E9 E4                 5227 	clr	a
   13EA F0                 5228 	movx	@dptr,a
   13EB 90s02r66           5229 	mov	dptr,#(_print_packet_fonaLatLong_1_1 + 0x0015)
   13EE F0                 5230 	movx	@dptr,a
   13EF 90s02r67           5231 	mov	dptr,#(_print_packet_fonaLatLong_1_1 + 0x0016)
   13F2 F0                 5232 	movx	@dptr,a
   13F3 90s02r68           5233 	mov	dptr,#(_print_packet_fonaLatLong_1_1 + 0x0017)
   13F6 F0                 5234 	movx	@dptr,a
   13F7 90s02r69           5235 	mov	dptr,#(_print_packet_fonaLatLong_1_1 + 0x0018)
   13FA E4                 5236 	clr	a
   13FB F0                 5237 	movx	@dptr,a
                    13FC   5238 	C$mdrip.c$619$1$1 ==.
                           5239 ;	apps/mdrip/mdrip.c:619: XDATA char transID[] = "BLANK"; 
   13FC 90s02r6A           5240 	mov	dptr,#_print_packet_transID_1_1
   13FF 74 42              5241 	mov	a,#0x42
   1401 F0                 5242 	movx	@dptr,a
   1402 90s02r6B           5243 	mov	dptr,#(_print_packet_transID_1_1 + 0x0001)
   1405 74 4C              5244 	mov	a,#0x4C
   1407 F0                 5245 	movx	@dptr,a
   1408 90s02r6C           5246 	mov	dptr,#(_print_packet_transID_1_1 + 0x0002)
   140B 74 41              5247 	mov	a,#0x41
   140D F0                 5248 	movx	@dptr,a
   140E 90s02r6D           5249 	mov	dptr,#(_print_packet_transID_1_1 + 0x0003)
   1411 74 4E              5250 	mov	a,#0x4E
   1413 F0                 5251 	movx	@dptr,a
   1414 90s02r6E           5252 	mov	dptr,#(_print_packet_transID_1_1 + 0x0004)
   1417 74 4B              5253 	mov	a,#0x4B
   1419 F0                 5254 	movx	@dptr,a
   141A 90s02r6F           5255 	mov	dptr,#(_print_packet_transID_1_1 + 0x0005)
                    141D   5256 	C$mdrip.c$626$1$1 ==.
                           5257 ;	apps/mdrip/mdrip.c:626: XDATA uint8_t iv[16]  = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f };
   141D E4                 5258 	clr	a
   141E F0                 5259 	movx	@dptr,a
   141F 90s02r9A           5260 	mov	dptr,#_print_packet_iv_1_1
   1422 F0                 5261 	movx	@dptr,a
   1423 90s02r9B           5262 	mov	dptr,#(_print_packet_iv_1_1 + 0x0001)
   1426 74 01              5263 	mov	a,#0x01
   1428 F0                 5264 	movx	@dptr,a
   1429 90s02r9C           5265 	mov	dptr,#(_print_packet_iv_1_1 + 0x0002)
   142C 74 02              5266 	mov	a,#0x02
   142E F0                 5267 	movx	@dptr,a
   142F 90s02r9D           5268 	mov	dptr,#(_print_packet_iv_1_1 + 0x0003)
   1432 74 03              5269 	mov	a,#0x03
   1434 F0                 5270 	movx	@dptr,a
   1435 90s02r9E           5271 	mov	dptr,#(_print_packet_iv_1_1 + 0x0004)
   1438 74 04              5272 	mov	a,#0x04
   143A F0                 5273 	movx	@dptr,a
   143B 90s02r9F           5274 	mov	dptr,#(_print_packet_iv_1_1 + 0x0005)
   143E 74 05              5275 	mov	a,#0x05
   1440 F0                 5276 	movx	@dptr,a
   1441 90s02rA0           5277 	mov	dptr,#(_print_packet_iv_1_1 + 0x0006)
   1444 74 06              5278 	mov	a,#0x06
   1446 F0                 5279 	movx	@dptr,a
   1447 90s02rA1           5280 	mov	dptr,#(_print_packet_iv_1_1 + 0x0007)
   144A 74 07              5281 	mov	a,#0x07
   144C F0                 5282 	movx	@dptr,a
   144D 90s02rA2           5283 	mov	dptr,#(_print_packet_iv_1_1 + 0x0008)
   1450 74 08              5284 	mov	a,#0x08
   1452 F0                 5285 	movx	@dptr,a
   1453 90s02rA3           5286 	mov	dptr,#(_print_packet_iv_1_1 + 0x0009)
   1456 74 09              5287 	mov	a,#0x09
   1458 F0                 5288 	movx	@dptr,a
   1459 90s02rA4           5289 	mov	dptr,#(_print_packet_iv_1_1 + 0x000a)
   145C 74 0A              5290 	mov	a,#0x0A
   145E F0                 5291 	movx	@dptr,a
   145F 90s02rA5           5292 	mov	dptr,#(_print_packet_iv_1_1 + 0x000b)
   1462 74 0B              5293 	mov	a,#0x0B
   1464 F0                 5294 	movx	@dptr,a
   1465 90s02rA6           5295 	mov	dptr,#(_print_packet_iv_1_1 + 0x000c)
   1468 74 0C              5296 	mov	a,#0x0C
   146A F0                 5297 	movx	@dptr,a
   146B 90s02rA7           5298 	mov	dptr,#(_print_packet_iv_1_1 + 0x000d)
   146E 74 0D              5299 	mov	a,#0x0D
   1470 F0                 5300 	movx	@dptr,a
   1471 90s02rA8           5301 	mov	dptr,#(_print_packet_iv_1_1 + 0x000e)
   1474 74 0E              5302 	mov	a,#0x0E
   1476 F0                 5303 	movx	@dptr,a
   1477 90s02rA9           5304 	mov	dptr,#(_print_packet_iv_1_1 + 0x000f)
   147A 74 0F              5305 	mov	a,#0x0F
   147C F0                 5306 	movx	@dptr,a
                    147D   5307 	C$mdrip.c$637$1$1 ==.
                           5308 ;	apps/mdrip/mdrip.c:637: uartEnable();
   147D 12s00r2D           5309 	lcall	_uartEnable
                    1480   5310 	C$mdrip.c$640$1$1 ==.
                           5311 ;	apps/mdrip/mdrip.c:640: if(enable_wixfone==1) {
   1480 20*03 03           5312 	jb	_enable_wixfone,00127$
   1483 02s17r5C           5313 	ljmp	00102$
   1486                    5314 00127$:
                    1486   5315 	C$mdrip.c$642$2$2 ==.
                           5316 ;	apps/mdrip/mdrip.c:642: fonaBat=getFonaMillivolts();							//	Ask the fona for the battery health - best to do gets immediately after uart enabled
   1486 12s0Ar1F           5317 	lcall	_getFonaMillivolts
   1489 85 82*08           5318 	mov	_print_packet_sloc0_1_0,dpl
   148C 85 83*09           5319 	mov	(_print_packet_sloc0_1_0 + 1),dph
                    148F   5320 	C$mdrip.c$646$2$2 ==.
                           5321 ;	apps/mdrip/mdrip.c:646: enableFona();
   148F 12s08r30           5322 	lcall	_enableFona
                    1492   5323 	C$mdrip.c$647$2$2 ==.
                           5324 ;	apps/mdrip/mdrip.c:647: getFonaGPS( &CIPResponse );
   1492 90s02r70           5325 	mov	dptr,#_print_packet_CIPResponse_1_1
   1495 12s0Er13           5326 	lcall	_getFonaGPS
                    1498   5327 	C$mdrip.c$648$2$2 ==.
                           5328 ;	apps/mdrip/mdrip.c:648: strcpy(fonaLatLong, CIPResponse.LatLong);
   1498 78r00              5329 	mov	r0,#_strcpy_PARM_2
   149A 74r70              5330 	mov	a,#_print_packet_CIPResponse_1_1
   149C F2                 5331 	movx	@r0,a
   149D 08                 5332 	inc	r0
   149E 74s02              5333 	mov	a,#(_print_packet_CIPResponse_1_1 >> 8)
   14A0 F2                 5334 	movx	@r0,a
   14A1 08                 5335 	inc	r0
   14A2 E4                 5336 	clr	a
   14A3 F2                 5337 	movx	@r0,a
   14A4 90s02r51           5338 	mov	dptr,#_print_packet_fonaLatLong_1_1
   14A7 75 F0 00           5339 	mov	b,#0x00
   14AA 12s00r00           5340 	lcall	_strcpy
                    14AD   5341 	C$mdrip.c$649$2$2 ==.
                           5342 ;	apps/mdrip/mdrip.c:649: strcpy(iv, CIPResponse.iv);
   14AD 78r00              5343 	mov	r0,#_strcpy_PARM_2
   14AF 74r89              5344 	mov	a,#(_print_packet_CIPResponse_1_1 + 0x0019)
   14B1 F2                 5345 	movx	@r0,a
   14B2 08                 5346 	inc	r0
   14B3 74s02              5347 	mov	a,#((_print_packet_CIPResponse_1_1 + 0x0019) >> 8)
   14B5 F2                 5348 	movx	@r0,a
   14B6 08                 5349 	inc	r0
   14B7 E4                 5350 	clr	a
   14B8 F2                 5351 	movx	@r0,a
   14B9 90s02r9A           5352 	mov	dptr,#_print_packet_iv_1_1
   14BC 75 F0 00           5353 	mov	b,#0x00
   14BF 12s00r00           5354 	lcall	_strcpy
                    14C2   5355 	C$mdrip.c$650$2$2 ==.
                           5356 ;	apps/mdrip/mdrip.c:650: iv[14]=pPkt->txId;										//	Randomise the IV further by updating this spare byte with the packet sequence number
   14C2 78r47              5357 	mov	r0,#_print_packet_pPkt_1_1
   14C4 E2                 5358 	movx	a,@r0
   14C5 24 0B              5359 	add	a,#0x0B
   14C7 FA                 5360 	mov	r2,a
   14C8 08                 5361 	inc	r0
   14C9 E2                 5362 	movx	a,@r0
   14CA 34 00              5363 	addc	a,#0x00
   14CC FB                 5364 	mov	r3,a
   14CD 8A 82              5365 	mov	dpl,r2
   14CF 8B 83              5366 	mov	dph,r3
   14D1 E0                 5367 	movx	a,@dptr
   14D2 90s02rA8           5368 	mov	dptr,#(_print_packet_iv_1_1 + 0x000e)
   14D5 F0                 5369 	movx	@dptr,a
                    14D6   5370 	C$mdrip.c$651$2$2 ==.
                           5371 ;	apps/mdrip/mdrip.c:651: iv[15]=pPkt->checksum;									//	Randomise the IV further by updating this other spare byte with the packet checksum
   14D6 78r47              5372 	mov	r0,#_print_packet_pPkt_1_1
   14D8 E2                 5373 	movx	a,@r0
   14D9 24 12              5374 	add	a,#0x12
   14DB F5 82              5375 	mov	dpl,a
   14DD 08                 5376 	inc	r0
   14DE E2                 5377 	movx	a,@r0
   14DF 34 00              5378 	addc	a,#0x00
   14E1 F5 83              5379 	mov	dph,a
   14E3 E0                 5380 	movx	a,@dptr
   14E4 90s02rA9           5381 	mov	dptr,#(_print_packet_iv_1_1 + 0x000f)
   14E7 F0                 5382 	movx	@dptr,a
                    14E8   5383 	C$mdrip.c$654$2$2 ==.
                           5384 ;	apps/mdrip/mdrip.c:654: fonaConnect();		// Establish a connection to the Dexie server
   14E8 C0 03              5385 	push	ar3
   14EA C0 02              5386 	push	ar2
   14EC 12s09r00           5387 	lcall	_fonaConnect
                    14EF   5388 	C$mdrip.c$655$2$2 ==.
                           5389 ;	apps/mdrip/mdrip.c:655: dexcom_src_to_ascii(pPkt->src_addr, transID);			// Get a human-readable version of the Dexcom Transmitter ID
   14EF 78r47              5390 	mov	r0,#_print_packet_pPkt_1_1
   14F1 E2                 5391 	movx	a,@r0
   14F2 24 05              5392 	add	a,#0x05
   14F4 F5 82              5393 	mov	dpl,a
   14F6 08                 5394 	inc	r0
   14F7 E2                 5395 	movx	a,@r0
   14F8 34 00              5396 	addc	a,#0x00
   14FA F5 83              5397 	mov	dph,a
   14FC E0                 5398 	movx	a,@dptr
   14FD FC                 5399 	mov	r4,a
   14FE A3                 5400 	inc	dptr
   14FF E0                 5401 	movx	a,@dptr
   1500 FD                 5402 	mov	r5,a
   1501 A3                 5403 	inc	dptr
   1502 E0                 5404 	movx	a,@dptr
   1503 FE                 5405 	mov	r6,a
   1504 A3                 5406 	inc	dptr
   1505 E0                 5407 	movx	a,@dptr
   1506 FF                 5408 	mov	r7,a
   1507 90s00r03           5409 	mov	dptr,#_dexcom_src_to_ascii_PARM_2
   150A 74r6A              5410 	mov	a,#_print_packet_transID_1_1
   150C F0                 5411 	movx	@dptr,a
   150D A3                 5412 	inc	dptr
   150E 74s02              5413 	mov	a,#(_print_packet_transID_1_1 >> 8)
   1510 F0                 5414 	movx	@dptr,a
   1511 8C 82              5415 	mov	dpl,r4
   1513 8D 83              5416 	mov	dph,r5
   1515 8E F0              5417 	mov	b,r6
   1517 EF                 5418 	mov	a,r7
   1518 12s02r17           5419 	lcall	_dexcom_src_to_ascii
   151B D0 02              5420 	pop	ar2
   151D D0 03              5421 	pop	ar3
                    151F   5422 	C$mdrip.c$692$2$2 ==.
                           5423 ;	apps/mdrip/mdrip.c:692: fonaLatLong);									//		GPS Coordinates of cell tower(derived by Fona)
                    151F   5424 	C$mdrip.c$690$2$2 ==.
                           5425 ;	apps/mdrip/mdrip.c:690: (((pPkt->RSSI)/2)-73),							//		Received Signal Strength Indicator
   151F 78r47              5426 	mov	r0,#_print_packet_pPkt_1_1
   1521 E2                 5427 	movx	a,@r0
   1522 24 13              5428 	add	a,#0x13
   1524 F5 82              5429 	mov	dpl,a
   1526 08                 5430 	inc	r0
   1527 E2                 5431 	movx	a,@r0
   1528 34 00              5432 	addc	a,#0x00
   152A F5 83              5433 	mov	dph,a
   152C E0                 5434 	movx	a,@dptr
   152D FF                 5435 	mov	r7,a
   152E C2 D5              5436 	clr	F0
   1530 75 F0 02           5437 	mov	b,#0x02
   1533 EF                 5438 	mov	a,r7
   1534 30 E7 04           5439 	jnb	acc.7,00128$
   1537 B2 D5              5440 	cpl	F0
   1539 F4                 5441 	cpl	a
   153A 04                 5442 	inc	a
   153B                    5443 00128$:
   153B 84                 5444 	div	ab
   153C 30 D5 02           5445 	jnb	F0,00129$
   153F F4                 5446 	cpl	a
   1540 04                 5447 	inc	a
   1541                    5448 00129$:
   1541 C0 E0              5449 	push	acc
   1543 A2 D5              5450 	mov	c,F0
   1545 95 E0              5451 	subb	a,acc
   1547 F5 F0              5452 	mov	b,a
   1549 D0 E0              5453 	pop	acc
   154B 24 B7              5454 	add	a,#0xB7
   154D F5*0C              5455 	mov	_print_packet_sloc2_1_0,a
   154F E5 F0              5456 	mov	a,b
   1551 34 FF              5457 	addc	a,#0xFF
   1553 F5*0D              5458 	mov	(_print_packet_sloc2_1_0 + 1),a
                    1555   5459 	C$mdrip.c$689$2$2 ==.
                           5460 ;	apps/mdrip/mdrip.c:689: pPkt->battery, 					 				// 		Dexcom Transmitter Battery
   1555 78r47              5461 	mov	r0,#_print_packet_pPkt_1_1
   1557 E2                 5462 	movx	a,@r0
   1558 24 10              5463 	add	a,#0x10
   155A F5 82              5464 	mov	dpl,a
   155C 08                 5465 	inc	r0
   155D E2                 5466 	movx	a,@r0
   155E 34 00              5467 	addc	a,#0x00
   1560 F5 83              5468 	mov	dph,a
   1562 E0                 5469 	movx	a,@dptr
   1563 FD                 5470 	mov	r5,a
   1564 8D*0A              5471 	mov	_print_packet_sloc1_1_0,r5
   1566 75*0B 00           5472 	mov	(_print_packet_sloc1_1_0 + 1),#0x00
                    1569   5473 	C$mdrip.c$688$2$2 ==.
                           5474 ;	apps/mdrip/mdrip.c:688: dex_num_decoder(pPkt->filtered)*2,				// 		Filtered BG Value
   1569 78r47              5475 	mov	r0,#_print_packet_pPkt_1_1
   156B E2                 5476 	movx	a,@r0
   156C 24 0E              5477 	add	a,#0x0E
   156E F5 82              5478 	mov	dpl,a
   1570 08                 5479 	inc	r0
   1571 E2                 5480 	movx	a,@r0
   1572 34 00              5481 	addc	a,#0x00
   1574 F5 83              5482 	mov	dph,a
   1576 E0                 5483 	movx	a,@dptr
   1577 FC                 5484 	mov	r4,a
   1578 A3                 5485 	inc	dptr
   1579 E0                 5486 	movx	a,@dptr
   157A FD                 5487 	mov	r5,a
   157B 8C 82              5488 	mov	dpl,r4
   157D 8D 83              5489 	mov	dph,r5
   157F C0 03              5490 	push	ar3
   1581 C0 02              5491 	push	ar2
   1583 12s01rC3           5492 	lcall	_dex_num_decoder
   1586 AC 82              5493 	mov	r4,dpl
   1588 AD 83              5494 	mov	r5,dph
   158A AE F0              5495 	mov	r6,b
   158C FF                 5496 	mov	r7,a
   158D EC                 5497 	mov	a,r4
   158E 2C                 5498 	add	a,r4
   158F F5*0E              5499 	mov	_print_packet_sloc3_1_0,a
   1591 ED                 5500 	mov	a,r5
   1592 33                 5501 	rlc	a
   1593 F5*0F              5502 	mov	(_print_packet_sloc3_1_0 + 1),a
   1595 EE                 5503 	mov	a,r6
   1596 33                 5504 	rlc	a
   1597 F5*10              5505 	mov	(_print_packet_sloc3_1_0 + 2),a
   1599 EF                 5506 	mov	a,r7
   159A 33                 5507 	rlc	a
   159B F5*11              5508 	mov	(_print_packet_sloc3_1_0 + 3),a
                    159D   5509 	C$mdrip.c$687$2$2 ==.
                           5510 ;	apps/mdrip/mdrip.c:687: dex_num_decoder(pPkt->raw),		 				// 		Raw BQ Value
   159D 78r47              5511 	mov	r0,#_print_packet_pPkt_1_1
   159F E2                 5512 	movx	a,@r0
   15A0 24 0C              5513 	add	a,#0x0C
   15A2 F5 82              5514 	mov	dpl,a
   15A4 08                 5515 	inc	r0
   15A5 E2                 5516 	movx	a,@r0
   15A6 34 00              5517 	addc	a,#0x00
   15A8 F5 83              5518 	mov	dph,a
   15AA E0                 5519 	movx	a,@dptr
   15AB FE                 5520 	mov	r6,a
   15AC A3                 5521 	inc	dptr
   15AD E0                 5522 	movx	a,@dptr
   15AE FF                 5523 	mov	r7,a
   15AF 8E 82              5524 	mov	dpl,r6
   15B1 8F 83              5525 	mov	dph,r7
   15B3 12s01rC3           5526 	lcall	_dex_num_decoder
   15B6 AC 82              5527 	mov	r4,dpl
   15B8 AD 83              5528 	mov	r5,dph
   15BA AE F0              5529 	mov	r6,b
   15BC FF                 5530 	mov	r7,a
   15BD D0 02              5531 	pop	ar2
   15BF D0 03              5532 	pop	ar3
                    15C1   5533 	C$mdrip.c$686$2$2 ==.
                           5534 ;	apps/mdrip/mdrip.c:686: transID,						 				// 		Transmitter ID - from packet in case only_listen_for_my_transmitter false
                    15C1   5535 	C$mdrip.c$685$2$2 ==.
                           5536 ;	apps/mdrip/mdrip.c:685: pPkt->txId, 					 				// 		Transmission ID - unique-ish identifier
   15C1 8A 82              5537 	mov	dpl,r2
   15C3 8B 83              5538 	mov	dph,r3
   15C5 E0                 5539 	movx	a,@dptr
   15C6 FA                 5540 	mov	r2,a
   15C7 7B 00              5541 	mov	r3,#0x00
                    15C9   5542 	C$mdrip.c$684$2$2 ==.
                           5543 ;	apps/mdrip/mdrip.c:684: wixFone_ID, 					 				// 		xDrip2g Device Identifier
                    15C9   5544 	C$mdrip.c$683$2$2 ==.
                           5545 ;	apps/mdrip/mdrip.c:683: prtlen = sprintf(sprintfBuffer, "%s %hhu %s %lu %lu %d %d %hhu %s",	
   15C9 74r51              5546 	mov	a,#_print_packet_fonaLatLong_1_1
   15CB C0 E0              5547 	push	acc
   15CD 74s02              5548 	mov	a,#(_print_packet_fonaLatLong_1_1 >> 8)
   15CF C0 E0              5549 	push	acc
   15D1 E4                 5550 	clr	a
   15D2 C0 E0              5551 	push	acc
   15D4 C0*08              5552 	push	_print_packet_sloc0_1_0
   15D6 C0*09              5553 	push	(_print_packet_sloc0_1_0 + 1)
   15D8 C0*0C              5554 	push	_print_packet_sloc2_1_0
   15DA C0*0D              5555 	push	(_print_packet_sloc2_1_0 + 1)
   15DC C0*0A              5556 	push	_print_packet_sloc1_1_0
   15DE C0*0B              5557 	push	(_print_packet_sloc1_1_0 + 1)
   15E0 C0*0E              5558 	push	_print_packet_sloc3_1_0
   15E2 C0*0F              5559 	push	(_print_packet_sloc3_1_0 + 1)
   15E4 C0*10              5560 	push	(_print_packet_sloc3_1_0 + 2)
   15E6 C0*11              5561 	push	(_print_packet_sloc3_1_0 + 3)
   15E8 C0 04              5562 	push	ar4
   15EA C0 05              5563 	push	ar5
   15EC C0 06              5564 	push	ar6
   15EE C0 07              5565 	push	ar7
   15F0 74r6A              5566 	mov	a,#_print_packet_transID_1_1
   15F2 C0 E0              5567 	push	acc
   15F4 74s02              5568 	mov	a,#(_print_packet_transID_1_1 >> 8)
   15F6 C0 E0              5569 	push	acc
   15F8 E4                 5570 	clr	a
   15F9 C0 E0              5571 	push	acc
   15FB C0 02              5572 	push	ar2
   15FD C0 03              5573 	push	ar3
   15FF 74r09              5574 	mov	a,#_wixFone_ID
   1601 C0 E0              5575 	push	acc
   1603 74s00              5576 	mov	a,#(_wixFone_ID >> 8)
   1605 C0 E0              5577 	push	acc
   1607 74 80              5578 	mov	a,#0x80
   1609 C0 E0              5579 	push	acc
   160B 74r8F              5580 	mov	a,#__str_29
   160D C0 E0              5581 	push	acc
   160F 74s01              5582 	mov	a,#(__str_29 >> 8)
   1611 C0 E0              5583 	push	acc
   1613 74 80              5584 	mov	a,#0x80
   1615 C0 E0              5585 	push	acc
   1617 74rAA              5586 	mov	a,#_print_packet_sprintfBuffer_1_1
   1619 C0 E0              5587 	push	acc
   161B 74s02              5588 	mov	a,#(_print_packet_sprintfBuffer_1_1 >> 8)
   161D C0 E0              5589 	push	acc
   161F E4                 5590 	clr	a
   1620 C0 E0              5591 	push	acc
   1622 12s00r00           5592 	lcall	_sprintf
   1625 AE 82              5593 	mov	r6,dpl
   1627 E5 81              5594 	mov	a,sp
   1629 24 E1              5595 	add	a,#0xe1
   162B F5 81              5596 	mov	sp,a
                    162D   5597 	C$mdrip.c$696$2$2 ==.
                           5598 ;	apps/mdrip/mdrip.c:696: for(i = prtlen; i < 64; ++i)
   162D 8E 07              5599 	mov	ar7,r6
   162F                    5600 00103$:
   162F BF 40 00           5601 	cjne	r7,#0x40,00130$
   1632                    5602 00130$:
   1632 50 10              5603 	jnc	00106$
                    1634   5604 	C$mdrip.c$697$2$2 ==.
                           5605 ;	apps/mdrip/mdrip.c:697: sprintfBuffer[i]=' ';							//		Fill rest of array with spaces
   1634 EF                 5606 	mov	a,r7
   1635 24rAA              5607 	add	a,#_print_packet_sprintfBuffer_1_1
   1637 F5 82              5608 	mov	dpl,a
   1639 E4                 5609 	clr	a
   163A 34s02              5610 	addc	a,#(_print_packet_sprintfBuffer_1_1 >> 8)
   163C F5 83              5611 	mov	dph,a
   163E 74 20              5612 	mov	a,#0x20
   1640 F0                 5613 	movx	@dptr,a
                    1641   5614 	C$mdrip.c$696$2$2 ==.
                           5615 ;	apps/mdrip/mdrip.c:696: for(i = prtlen; i < 64; ++i)
   1641 0F                 5616 	inc	r7
   1642 80 EB              5617 	sjmp	00103$
   1644                    5618 00106$:
                    1644   5619 	C$mdrip.c$702$2$2 ==.
                           5620 ;	apps/mdrip/mdrip.c:702: AES128_CBC_encrypt_buffer(AESBuffer, sprintfBuffer, 64, key, iv);   // swap prtlen for 64 here?
   1644 90s00r00           5621 	mov	dptr,#_AES128_CBC_encrypt_buffer_PARM_2
   1647 74rAA              5622 	mov	a,#_print_packet_sprintfBuffer_1_1
   1649 F0                 5623 	movx	@dptr,a
   164A A3                 5624 	inc	dptr
   164B 74s02              5625 	mov	a,#(_print_packet_sprintfBuffer_1_1 >> 8)
   164D F0                 5626 	movx	@dptr,a
   164E 90s00r00           5627 	mov	dptr,#_AES128_CBC_encrypt_buffer_PARM_3
   1651 74 40              5628 	mov	a,#0x40
   1653 F0                 5629 	movx	@dptr,a
   1654 A3                 5630 	inc	dptr
   1655 E4                 5631 	clr	a
   1656 F0                 5632 	movx	@dptr,a
   1657 A3                 5633 	inc	dptr
   1658 F0                 5634 	movx	@dptr,a
   1659 A3                 5635 	inc	dptr
   165A F0                 5636 	movx	@dptr,a
   165B 90s00r00           5637 	mov	dptr,#_AES128_CBC_encrypt_buffer_PARM_4
   165E 74r3B              5638 	mov	a,#_key
   1660 F0                 5639 	movx	@dptr,a
   1661 A3                 5640 	inc	dptr
   1662 74s00              5641 	mov	a,#(_key >> 8)
   1664 F0                 5642 	movx	@dptr,a
   1665 90s00r00           5643 	mov	dptr,#_AES128_CBC_encrypt_buffer_PARM_5
   1668 74r9A              5644 	mov	a,#_print_packet_iv_1_1
   166A F0                 5645 	movx	@dptr,a
   166B A3                 5646 	inc	dptr
   166C 74s02              5647 	mov	a,#(_print_packet_iv_1_1 >> 8)
   166E F0                 5648 	movx	@dptr,a
   166F 90s02rEA           5649 	mov	dptr,#_print_packet_AESBuffer_1_1
   1672 12s00r00           5650 	lcall	_AES128_CBC_encrypt_buffer
                    1675   5651 	C$mdrip.c$713$2$2 ==.
                           5652 ;	apps/mdrip/mdrip.c:713: printf("xDrip2g(AES): ");
   1675 74rB0              5653 	mov	a,#__str_30
   1677 C0 E0              5654 	push	acc
   1679 74s01              5655 	mov	a,#(__str_30 >> 8)
   167B C0 E0              5656 	push	acc
   167D 74 80              5657 	mov	a,#0x80
   167F C0 E0              5658 	push	acc
   1681 12s00r00           5659 	lcall	_printf
   1684 15 81              5660 	dec	sp
   1686 15 81              5661 	dec	sp
   1688 15 81              5662 	dec	sp
                    168A   5663 	C$mdrip.c$715$1$1 ==.
                           5664 ;	apps/mdrip/mdrip.c:715: for(i = 0; i < 16; ++i)
   168A 7F 00              5665 	mov	r7,#0x00
   168C                    5666 00107$:
   168C BF 10 00           5667 	cjne	r7,#0x10,00132$
   168F                    5668 00132$:
   168F 50 2E              5669 	jnc	00110$
                    1691   5670 	C$mdrip.c$716$2$2 ==.
                           5671 ;	apps/mdrip/mdrip.c:716: printf("%02x", iv[i]);							//		Print initialisation vector as this is not a secret, just unique
   1691 EF                 5672 	mov	a,r7
   1692 24r9A              5673 	add	a,#_print_packet_iv_1_1
   1694 F5 82              5674 	mov	dpl,a
   1696 E4                 5675 	clr	a
   1697 34s02              5676 	addc	a,#(_print_packet_iv_1_1 >> 8)
   1699 F5 83              5677 	mov	dph,a
   169B E0                 5678 	movx	a,@dptr
   169C FE                 5679 	mov	r6,a
   169D 7D 00              5680 	mov	r5,#0x00
   169F C0 07              5681 	push	ar7
   16A1 C0 06              5682 	push	ar6
   16A3 C0 05              5683 	push	ar5
   16A5 74rBF              5684 	mov	a,#__str_31
   16A7 C0 E0              5685 	push	acc
   16A9 74s01              5686 	mov	a,#(__str_31 >> 8)
   16AB C0 E0              5687 	push	acc
   16AD 74 80              5688 	mov	a,#0x80
   16AF C0 E0              5689 	push	acc
   16B1 12s00r00           5690 	lcall	_printf
   16B4 E5 81              5691 	mov	a,sp
   16B6 24 FB              5692 	add	a,#0xfb
   16B8 F5 81              5693 	mov	sp,a
   16BA D0 07              5694 	pop	ar7
                    16BC   5695 	C$mdrip.c$715$2$2 ==.
                           5696 ;	apps/mdrip/mdrip.c:715: for(i = 0; i < 16; ++i)
   16BC 0F                 5697 	inc	r7
   16BD 80 CD              5698 	sjmp	00107$
   16BF                    5699 00110$:
                    16BF   5700 	C$mdrip.c$718$2$2 ==.
                           5701 ;	apps/mdrip/mdrip.c:718: printf(" ");	
   16BF 74rC4              5702 	mov	a,#__str_32
   16C1 C0 E0              5703 	push	acc
   16C3 74s01              5704 	mov	a,#(__str_32 >> 8)
   16C5 C0 E0              5705 	push	acc
   16C7 74 80              5706 	mov	a,#0x80
   16C9 C0 E0              5707 	push	acc
   16CB 12s00r00           5708 	lcall	_printf
   16CE 15 81              5709 	dec	sp
   16D0 15 81              5710 	dec	sp
   16D2 15 81              5711 	dec	sp
                    16D4   5712 	C$mdrip.c$720$2$2 ==.
                           5713 ;	apps/mdrip/mdrip.c:720: for(i = 0; i < 64; ++i) 
   16D4 7F 00              5714 	mov	r7,#0x00
   16D6                    5715 00111$:
   16D6 BF 40 00           5716 	cjne	r7,#0x40,00134$
   16D9                    5717 00134$:
   16D9 50 2E              5718 	jnc	00114$
                    16DB   5719 	C$mdrip.c$721$2$2 ==.
                           5720 ;	apps/mdrip/mdrip.c:721: printf("%02x", AESBuffer[i]);
   16DB EF                 5721 	mov	a,r7
   16DC 24rEA              5722 	add	a,#_print_packet_AESBuffer_1_1
   16DE F5 82              5723 	mov	dpl,a
   16E0 E4                 5724 	clr	a
   16E1 34s02              5725 	addc	a,#(_print_packet_AESBuffer_1_1 >> 8)
   16E3 F5 83              5726 	mov	dph,a
   16E5 E0                 5727 	movx	a,@dptr
   16E6 FE                 5728 	mov	r6,a
   16E7 7D 00              5729 	mov	r5,#0x00
   16E9 C0 07              5730 	push	ar7
   16EB C0 06              5731 	push	ar6
   16ED C0 05              5732 	push	ar5
   16EF 74rBF              5733 	mov	a,#__str_31
   16F1 C0 E0              5734 	push	acc
   16F3 74s01              5735 	mov	a,#(__str_31 >> 8)
   16F5 C0 E0              5736 	push	acc
   16F7 74 80              5737 	mov	a,#0x80
   16F9 C0 E0              5738 	push	acc
   16FB 12s00r00           5739 	lcall	_printf
   16FE E5 81              5740 	mov	a,sp
   1700 24 FB              5741 	add	a,#0xfb
   1702 F5 81              5742 	mov	sp,a
   1704 D0 07              5743 	pop	ar7
                    1706   5744 	C$mdrip.c$720$2$2 ==.
                           5745 ;	apps/mdrip/mdrip.c:720: for(i = 0; i < 64; ++i) 
   1706 0F                 5746 	inc	r7
   1707 80 CD              5747 	sjmp	00111$
   1709                    5748 00114$:
                    1709   5749 	C$mdrip.c$723$2$2 ==.
                           5750 ;	apps/mdrip/mdrip.c:723: printf("\r\n\032");									// CR/LF and Escape ctrl-z character
   1709 74rC6              5751 	mov	a,#__str_33
   170B C0 E0              5752 	push	acc
   170D 74s01              5753 	mov	a,#(__str_33 >> 8)
   170F C0 E0              5754 	push	acc
   1711 74 80              5755 	mov	a,#0x80
   1713 C0 E0              5756 	push	acc
   1715 12s00r00           5757 	lcall	_printf
   1718 15 81              5758 	dec	sp
   171A 15 81              5759 	dec	sp
   171C 15 81              5760 	dec	sp
                    171E   5761 	C$mdrip.c$727$2$2 ==.
                           5762 ;	apps/mdrip/mdrip.c:727: delayMs(defaultATWait);									// Need to wait here also as sometimes missing ctrl-z
   171E 90s00r37           5763 	mov	dptr,#_defaultATWait
   1721 E0                 5764 	movx	a,@dptr
   1722 FC                 5765 	mov	r4,a
   1723 A3                 5766 	inc	dptr
   1724 E0                 5767 	movx	a,@dptr
   1725 FD                 5768 	mov	r5,a
   1726 A3                 5769 	inc	dptr
   1727 E0                 5770 	movx	a,@dptr
   1728 A3                 5771 	inc	dptr
   1729 E0                 5772 	movx	a,@dptr
   172A 8C 82              5773 	mov	dpl,r4
   172C 8D 83              5774 	mov	dph,r5
   172E 12s00r00           5775 	lcall	_delayMs
                    1731   5776 	C$mdrip.c$728$2$2 ==.
                           5777 ;	apps/mdrip/mdrip.c:728: printf("\032");											// Send all the data with ctrl-z (do it again to be sure)
   1731 74rCA              5778 	mov	a,#__str_34
   1733 C0 E0              5779 	push	acc
   1735 74s01              5780 	mov	a,#(__str_34 >> 8)
   1737 C0 E0              5781 	push	acc
   1739 74 80              5782 	mov	a,#0x80
   173B C0 E0              5783 	push	acc
   173D 12s00r00           5784 	lcall	_printf
   1740 15 81              5785 	dec	sp
   1742 15 81              5786 	dec	sp
   1744 15 81              5787 	dec	sp
                    1746   5788 	C$mdrip.c$729$2$2 ==.
                           5789 ;	apps/mdrip/mdrip.c:729: delayMs(defaultATWait);
   1746 90s00r37           5790 	mov	dptr,#_defaultATWait
   1749 E0                 5791 	movx	a,@dptr
   174A FC                 5792 	mov	r4,a
   174B A3                 5793 	inc	dptr
   174C E0                 5794 	movx	a,@dptr
   174D FD                 5795 	mov	r5,a
   174E A3                 5796 	inc	dptr
   174F E0                 5797 	movx	a,@dptr
   1750 A3                 5798 	inc	dptr
   1751 E0                 5799 	movx	a,@dptr
   1752 8C 82              5800 	mov	dpl,r4
   1754 8D 83              5801 	mov	dph,r5
   1756 12s00r00           5802 	lcall	_delayMs
                    1759   5803 	C$mdrip.c$730$2$2 ==.
                           5804 ;	apps/mdrip/mdrip.c:730: fonaDisable();											// Disconnect and send the fona asleep
   1759 12s08r8F           5805 	lcall	_fonaDisable
   175C                    5806 00102$:
                    175C   5807 	C$mdrip.c$733$1$1 ==.
                           5808 ;	apps/mdrip/mdrip.c:733: uartDisable();
   175C 12s00r3E           5809 	lcall	_uartDisable
                    175F   5810 	C$mdrip.c$734$1$1 ==.
                    175F   5811 	XG$print_packet$0$0 ==.
   175F 22                 5812 	ret
                           5813 ;------------------------------------------------------------
                           5814 ;Allocation info for local variables in function 'makeAllOutputs'
                           5815 ;------------------------------------------------------------
                           5816 ;i                         Allocated with name '_makeAllOutputs_i_1_1'
                           5817 ;------------------------------------------------------------
                    1760   5818 	G$makeAllOutputs$0$0 ==.
                    1760   5819 	C$mdrip.c$736$1$1 ==.
                           5820 ;	apps/mdrip/mdrip.c:736: void makeAllOutputs() {
                           5821 ;	-----------------------------------------
                           5822 ;	 function makeAllOutputs
                           5823 ;	-----------------------------------------
   1760                    5824 _makeAllOutputs:
                    1760   5825 	C$mdrip.c$738$1$1 ==.
                           5826 ;	apps/mdrip/mdrip.c:738: for (i=1; i < 16; i++) { // in the future, this should be set to only the channels being used for output, and add the one for input
   1760 7E 01              5827 	mov	r6,#0x01
   1762 7F 00              5828 	mov	r7,#0x00
   1764                    5829 00101$:
   1764 C3                 5830 	clr	c
   1765 EE                 5831 	mov	a,r6
   1766 94 10              5832 	subb	a,#0x10
   1768 EF                 5833 	mov	a,r7
   1769 64 80              5834 	xrl	a,#0x80
   176B 94 80              5835 	subb	a,#0x80
   176D 50 19              5836 	jnc	00105$
                    176F   5837 	C$mdrip.c$739$2$2 ==.
                           5838 ;	apps/mdrip/mdrip.c:739: setDigitalOutput(i, LOW);
   176F 8E 82              5839 	mov	dpl,r6
   1771 C2 F0              5840 	clr	b[0]
   1773 C0 07              5841 	push	ar7
   1775 C0 06              5842 	push	ar6
   1777 85 F0*00           5843 	mov	bits,b
   177A 12s00r00           5844 	lcall	_setDigitalOutput
   177D D0 06              5845 	pop	ar6
   177F D0 07              5846 	pop	ar7
                    1781   5847 	C$mdrip.c$738$1$1 ==.
                           5848 ;	apps/mdrip/mdrip.c:738: for (i=1; i < 16; i++) { // in the future, this should be set to only the channels being used for output, and add the one for input
   1781 0E                 5849 	inc	r6
   1782 BE 00 DF           5850 	cjne	r6,#0x00,00101$
   1785 0F                 5851 	inc	r7
   1786 80 DC              5852 	sjmp	00101$
   1788                    5853 00105$:
                    1788   5854 	C$mdrip.c$741$1$1 ==.
                    1788   5855 	XG$makeAllOutputs$0$0 ==.
   1788 22                 5856 	ret
                           5857 ;------------------------------------------------------------
                           5858 ;Allocation info for local variables in function 'makeAllOutputsLow'
                           5859 ;------------------------------------------------------------
                           5860 ;i                         Allocated with name '_makeAllOutputsLow_i_1_1'
                           5861 ;------------------------------------------------------------
                    1789   5862 	G$makeAllOutputsLow$0$0 ==.
                    1789   5863 	C$mdrip.c$742$1$1 ==.
                           5864 ;	apps/mdrip/mdrip.c:742: void makeAllOutputsLow() {
                           5865 ;	-----------------------------------------
                           5866 ;	 function makeAllOutputsLow
                           5867 ;	-----------------------------------------
   1789                    5868 _makeAllOutputsLow:
                    1789   5869 	C$mdrip.c$744$1$1 ==.
                           5870 ;	apps/mdrip/mdrip.c:744: for (i=0; i < 16; i++) {
   1789 7E 00              5871 	mov	r6,#0x00
   178B 7F 00              5872 	mov	r7,#0x00
   178D                    5873 00101$:
   178D C3                 5874 	clr	c
   178E EE                 5875 	mov	a,r6
   178F 94 10              5876 	subb	a,#0x10
   1791 EF                 5877 	mov	a,r7
   1792 64 80              5878 	xrl	a,#0x80
   1794 94 80              5879 	subb	a,#0x80
   1796 50 19              5880 	jnc	00105$
                    1798   5881 	C$mdrip.c$745$2$2 ==.
                           5882 ;	apps/mdrip/mdrip.c:745: setDigitalOutput(i, LOW);
   1798 8E 82              5883 	mov	dpl,r6
   179A C2 F0              5884 	clr	b[0]
   179C C0 07              5885 	push	ar7
   179E C0 06              5886 	push	ar6
   17A0 85 F0*00           5887 	mov	bits,b
   17A3 12s00r00           5888 	lcall	_setDigitalOutput
   17A6 D0 06              5889 	pop	ar6
   17A8 D0 07              5890 	pop	ar7
                    17AA   5891 	C$mdrip.c$744$1$1 ==.
                           5892 ;	apps/mdrip/mdrip.c:744: for (i=0; i < 16; i++) {
   17AA 0E                 5893 	inc	r6
   17AB BE 00 DF           5894 	cjne	r6,#0x00,00101$
   17AE 0F                 5895 	inc	r7
   17AF 80 DC              5896 	sjmp	00101$
   17B1                    5897 00105$:
                    17B1   5898 	C$mdrip.c$747$1$1 ==.
                    17B1   5899 	XG$makeAllOutputsLow$0$0 ==.
   17B1 22                 5900 	ret
                           5901 ;------------------------------------------------------------
                           5902 ;Allocation info for local variables in function 'reset_offsets'
                           5903 ;------------------------------------------------------------
                           5904 ;i                         Allocated with name '_reset_offsets_i_1_1'
                           5905 ;------------------------------------------------------------
                    17B2   5906 	G$reset_offsets$0$0 ==.
                    17B2   5907 	C$mdrip.c$749$1$1 ==.
                           5908 ;	apps/mdrip/mdrip.c:749: void reset_offsets() {
                           5909 ;	-----------------------------------------
                           5910 ;	 function reset_offsets
                           5911 ;	-----------------------------------------
   17B2                    5912 _reset_offsets:
                    17B2   5913 	C$mdrip.c$751$2$2 ==.
                           5914 ;	apps/mdrip/mdrip.c:751: for(i=0; i<4; i++) {
   17B2 7E 00              5915 	mov	r6,#0x00
   17B4 7F 00              5916 	mov	r7,#0x00
   17B6                    5917 00101$:
   17B6 C3                 5918 	clr	c
   17B7 EE                 5919 	mov	a,r6
   17B8 94 04              5920 	subb	a,#0x04
   17BA EF                 5921 	mov	a,r7
   17BB 64 80              5922 	xrl	a,#0x80
   17BD 94 80              5923 	subb	a,#0x80
   17BF 50 18              5924 	jnc	00105$
                    17C1   5925 	C$mdrip.c$752$2$2 ==.
                           5926 ;	apps/mdrip/mdrip.c:752: fOffset[i] = defaultfOffset[i];
   17C1 EE                 5927 	mov	a,r6
   17C2 24r02              5928 	add	a,#_fOffset
   17C4 F9                 5929 	mov	r1,a
   17C5 EE                 5930 	mov	a,r6
   17C6 24r23              5931 	add	a,#_defaultfOffset
   17C8 F5 82              5932 	mov	dpl,a
   17CA EF                 5933 	mov	a,r7
   17CB 34s00              5934 	addc	a,#(_defaultfOffset >> 8)
   17CD F5 83              5935 	mov	dph,a
   17CF E0                 5936 	movx	a,@dptr
   17D0 FD                 5937 	mov	r5,a
   17D1 F3                 5938 	movx	@r1,a
                    17D2   5939 	C$mdrip.c$751$1$1 ==.
                           5940 ;	apps/mdrip/mdrip.c:751: for(i=0; i<4; i++) {
   17D2 0E                 5941 	inc	r6
   17D3 BE 00 E0           5942 	cjne	r6,#0x00,00101$
   17D6 0F                 5943 	inc	r7
   17D7 80 DD              5944 	sjmp	00101$
   17D9                    5945 00105$:
                    17D9   5946 	C$mdrip.c$754$1$1 ==.
                    17D9   5947 	XG$reset_offsets$0$0 ==.
   17D9 22                 5948 	ret
                           5949 ;------------------------------------------------------------
                           5950 ;Allocation info for local variables in function 'killWithWatchdog'
                           5951 ;------------------------------------------------------------
                    17DA   5952 	G$killWithWatchdog$0$0 ==.
                    17DA   5953 	C$mdrip.c$756$1$1 ==.
                           5954 ;	apps/mdrip/mdrip.c:756: void killWithWatchdog() {
                           5955 ;	-----------------------------------------
                           5956 ;	 function killWithWatchdog
                           5957 ;	-----------------------------------------
   17DA                    5958 _killWithWatchdog:
                    17DA   5959 	C$mdrip.c$757$1$1 ==.
                           5960 ;	apps/mdrip/mdrip.c:757: WDCTL = (WDCTL & ~0x03) | 0x00;
   17DA AF C9              5961 	mov	r7,_WDCTL
   17DC 53 07 FC           5962 	anl	ar7,#0xFC
   17DF 8F C9              5963 	mov	_WDCTL,r7
                    17E1   5964 	C$mdrip.c$758$1$1 ==.
                           5965 ;	apps/mdrip/mdrip.c:758: WDCTL = (WDCTL & ~0x04) | 0x08;
   17E1 AF C9              5966 	mov	r7,_WDCTL
   17E3 74 FB              5967 	mov	a,#0xFB
   17E5 5F                 5968 	anl	a,r7
   17E6 44 08              5969 	orl	a,#0x08
   17E8 FF                 5970 	mov	r7,a
   17E9 8F C9              5971 	mov	_WDCTL,r7
                    17EB   5972 	C$mdrip.c$759$1$1 ==.
                    17EB   5973 	XG$killWithWatchdog$0$0 ==.
   17EB 22                 5974 	ret
                           5975 ;------------------------------------------------------------
                           5976 ;Allocation info for local variables in function 'goToSleep'
                           5977 ;------------------------------------------------------------
                           5978 ;sloc0                     Allocated with name '_goToSleep_sloc0_1_0'
                           5979 ;sloc1                     Allocated with name '_goToSleep_sloc1_1_0'
                           5980 ;seconds                   Allocated with name '_goToSleep_seconds_1_1'
                           5981 ;------------------------------------------------------------
                    17EC   5982 	G$goToSleep$0$0 ==.
                    17EC   5983 	C$mdrip.c$761$1$1 ==.
                           5984 ;	apps/mdrip/mdrip.c:761: XDATA void goToSleep (XDATA int16 seconds) {
                           5985 ;	-----------------------------------------
                           5986 ;	 function goToSleep
                           5987 ;	-----------------------------------------
   17EC                    5988 _goToSleep:
   17EC AF 83              5989 	mov	r7,dph
   17EE E5 82              5990 	mov	a,dpl
   17F0 90s03r2A           5991 	mov	dptr,#_goToSleep_seconds_1_1
   17F3 F0                 5992 	movx	@dptr,a
   17F4 A3                 5993 	inc	dptr
   17F5 EF                 5994 	mov	a,r7
   17F6 F0                 5995 	movx	@dptr,a
                    17F7   5996 	C$mdrip.c$762$1$1 ==.
                           5997 ;	apps/mdrip/mdrip.c:762: adcSetMillivoltCalibration(adcReadVddMillivolts());
   17F7 12s00r00           5998 	lcall	_adcReadVddMillivolts
   17FA 12s00r00           5999 	lcall	_adcSetMillivoltCalibration
                    17FD   6000 	C$mdrip.c$763$1$1 ==.
                           6001 ;	apps/mdrip/mdrip.c:763: makeAllOutputsLow();
   17FD 12s17r89           6002 	lcall	_makeAllOutputsLow
                    1800   6003 	C$mdrip.c$765$1$1 ==.
                           6004 ;	apps/mdrip/mdrip.c:765: if(!needsTimingCalibration) {
   1800 30*05 03           6005 	jnb	_needsTimingCalibration,00134$
   1803 02s19rB5           6006 	ljmp	00120$
   1806                    6007 00134$:
                    1806   6008 	C$mdrip.c$766$2$2 ==.
                           6009 ;	apps/mdrip/mdrip.c:766: if(!usbPowerPresent()){
   1806 12s00r00           6010 	lcall	_usbPowerPresent
   1809 50 03              6011 	jnc	00135$
   180B 02s19r28           6012 	ljmp	00117$
   180E                    6013 00135$:
                    180E   6014 	C$mdrip.c$772$3$2 ==.
                           6015 ;	apps/mdrip/mdrip.c:772: uint8 savedPICTL = PICTL;
   180E AF 8C              6016 	mov	r7,_PICTL
                    1810   6017 	C$mdrip.c$773$3$2 ==.
                           6018 ;	apps/mdrip/mdrip.c:773: BIT savedP0IE = P0IE;
   1810 A2 BD              6019 	mov	c,_P0IE
   1812 92*08              6020 	mov	_goToSleep_savedP0IE_3_3,c
                    1814   6021 	C$mdrip.c$774$3$2 ==.
                           6022 ;	apps/mdrip/mdrip.c:774: uint8 savedP0SEL = P0SEL;
   1814 AE F3              6023 	mov	r6,_P0SEL
                    1816   6024 	C$mdrip.c$775$3$2 ==.
                           6025 ;	apps/mdrip/mdrip.c:775: uint8 savedP0DIR = P0DIR;
   1816 AD FD              6026 	mov	r5,_P0DIR
                    1818   6027 	C$mdrip.c$776$3$2 ==.
                           6028 ;	apps/mdrip/mdrip.c:776: uint8 savedP1SEL = P1SEL;
   1818 78r4D              6029 	mov	r0,#_goToSleep_savedP1SEL_3_3
   181A E5 F4              6030 	mov	a,_P1SEL
   181C F2                 6031 	movx	@r0,a
                    181D   6032 	C$mdrip.c$777$3$2 ==.
                           6033 ;	apps/mdrip/mdrip.c:777: uint8 savedP1DIR = P1DIR;
   181D 78r4E              6034 	mov	r0,#_goToSleep_savedP1DIR_3_3
   181F E5 FE              6035 	mov	a,_P1DIR
   1821 F2                 6036 	movx	@r0,a
                    1822   6037 	C$mdrip.c$779$3$3 ==.
                           6038 ;	apps/mdrip/mdrip.c:779: sleepInit();
   1822 C0 07              6039 	push	ar7
   1824 C0 06              6040 	push	ar6
   1826 C0 05              6041 	push	ar5
   1828 12s00r00           6042 	lcall	_sleepInit
                    182B   6043 	C$mdrip.c$781$3$3 ==.
                           6044 ;	apps/mdrip/mdrip.c:781: disableUsbPullup();
   182B 12s00r00           6045 	lcall	_disableUsbPullup
                    182E   6046 	C$mdrip.c$782$3$3 ==.
                           6047 ;	apps/mdrip/mdrip.c:782: usbDeviceState = USB_STATE_DETACHED;
   182E 90s00r00           6048 	mov	dptr,#_usbDeviceState
   1831 E4                 6049 	clr	a
   1832 F0                 6050 	movx	@dptr,a
                    1833   6051 	C$mdrip.c$783$3$3 ==.
                           6052 ;	apps/mdrip/mdrip.c:783: usbEnabled = 0;
   1833 C2*06              6053 	clr	_usbEnabled
                    1835   6054 	C$mdrip.c$784$3$3 ==.
                           6055 ;	apps/mdrip/mdrip.c:784: SLEEP &= ~(1<<7);
   1835 AA BE              6056 	mov	r2,_SLEEP
   1837 53 02 7F           6057 	anl	ar2,#0x7F
   183A 8A BE              6058 	mov	_SLEEP,r2
                    183C   6059 	C$mdrip.c$786$3$3 ==.
                           6060 ;	apps/mdrip/mdrip.c:786: WORCTRL |= 0x03; // 2^5 periods
   183C 43 A2 03           6061 	orl	_WORCTRL,#0x03
                    183F   6062 	C$mdrip.c$787$3$3 ==.
                           6063 ;	apps/mdrip/mdrip.c:787: switchToRCOSC();
   183F 12s00r0E           6064 	lcall	_switchToRCOSC
   1842 D0 05              6065 	pop	ar5
   1844 D0 06              6066 	pop	ar6
   1846 D0 07              6067 	pop	ar7
                    1848   6068 	C$mdrip.c$789$3$3 ==.
                           6069 ;	apps/mdrip/mdrip.c:789: storedDescHigh = DMA0CFGH;
   1848 78r49              6070 	mov	r0,#_goToSleep_storedDescHigh_3_3
   184A E5 D5              6071 	mov	a,_DMA0CFGH
   184C F2                 6072 	movx	@r0,a
                    184D   6073 	C$mdrip.c$790$3$3 ==.
                           6074 ;	apps/mdrip/mdrip.c:790: storedDescLow = DMA0CFGL;
   184D 78r4A              6075 	mov	r0,#_goToSleep_storedDescLow_3_3
   184F E5 D4              6076 	mov	a,_DMA0CFGL
   1851 F2                 6077 	movx	@r0,a
                    1852   6078 	C$mdrip.c$791$3$3 ==.
                           6079 ;	apps/mdrip/mdrip.c:791: storedDma0Armed = DMAARM & 0x01;
   1852 E5 D6              6080 	mov	a,_DMAARM
   1854 54 01              6081 	anl	a,#0x01
   1856 24 FF              6082 	add	a,#0xff
   1858 92*07              6083 	mov	_goToSleep_storedDma0Armed_3_3,c
                    185A   6084 	C$mdrip.c$792$3$3 ==.
                           6085 ;	apps/mdrip/mdrip.c:792: DMAARM |= 0x81;
   185A 43 D6 81           6086 	orl	_DMAARM,#0x81
                    185D   6087 	C$mdrip.c$793$3$3 ==.
                           6088 ;	apps/mdrip/mdrip.c:793: dmaDesc[0] = ((unsigned int)& PM2_BUF) >> 8;
   185D 7Ar27              6089 	mov	r2,#_PM2_BUF
   185F 7Bs00              6090 	mov	r3,#(_PM2_BUF >> 8)
   1861 8B 02              6091 	mov	ar2,r3
   1863 90s00r2E           6092 	mov	dptr,#_dmaDesc
   1866 EA                 6093 	mov	a,r2
   1867 F0                 6094 	movx	@dptr,a
                    1868   6095 	C$mdrip.c$794$3$3 ==.
                           6096 ;	apps/mdrip/mdrip.c:794: dmaDesc[1] = (unsigned int)& PM2_BUF;
   1868 7Ar27              6097 	mov	r2,#_PM2_BUF
   186A 7Bs00              6098 	mov	r3,#(_PM2_BUF >> 8)
   186C 90s00r2F           6099 	mov	dptr,#(_dmaDesc + 0x0001)
   186F EA                 6100 	mov	a,r2
   1870 F0                 6101 	movx	@dptr,a
                    1871   6102 	C$mdrip.c$796$3$3 ==.
                           6103 ;	apps/mdrip/mdrip.c:796: DMA0CFGH = ((unsigned int)&dmaDesc) >> 8;
   1871 7Ar2E              6104 	mov	r2,#_dmaDesc
   1873 7Bs00              6105 	mov	r3,#(_dmaDesc >> 8)
   1875 8B D5              6106 	mov	_DMA0CFGH,r3
                    1877   6107 	C$mdrip.c$797$3$3 ==.
                           6108 ;	apps/mdrip/mdrip.c:797: DMA0CFGL = (unsigned int)&dmaDesc;
   1877 7Ar2E              6109 	mov	r2,#_dmaDesc
   1879 7Bs00              6110 	mov	r3,#(_dmaDesc >> 8)
   187B 8A D4              6111 	mov	_DMA0CFGL,r2
                    187D   6112 	C$mdrip.c$798$3$3 ==.
                           6113 ;	apps/mdrip/mdrip.c:798: DMAARM = 0x01;
   187D 75 D6 01           6114 	mov	_DMAARM,#0x01
                    1880   6115 	C$mdrip.c$801$3$3 ==.
                           6116 ;	apps/mdrip/mdrip.c:801: storedIEN0 = IEN0;
   1880 AB A8              6117 	mov	r3,_IEN0
                    1882   6118 	C$mdrip.c$802$3$3 ==.
                           6119 ;	apps/mdrip/mdrip.c:802: storedIEN1 = IEN1;
   1882 78r4B              6120 	mov	r0,#_goToSleep_storedIEN1_3_3
   1884 E5 B8              6121 	mov	a,_IEN1
   1886 F2                 6122 	movx	@r0,a
                    1887   6123 	C$mdrip.c$803$3$3 ==.
                           6124 ;	apps/mdrip/mdrip.c:803: storedIEN2 = IEN2;
   1887 78r4C              6125 	mov	r0,#_goToSleep_storedIEN2_3_3
   1889 E5 9A              6126 	mov	a,_IEN2
   188B F2                 6127 	movx	@r0,a
                    188C   6128 	C$mdrip.c$806$3$3 ==.
                           6129 ;	apps/mdrip/mdrip.c:806: IEN0 |= 0xA0;
   188C 43 A8 A0           6130 	orl	_IEN0,#0xA0
                    188F   6131 	C$mdrip.c$809$3$3 ==.
                           6132 ;	apps/mdrip/mdrip.c:809: IEN0 &= 0xA0;
   188F 53 A8 A0           6133 	anl	_IEN0,#0xA0
                    1892   6134 	C$mdrip.c$810$3$3 ==.
                           6135 ;	apps/mdrip/mdrip.c:810: IEN1 &= ~0x3F;
   1892 AA B8              6136 	mov	r2,_IEN1
   1894 53 02 C0           6137 	anl	ar2,#0xC0
   1897 8A B8              6138 	mov	_IEN1,r2
                    1899   6139 	C$mdrip.c$811$3$3 ==.
                           6140 ;	apps/mdrip/mdrip.c:811: IEN2 &= ~0x3F;
   1899 AA 9A              6141 	mov	r2,_IEN2
   189B 53 02 C0           6142 	anl	ar2,#0xC0
   189E 8A 9A              6143 	mov	_IEN2,r2
                    18A0   6144 	C$mdrip.c$813$3$3 ==.
                           6145 ;	apps/mdrip/mdrip.c:813: WORCTRL |= 0x04;  // Reset
   18A0 43 A2 04           6146 	orl	_WORCTRL,#0x04
                    18A3   6147 	C$mdrip.c$814$3$3 ==.
                           6148 ;	apps/mdrip/mdrip.c:814: temp = WORTIME0;
   18A3 AA A5              6149 	mov	r2,_WORTIME0
                    18A5   6150 	C$mdrip.c$815$3$3 ==.
                           6151 ;	apps/mdrip/mdrip.c:815: while(temp == WORTIME0) {};
   18A5                    6152 00101$:
   18A5 EA                 6153 	mov	a,r2
   18A6 B5 A5 02           6154 	cjne	a,_WORTIME0,00136$
   18A9 80 FA              6155 	sjmp	00101$
   18AB                    6156 00136$:
                    18AB   6157 	C$mdrip.c$816$1$1 ==.
                           6158 ;	apps/mdrip/mdrip.c:816: WOREVT1 = seconds >> 8;
   18AB C0 03              6159 	push	ar3
   18AD 90s03r2A           6160 	mov	dptr,#_goToSleep_seconds_1_1
   18B0 E0                 6161 	movx	a,@dptr
   18B1 FB                 6162 	mov	r3,a
   18B2 A3                 6163 	inc	dptr
   18B3 E0                 6164 	movx	a,@dptr
   18B4 FC                 6165 	mov	r4,a
   18B5 8C A4              6166 	mov	_WOREVT1,r4
                    18B7   6167 	C$mdrip.c$817$3$3 ==.
                           6168 ;	apps/mdrip/mdrip.c:817: WOREVT0 = seconds;
   18B7 8B A3              6169 	mov	_WOREVT0,r3
                    18B9   6170 	C$mdrip.c$819$3$3 ==.
                           6171 ;	apps/mdrip/mdrip.c:819: temp = WORTIME0;
   18B9 AA A5              6172 	mov	r2,_WORTIME0
                    18BB   6173 	C$mdrip.c$865$1$1 ==.
                           6174 ;	apps/mdrip/mdrip.c:865: makeAllOutputs();
   18BB D0 03              6175 	pop	ar3
                    18BD   6176 	C$mdrip.c$820$3$3 ==.
                           6177 ;	apps/mdrip/mdrip.c:820: while(temp == WORTIME0) {};
   18BD                    6178 00104$:
   18BD EA                 6179 	mov	a,r2
   18BE B5 A5 02           6180 	cjne	a,_WORTIME0,00137$
   18C1 80 FA              6181 	sjmp	00104$
   18C3                    6182 00137$:
                    18C3   6183 	C$mdrip.c$822$3$3 ==.
                           6184 ;	apps/mdrip/mdrip.c:822: MEMCTR |= 0x02;
   18C3 43 C7 02           6185 	orl	_MEMCTR,#0x02
                    18C6   6186 	C$mdrip.c$823$3$3 ==.
                           6187 ;	apps/mdrip/mdrip.c:823: SLEEP = 0x06;
   18C6 75 BE 06           6188 	mov	_SLEEP,#0x06
                    18C9   6189 	C$mdrip.c$824$3$3 ==.
                           6190 ;	apps/mdrip/mdrip.c:824: __asm nop __endasm;
   18C9 00                 6191 	 nop 
                    18CA   6192 	C$mdrip.c$825$3$3 ==.
                           6193 ;	apps/mdrip/mdrip.c:825: __asm nop __endasm;
   18CA 00                 6194 	 nop 
                    18CB   6195 	C$mdrip.c$826$3$3 ==.
                           6196 ;	apps/mdrip/mdrip.c:826: __asm nop __endasm;
   18CB 00                 6197 	 nop 
                    18CC   6198 	C$mdrip.c$827$3$3 ==.
                           6199 ;	apps/mdrip/mdrip.c:827: if(SLEEP & 0x03){
   18CC E5 BE              6200 	mov	a,_SLEEP
   18CE 54 03              6201 	anl	a,#0x03
   18D0 60 08              6202 	jz	00108$
                    18D2   6203 	C$mdrip.c$828$4$6 ==.
                           6204 ;	apps/mdrip/mdrip.c:828: __asm mov 0xD7, #0x01 __endasm;
   18D2 75 D7 01           6205 	 mov 0xD7, #0x01 
                    18D5   6206 	C$mdrip.c$829$4$6 ==.
                           6207 ;	apps/mdrip/mdrip.c:829: __asm nop __endasm;
   18D5 00                 6208 	 nop 
                    18D6   6209 	C$mdrip.c$830$4$6 ==.
                           6210 ;	apps/mdrip/mdrip.c:830: __asm orl 0x87, #0x01 __endasm;
   18D6 43 87 01           6211 	 orl 0x87, #0x01 
                    18D9   6212 	C$mdrip.c$831$4$6 ==.
                           6213 ;	apps/mdrip/mdrip.c:831: __asm nop __endasm;
   18D9 00                 6214 	 nop 
   18DA                    6215 00108$:
                    18DA   6216 	C$mdrip.c$833$3$3 ==.
                           6217 ;	apps/mdrip/mdrip.c:833: IEN0 = storedIEN0;
   18DA 8B A8              6218 	mov	_IEN0,r3
                    18DC   6219 	C$mdrip.c$834$3$3 ==.
                           6220 ;	apps/mdrip/mdrip.c:834: IEN1 = storedIEN1;
   18DC 78r4B              6221 	mov	r0,#_goToSleep_storedIEN1_3_3
   18DE E2                 6222 	movx	a,@r0
   18DF F5 B8              6223 	mov	_IEN1,a
                    18E1   6224 	C$mdrip.c$835$3$3 ==.
                           6225 ;	apps/mdrip/mdrip.c:835: IEN2 = storedIEN2;
   18E1 78r4C              6226 	mov	r0,#_goToSleep_storedIEN2_3_3
   18E3 E2                 6227 	movx	a,@r0
   18E4 F5 9A              6228 	mov	_IEN2,a
                    18E6   6229 	C$mdrip.c$836$3$3 ==.
                           6230 ;	apps/mdrip/mdrip.c:836: DMA0CFGH = storedDescHigh;
   18E6 78r49              6231 	mov	r0,#_goToSleep_storedDescHigh_3_3
   18E8 E2                 6232 	movx	a,@r0
   18E9 F5 D5              6233 	mov	_DMA0CFGH,a
                    18EB   6234 	C$mdrip.c$837$3$3 ==.
                           6235 ;	apps/mdrip/mdrip.c:837: DMA0CFGL = storedDescLow;
   18EB 78r4A              6236 	mov	r0,#_goToSleep_storedDescLow_3_3
   18ED E2                 6237 	movx	a,@r0
   18EE F5 D4              6238 	mov	_DMA0CFGL,a
                    18F0   6239 	C$mdrip.c$838$3$3 ==.
                           6240 ;	apps/mdrip/mdrip.c:838: if(storedDma0Armed){
   18F0 30*07 03           6241 	jnb	_goToSleep_storedDma0Armed_3_3,00110$
                    18F3   6242 	C$mdrip.c$839$4$7 ==.
                           6243 ;	apps/mdrip/mdrip.c:839: DMAARM |= 0x01;
   18F3 43 D6 01           6244 	orl	_DMAARM,#0x01
   18F6                    6245 00110$:
                    18F6   6246 	C$mdrip.c$842$3$3 ==.
                           6247 ;	apps/mdrip/mdrip.c:842: boardClockInit();
   18F6 C0 07              6248 	push	ar7
   18F8 C0 06              6249 	push	ar6
   18FA C0 05              6250 	push	ar5
   18FC 12s00r00           6251 	lcall	_boardClockInit
   18FF D0 05              6252 	pop	ar5
   1901 D0 06              6253 	pop	ar6
   1903 D0 07              6254 	pop	ar7
                    1905   6255 	C$mdrip.c$844$3$3 ==.
                           6256 ;	apps/mdrip/mdrip.c:844: PICTL = savedPICTL;
   1905 8F 8C              6257 	mov	_PICTL,r7
                    1907   6258 	C$mdrip.c$845$3$3 ==.
                           6259 ;	apps/mdrip/mdrip.c:845: P0IE = savedP0IE;
   1907 A2*08              6260 	mov	c,_goToSleep_savedP0IE_3_3
   1909 92 BD              6261 	mov	_P0IE,c
                    190B   6262 	C$mdrip.c$846$3$3 ==.
                           6263 ;	apps/mdrip/mdrip.c:846: P0SEL = savedP0SEL;
   190B 8E F3              6264 	mov	_P0SEL,r6
                    190D   6265 	C$mdrip.c$847$3$3 ==.
                           6266 ;	apps/mdrip/mdrip.c:847: P0DIR = savedP0DIR;
   190D 8D FD              6267 	mov	_P0DIR,r5
                    190F   6268 	C$mdrip.c$848$3$3 ==.
                           6269 ;	apps/mdrip/mdrip.c:848: P1SEL = savedP1SEL;
   190F 78r4D              6270 	mov	r0,#_goToSleep_savedP1SEL_3_3
   1911 E2                 6271 	movx	a,@r0
   1912 F5 F4              6272 	mov	_P1SEL,a
                    1914   6273 	C$mdrip.c$849$3$3 ==.
                           6274 ;	apps/mdrip/mdrip.c:849: P1DIR = savedP1DIR;
   1914 78r4E              6275 	mov	r0,#_goToSleep_savedP1DIR_3_3
   1916 E2                 6276 	movx	a,@r0
   1917 F5 FE              6277 	mov	_P1DIR,a
                    1919   6278 	C$mdrip.c$850$3$3 ==.
                           6279 ;	apps/mdrip/mdrip.c:850: USBPOW = 1;
   1919 90 DE 01           6280 	mov	dptr,#_USBPOW
   191C 74 01              6281 	mov	a,#0x01
   191E F0                 6282 	movx	@dptr,a
                    191F   6283 	C$mdrip.c$851$3$3 ==.
                           6284 ;	apps/mdrip/mdrip.c:851: USBCIE = 0b0111;
   191F 90 DE 0B           6285 	mov	dptr,#_USBCIE
   1922 74 07              6286 	mov	a,#0x07
   1924 F0                 6287 	movx	@dptr,a
   1925 02s19rB5           6288 	ljmp	00120$
   1928                    6289 00117$:
                    1928   6290 	C$mdrip.c$853$3$8 ==.
                           6291 ;	apps/mdrip/mdrip.c:853: uint32 start_waiting = getMs();
   1928 12s00r00           6292 	lcall	_getMs
   192B 78r4F              6293 	mov	r0,#_goToSleep_start_waiting_3_8
   192D C0 E0              6294 	push	acc
   192F E5 82              6295 	mov	a,dpl
   1931 F2                 6296 	movx	@r0,a
   1932 08                 6297 	inc	r0
   1933 E5 83              6298 	mov	a,dph
   1935 F2                 6299 	movx	@r0,a
   1936 08                 6300 	inc	r0
   1937 E5 F0              6301 	mov	a,b
   1939 F2                 6302 	movx	@r0,a
   193A D0 E0              6303 	pop	acc
   193C 08                 6304 	inc	r0
   193D F2                 6305 	movx	@r0,a
                    193E   6306 	C$mdrip.c$854$3$8 ==.
                           6307 ;	apps/mdrip/mdrip.c:854: if(!usbEnabled) {
   193E 20*06 0B           6308 	jb	_usbEnabled,00112$
                    1941   6309 	C$mdrip.c$855$4$9 ==.
                           6310 ;	apps/mdrip/mdrip.c:855: usbDeviceState = USB_STATE_POWERED;
   1941 90s00r00           6311 	mov	dptr,#_usbDeviceState
   1944 74 02              6312 	mov	a,#0x02
   1946 F0                 6313 	movx	@dptr,a
                    1947   6314 	C$mdrip.c$856$4$9 ==.
                           6315 ;	apps/mdrip/mdrip.c:856: enableUsbPullup();
   1947 12s00r00           6316 	lcall	_enableUsbPullup
                    194A   6317 	C$mdrip.c$857$4$9 ==.
                           6318 ;	apps/mdrip/mdrip.c:857: usbEnabled = 1;
   194A D2*06              6319 	setb	_usbEnabled
   194C                    6320 00112$:
                    194C   6321 	C$mdrip.c$859$3$8 ==.
                           6322 ;	apps/mdrip/mdrip.c:859: delayMs(100);
   194C 90 00 64           6323 	mov	dptr,#0x0064
   194F 12s00r00           6324 	lcall	_delayMs
                    1952   6325 	C$mdrip.c$860$3$8 ==.
                           6326 ;	apps/mdrip/mdrip.c:860: while((getMs() - start_waiting) < (seconds * 1000)) {
   1952 90s03r2A           6327 	mov	dptr,#_goToSleep_seconds_1_1
   1955 E0                 6328 	movx	a,@dptr
   1956 FA                 6329 	mov	r2,a
   1957 A3                 6330 	inc	dptr
   1958 E0                 6331 	movx	a,@dptr
   1959 FB                 6332 	mov	r3,a
   195A 78r00              6333 	mov	r0,#__mulint_PARM_2
   195C EA                 6334 	mov	a,r2
   195D F2                 6335 	movx	@r0,a
   195E 08                 6336 	inc	r0
   195F EB                 6337 	mov	a,r3
   1960 F2                 6338 	movx	@r0,a
   1961 90 03 E8           6339 	mov	dptr,#0x03E8
   1964 12s00r00           6340 	lcall	__mulint
   1967 85 82*12           6341 	mov	_goToSleep_sloc0_1_0,dpl
   196A 85 83*13           6342 	mov	(_goToSleep_sloc0_1_0 + 1),dph
   196D                    6343 00113$:
   196D 12s00r00           6344 	lcall	_getMs
   1970 AC 82              6345 	mov	r4,dpl
   1972 AD 83              6346 	mov	r5,dph
   1974 AE F0              6347 	mov	r6,b
   1976 FF                 6348 	mov	r7,a
   1977 78r4F              6349 	mov	r0,#_goToSleep_start_waiting_3_8
   1979 D3                 6350 	setb	c
   197A E2                 6351 	movx	a,@r0
   197B 9C                 6352 	subb	a,r4
   197C F4                 6353 	cpl	a
   197D B3                 6354 	cpl	c
   197E F5*14              6355 	mov	_goToSleep_sloc1_1_0,a
   1980 B3                 6356 	cpl	c
   1981 08                 6357 	inc	r0
   1982 E2                 6358 	movx	a,@r0
   1983 9D                 6359 	subb	a,r5
   1984 F4                 6360 	cpl	a
   1985 B3                 6361 	cpl	c
   1986 F5*15              6362 	mov	(_goToSleep_sloc1_1_0 + 1),a
   1988 B3                 6363 	cpl	c
   1989 08                 6364 	inc	r0
   198A E2                 6365 	movx	a,@r0
   198B 9E                 6366 	subb	a,r6
   198C F4                 6367 	cpl	a
   198D B3                 6368 	cpl	c
   198E F5*16              6369 	mov	(_goToSleep_sloc1_1_0 + 2),a
   1990 B3                 6370 	cpl	c
   1991 08                 6371 	inc	r0
   1992 E2                 6372 	movx	a,@r0
   1993 9F                 6373 	subb	a,r7
   1994 F4                 6374 	cpl	a
   1995 F5*17              6375 	mov	(_goToSleep_sloc1_1_0 + 3),a
   1997 AA*12              6376 	mov	r2,_goToSleep_sloc0_1_0
   1999 E5*13              6377 	mov	a,(_goToSleep_sloc0_1_0 + 1)
   199B FB                 6378 	mov	r3,a
   199C 33                 6379 	rlc	a
   199D 95 E0              6380 	subb	a,acc
   199F FE                 6381 	mov	r6,a
   19A0 FF                 6382 	mov	r7,a
   19A1 C3                 6383 	clr	c
   19A2 E5*14              6384 	mov	a,_goToSleep_sloc1_1_0
   19A4 9A                 6385 	subb	a,r2
   19A5 E5*15              6386 	mov	a,(_goToSleep_sloc1_1_0 + 1)
   19A7 9B                 6387 	subb	a,r3
   19A8 E5*16              6388 	mov	a,(_goToSleep_sloc1_1_0 + 2)
   19AA 9E                 6389 	subb	a,r6
   19AB E5*17              6390 	mov	a,(_goToSleep_sloc1_1_0 + 3)
   19AD 9F                 6391 	subb	a,r7
   19AE 50 05              6392 	jnc	00120$
                    19B0   6393 	C$mdrip.c$861$4$10 ==.
                           6394 ;	apps/mdrip/mdrip.c:861: doServices();
   19B0 12s03r73           6395 	lcall	_doServices
   19B3 80 B8              6396 	sjmp	00113$
   19B5                    6397 00120$:
                    19B5   6398 	C$mdrip.c$865$1$1 ==.
                           6399 ;	apps/mdrip/mdrip.c:865: makeAllOutputs();
   19B5 12s17r60           6400 	lcall	_makeAllOutputs
                    19B8   6401 	C$mdrip.c$866$1$1 ==.
                    19B8   6402 	XG$goToSleep$0$0 ==.
   19B8 22                 6403 	ret
                           6404 ;------------------------------------------------------------
                           6405 ;Allocation info for local variables in function 'putchar'
                           6406 ;------------------------------------------------------------
                           6407 ;c                         Allocated with name '_putchar_c_1_1'
                           6408 ;------------------------------------------------------------
                    19B9   6409 	G$putchar$0$0 ==.
                    19B9   6410 	C$mdrip.c$869$1$1 ==.
                           6411 ;	apps/mdrip/mdrip.c:869: void putchar(XDATA char c) {
                           6412 ;	-----------------------------------------
                           6413 ;	 function putchar
                           6414 ;	-----------------------------------------
   19B9                    6415 _putchar:
   19B9 E5 82              6416 	mov	a,dpl
   19BB 90s03r2C           6417 	mov	dptr,#_putchar_c_1_1
   19BE F0                 6418 	movx	@dptr,a
                    19BF   6419 	C$mdrip.c$870$1$1 ==.
                           6420 ;	apps/mdrip/mdrip.c:870: while(uart1TxAvailable() == 0) {								//  Loop until space in the TX buffer to send a character
   19BF                    6421 00101$:
   19BF 12s00r00           6422 	lcall	_uart1TxAvailable
   19C2 E5 82              6423 	mov	a,dpl
   19C4 70 08              6424 	jnz	00103$
                    19C6   6425 	C$mdrip.c$871$3$3 ==.
                           6426 ;	apps/mdrip/mdrip.c:871: LED_RED(1);													// Error Indicator
   19C6 43 FF 02           6427 	orl	_P2DIR,#0x02
                    19C9   6428 	C$mdrip.c$872$2$2 ==.
                           6429 ;	apps/mdrip/mdrip.c:872: boardService();
   19C9 12s00r00           6430 	lcall	_boardService
   19CC 80 F1              6431 	sjmp	00101$
   19CE                    6432 00103$:
                    19CE   6433 	C$mdrip.c$874$1$1 ==.
                           6434 ;	apps/mdrip/mdrip.c:874: uart1TxSendByte(c);
   19CE 90s03r2C           6435 	mov	dptr,#_putchar_c_1_1
   19D1 E0                 6436 	movx	a,@dptr
   19D2 FF                 6437 	mov	r7,a
   19D3 F5 82              6438 	mov	dpl,a
   19D5 C0 07              6439 	push	ar7
   19D7 12s00r00           6440 	lcall	_uart1TxSendByte
                    19DA   6441 	C$mdrip.c$875$1$1 ==.
                           6442 ;	apps/mdrip/mdrip.c:875: if (usbPowerPresent()) {
   19DA 12s00r00           6443 	lcall	_usbPowerPresent
   19DD D0 07              6444 	pop	ar7
   19DF 50 1C              6445 	jnc	00108$
                    19E1   6446 	C$mdrip.c$876$2$4 ==.
                           6447 ;	apps/mdrip/mdrip.c:876: while(usbComTxAvailable() == 0) {							//  Loop until space in the TX buffer to send a character
   19E1                    6448 00104$:
   19E1 C0 07              6449 	push	ar7
   19E3 12s00r00           6450 	lcall	_usbComTxAvailable
   19E6 E5 82              6451 	mov	a,dpl
   19E8 D0 07              6452 	pop	ar7
   19EA 70 09              6453 	jnz	00106$
                    19EC   6454 	C$mdrip.c$878$3$5 ==.
                           6455 ;	apps/mdrip/mdrip.c:878: boardService();
   19EC C0 07              6456 	push	ar7
   19EE 12s00r00           6457 	lcall	_boardService
   19F1 D0 07              6458 	pop	ar7
   19F3 80 EC              6459 	sjmp	00104$
   19F5                    6460 00106$:
                    19F5   6461 	C$mdrip.c$880$2$4 ==.
                           6462 ;	apps/mdrip/mdrip.c:880: usbComTxSendByte(c);
   19F5 8F 82              6463 	mov	dpl,r7
   19F7 12s00r00           6464 	lcall	_usbComTxSendByte
                    19FA   6465 	C$mdrip.c$881$2$4 ==.
                           6466 ;	apps/mdrip/mdrip.c:881: boardService();
   19FA 12s00r00           6467 	lcall	_boardService
   19FD                    6468 00108$:
                    19FD   6469 	C$mdrip.c$883$2$6 ==.
                           6470 ;	apps/mdrip/mdrip.c:883: LED_RED(0);														// Error gone
   19FD AF FF              6471 	mov	r7,_P2DIR
   19FF 53 07 FD           6472 	anl	ar7,#0xFD
   1A02 8F FF              6473 	mov	_P2DIR,r7
                    1A04   6474 	C$mdrip.c$884$2$6 ==.
                    1A04   6475 	XG$putchar$0$0 ==.
   1A04 22                 6476 	ret
                           6477 ;------------------------------------------------------------
                           6478 ;Allocation info for local variables in function 'printfUSB'
                           6479 ;------------------------------------------------------------
                           6480 ;length                    Allocated with name '_printfUSB_length_1_1'
                           6481 ;i                         Allocated with name '_printfUSB_i_1_1'
                           6482 ;------------------------------------------------------------
                    1A05   6483 	G$printfUSB$0$0 ==.
                    1A05   6484 	C$mdrip.c$886$2$6 ==.
                           6485 ;	apps/mdrip/mdrip.c:886: void printfUSB(char * stringForUSB) {
                           6486 ;	-----------------------------------------
                           6487 ;	 function printfUSB
                           6488 ;	-----------------------------------------
   1A05                    6489 _printfUSB:
   1A05 AD 82              6490 	mov	r5,dpl
   1A07 AE 83              6491 	mov	r6,dph
   1A09 AF F0              6492 	mov	r7,b
                    1A0B   6493 	C$mdrip.c$889$1$1 ==.
                           6494 ;	apps/mdrip/mdrip.c:889: if (usbPowerPresent()) {
   1A0B C0 07              6495 	push	ar7
   1A0D C0 06              6496 	push	ar6
   1A0F C0 05              6497 	push	ar5
   1A11 12s00r00           6498 	lcall	_usbPowerPresent
   1A14 D0 05              6499 	pop	ar5
   1A16 D0 06              6500 	pop	ar6
   1A18 D0 07              6501 	pop	ar7
   1A1A 40 03              6502 	jc	00117$
   1A1C 02s1ArC9           6503 	ljmp	00110$
   1A1F                    6504 00117$:
                    1A1F   6505 	C$mdrip.c$891$2$2 ==.
                           6506 ;	apps/mdrip/mdrip.c:891: length = strlen(stringForUSB);
   1A1F 8D 82              6507 	mov	dpl,r5
   1A21 8E 83              6508 	mov	dph,r6
   1A23 8F F0              6509 	mov	b,r7
   1A25 C0 07              6510 	push	ar7
   1A27 C0 06              6511 	push	ar6
   1A29 C0 05              6512 	push	ar5
   1A2B 12s00r00           6513 	lcall	_strlen
   1A2E AB 82              6514 	mov	r3,dpl
   1A30 D0 05              6515 	pop	ar5
   1A32 D0 06              6516 	pop	ar6
   1A34 D0 07              6517 	pop	ar7
                    1A36   6518 	C$mdrip.c$892$2$2 ==.
                           6519 ;	apps/mdrip/mdrip.c:892: stringForUSB[length++] = ('/r');
   1A36 EB                 6520 	mov	a,r3
   1A37 04                 6521 	inc	a
   1A38 FC                 6522 	mov	r4,a
   1A39 EB                 6523 	mov	a,r3
   1A3A 2D                 6524 	add	a,r5
   1A3B F8                 6525 	mov	r0,a
   1A3C E4                 6526 	clr	a
   1A3D 3E                 6527 	addc	a,r6
   1A3E F9                 6528 	mov	r1,a
   1A3F 8F 02              6529 	mov	ar2,r7
   1A41 88 82              6530 	mov	dpl,r0
   1A43 89 83              6531 	mov	dph,r1
   1A45 8A F0              6532 	mov	b,r2
   1A47 74 2F              6533 	mov	a,#0x2F
   1A49 12s00r00           6534 	lcall	__gptrput
                    1A4C   6535 	C$mdrip.c$893$2$2 ==.
                           6536 ;	apps/mdrip/mdrip.c:893: stringForUSB[length++] = ('/n');
   1A4C 0B                 6537 	inc	r3
   1A4D 0B                 6538 	inc	r3
   1A4E EC                 6539 	mov	a,r4
   1A4F 2D                 6540 	add	a,r5
   1A50 F9                 6541 	mov	r1,a
   1A51 E4                 6542 	clr	a
   1A52 3E                 6543 	addc	a,r6
   1A53 FA                 6544 	mov	r2,a
   1A54 8F 04              6545 	mov	ar4,r7
   1A56 89 82              6546 	mov	dpl,r1
   1A58 8A 83              6547 	mov	dph,r2
   1A5A 8C F0              6548 	mov	b,r4
   1A5C 74 2F              6549 	mov	a,#0x2F
   1A5E 12s00r00           6550 	lcall	__gptrput
                    1A61   6551 	C$mdrip.c$895$2$1 ==.
                           6552 ;	apps/mdrip/mdrip.c:895: for(i = 0; i < length; ++i) {
   1A61 7C 00              6553 	mov	r4,#0x00
   1A63                    6554 00106$:
   1A63 C3                 6555 	clr	c
   1A64 EC                 6556 	mov	a,r4
   1A65 9B                 6557 	subb	a,r3
   1A66 50 61              6558 	jnc	00110$
                    1A68   6559 	C$mdrip.c$896$3$3 ==.
                           6560 ;	apps/mdrip/mdrip.c:896: while(usbComTxAvailable() == 0) {							//  Loop until space in the TX buffer to send each character
   1A68                    6561 00101$:
   1A68 C0 07              6562 	push	ar7
   1A6A C0 06              6563 	push	ar6
   1A6C C0 05              6564 	push	ar5
   1A6E C0 04              6565 	push	ar4
   1A70 C0 03              6566 	push	ar3
   1A72 12s00r00           6567 	lcall	_usbComTxAvailable
   1A75 E5 82              6568 	mov	a,dpl
   1A77 D0 03              6569 	pop	ar3
   1A79 D0 04              6570 	pop	ar4
   1A7B D0 05              6571 	pop	ar5
   1A7D D0 06              6572 	pop	ar6
   1A7F D0 07              6573 	pop	ar7
   1A81 70 19              6574 	jnz	00103$
                    1A83   6575 	C$mdrip.c$897$4$4 ==.
                           6576 ;	apps/mdrip/mdrip.c:897: doServices();
   1A83 C0 07              6577 	push	ar7
   1A85 C0 06              6578 	push	ar6
   1A87 C0 05              6579 	push	ar5
   1A89 C0 04              6580 	push	ar4
   1A8B C0 03              6581 	push	ar3
   1A8D 12s03r73           6582 	lcall	_doServices
   1A90 D0 03              6583 	pop	ar3
   1A92 D0 04              6584 	pop	ar4
   1A94 D0 05              6585 	pop	ar5
   1A96 D0 06              6586 	pop	ar6
   1A98 D0 07              6587 	pop	ar7
   1A9A 80 CC              6588 	sjmp	00101$
   1A9C                    6589 00103$:
                    1A9C   6590 	C$mdrip.c$899$3$3 ==.
                           6591 ;	apps/mdrip/mdrip.c:899: usbComTxSendByte(stringForUSB[i]);		
   1A9C EC                 6592 	mov	a,r4
   1A9D 2D                 6593 	add	a,r5
   1A9E F8                 6594 	mov	r0,a
   1A9F E4                 6595 	clr	a
   1AA0 3E                 6596 	addc	a,r6
   1AA1 F9                 6597 	mov	r1,a
   1AA2 8F 02              6598 	mov	ar2,r7
   1AA4 88 82              6599 	mov	dpl,r0
   1AA6 89 83              6600 	mov	dph,r1
   1AA8 8A F0              6601 	mov	b,r2
   1AAA 12s00r00           6602 	lcall	__gptrget
   1AAD F5 82              6603 	mov	dpl,a
   1AAF C0 07              6604 	push	ar7
   1AB1 C0 06              6605 	push	ar6
   1AB3 C0 05              6606 	push	ar5
   1AB5 C0 04              6607 	push	ar4
   1AB7 C0 03              6608 	push	ar3
   1AB9 12s00r00           6609 	lcall	_usbComTxSendByte
   1ABC D0 03              6610 	pop	ar3
   1ABE D0 04              6611 	pop	ar4
   1AC0 D0 05              6612 	pop	ar5
   1AC2 D0 06              6613 	pop	ar6
   1AC4 D0 07              6614 	pop	ar7
                    1AC6   6615 	C$mdrip.c$895$2$2 ==.
                           6616 ;	apps/mdrip/mdrip.c:895: for(i = 0; i < length; ++i) {
   1AC6 0C                 6617 	inc	r4
   1AC7 80 9A              6618 	sjmp	00106$
   1AC9                    6619 00110$:
                    1AC9   6620 	C$mdrip.c$904$2$1 ==.
                    1AC9   6621 	XG$printfUSB$0$0 ==.
   1AC9 22                 6622 	ret
                           6623 ;------------------------------------------------------------
                           6624 ;Allocation info for local variables in function 'swap_channel'
                           6625 ;------------------------------------------------------------
                           6626 ;newFSCTRL0                Allocated with name '_swap_channel_PARM_2'
                           6627 ;channel                   Allocated with name '_swap_channel_channel_1_1'
                           6628 ;------------------------------------------------------------
                    1ACA   6629 	G$swap_channel$0$0 ==.
                    1ACA   6630 	C$mdrip.c$907$2$1 ==.
                           6631 ;	apps/mdrip/mdrip.c:907: void swap_channel(XDATA uint8 channel, XDATA uint8 newFSCTRL0) {
                           6632 ;	-----------------------------------------
                           6633 ;	 function swap_channel
                           6634 ;	-----------------------------------------
   1ACA                    6635 _swap_channel:
   1ACA E5 82              6636 	mov	a,dpl
   1ACC 90s03r2E           6637 	mov	dptr,#_swap_channel_channel_1_1
   1ACF F0                 6638 	movx	@dptr,a
                    1AD0   6639 	C$mdrip.c$908$1$1 ==.
                           6640 ;	apps/mdrip/mdrip.c:908: do {
   1AD0                    6641 00101$:
                    1AD0   6642 	C$mdrip.c$909$2$2 ==.
                           6643 ;	apps/mdrip/mdrip.c:909: RFST = 4;   //SIDLE
   1AD0 75 E1 04           6644 	mov	_RFST,#0x04
                    1AD3   6645 	C$mdrip.c$910$1$1 ==.
                           6646 ;	apps/mdrip/mdrip.c:910: } while (MARCSTATE != 0x01);
   1AD3 90 DF 3B           6647 	mov	dptr,#_MARCSTATE
   1AD6 E0                 6648 	movx	a,@dptr
   1AD7 FF                 6649 	mov	r7,a
   1AD8 BF 01 F5           6650 	cjne	r7,#0x01,00101$
                    1ADB   6651 	C$mdrip.c$912$1$1 ==.
                           6652 ;	apps/mdrip/mdrip.c:912: FSCTRL0 = newFSCTRL0;
   1ADB 90s03r2D           6653 	mov	dptr,#_swap_channel_PARM_2
   1ADE E0                 6654 	movx	a,@dptr
   1ADF 90 DF 08           6655 	mov	dptr,#_FSCTRL0
   1AE2 F0                 6656 	movx	@dptr,a
                    1AE3   6657 	C$mdrip.c$913$1$1 ==.
                           6658 ;	apps/mdrip/mdrip.c:913: CHANNR = channel;
   1AE3 90s03r2E           6659 	mov	dptr,#_swap_channel_channel_1_1
   1AE6 E0                 6660 	movx	a,@dptr
   1AE7 90 DF 06           6661 	mov	dptr,#_CHANNR
   1AEA F0                 6662 	movx	@dptr,a
                    1AEB   6663 	C$mdrip.c$914$1$1 ==.
                           6664 ;	apps/mdrip/mdrip.c:914: RFST = 2;   //RX
   1AEB 75 E1 02           6665 	mov	_RFST,#0x02
                    1AEE   6666 	C$mdrip.c$915$1$1 ==.
                    1AEE   6667 	XG$swap_channel$0$0 ==.
   1AEE 22                 6668 	ret
                           6669 ;------------------------------------------------------------
                           6670 ;Allocation info for local variables in function 'strobe_radio'
                           6671 ;------------------------------------------------------------
                    1AEF   6672 	G$strobe_radio$0$0 ==.
                    1AEF   6673 	C$mdrip.c$917$1$1 ==.
                           6674 ;	apps/mdrip/mdrip.c:917: void strobe_radio(int radio_chan) {
                           6675 ;	-----------------------------------------
                           6676 ;	 function strobe_radio
                           6677 ;	-----------------------------------------
   1AEF                    6678 _strobe_radio:
   1AEF AE 82              6679 	mov	r6,dpl
   1AF1 AF 83              6680 	mov	r7,dph
                    1AF3   6681 	C$mdrip.c$918$1$1 ==.
                           6682 ;	apps/mdrip/mdrip.c:918: radioMacInit();
   1AF3 C0 07              6683 	push	ar7
   1AF5 C0 06              6684 	push	ar6
   1AF7 12s00r00           6685 	lcall	_radioMacInit
                    1AFA   6686 	C$mdrip.c$919$1$1 ==.
                           6687 ;	apps/mdrip/mdrip.c:919: MCSM1 = 0;
   1AFA 90 DF 13           6688 	mov	dptr,#_MCSM1
   1AFD E4                 6689 	clr	a
   1AFE F0                 6690 	movx	@dptr,a
                    1AFF   6691 	C$mdrip.c$920$1$1 ==.
                           6692 ;	apps/mdrip/mdrip.c:920: radioMacStrobe();
   1AFF 12s00r00           6693 	lcall	_radioMacStrobe
   1B02 D0 06              6694 	pop	ar6
   1B04 D0 07              6695 	pop	ar7
                    1B06   6696 	C$mdrip.c$921$1$1 ==.
                           6697 ;	apps/mdrip/mdrip.c:921: swap_channel(nChannels[radio_chan], fOffset[radio_chan]);
   1B06 EE                 6698 	mov	a,r6
   1B07 24r06              6699 	add	a,#_nChannels
   1B09 F9                 6700 	mov	r1,a
   1B0A E3                 6701 	movx	a,@r1
   1B0B FD                 6702 	mov	r5,a
   1B0C EE                 6703 	mov	a,r6
   1B0D 24r02              6704 	add	a,#_fOffset
   1B0F F9                 6705 	mov	r1,a
   1B10 E3                 6706 	movx	a,@r1
   1B11 90s03r2D           6707 	mov	dptr,#_swap_channel_PARM_2
   1B14 F0                 6708 	movx	@dptr,a
   1B15 8D 82              6709 	mov	dpl,r5
   1B17 12s1ArCA           6710 	lcall	_swap_channel
                    1B1A   6711 	C$mdrip.c$922$1$1 ==.
                    1B1A   6712 	XG$strobe_radio$0$0 ==.
   1B1A 22                 6713 	ret
                           6714 ;------------------------------------------------------------
                           6715 ;Allocation info for local variables in function 'WaitForPacket'
                           6716 ;------------------------------------------------------------
                           6717 ;sloc0                     Allocated with name '_WaitForPacket_sloc0_1_0'
                           6718 ;sloc1                     Allocated with name '_WaitForPacket_sloc1_1_0'
                           6719 ;sloc2                     Allocated with name '_WaitForPacket_sloc2_1_0'
                           6720 ;sloc3                     Allocated with name '_WaitForPacket_sloc3_1_0'
                           6721 ;sloc4                     Allocated with name '_WaitForPacket_sloc4_1_0'
                           6722 ;channel                   Allocated with name '_WaitForPacket_PARM_3'
                           6723 ;milliseconds              Allocated with name '_WaitForPacket_milliseconds_1_1'
                           6724 ;start                     Allocated with name '_WaitForPacket_start_1_1'
                           6725 ;i                         Allocated with name '_WaitForPacket_i_1_1'
                           6726 ;six_minutes               Allocated with name '_WaitForPacket_six_minutes_1_1'
                           6727 ;nRet                      Allocated with name '_WaitForPacket_nRet_1_1'
                           6728 ;transID                   Allocated with name '_WaitForPacket_transID_1_1'
                           6729 ;------------------------------------------------------------
                    1B1B   6730 	G$WaitForPacket$0$0 ==.
                    1B1B   6731 	C$mdrip.c$925$1$1 ==.
                           6732 ;	apps/mdrip/mdrip.c:925: int WaitForPacket(XDATA uint16 milliseconds, Dexcom_packet* pkt, XDATA uint8 channel) {
                           6733 ;	-----------------------------------------
                           6734 ;	 function WaitForPacket
                           6735 ;	-----------------------------------------
   1B1B                    6736 _WaitForPacket:
   1B1B AF 83              6737 	mov	r7,dph
   1B1D E5 82              6738 	mov	a,dpl
   1B1F 90s03r30           6739 	mov	dptr,#_WaitForPacket_milliseconds_1_1
   1B22 F0                 6740 	movx	@dptr,a
   1B23 A3                 6741 	inc	dptr
   1B24 EF                 6742 	mov	a,r7
   1B25 F0                 6743 	movx	@dptr,a
                    1B26   6744 	C$mdrip.c$926$1$1 ==.
                           6745 ;	apps/mdrip/mdrip.c:926: XDATA uint32 start = getMs();
   1B26 12s00r00           6746 	lcall	_getMs
   1B29 85 82*1F           6747 	mov	_WaitForPacket_sloc3_1_0,dpl
   1B2C 85 83*20           6748 	mov	(_WaitForPacket_sloc3_1_0 + 1),dph
   1B2F 85 F0*21           6749 	mov	(_WaitForPacket_sloc3_1_0 + 2),b
   1B32 F5*22              6750 	mov	(_WaitForPacket_sloc3_1_0 + 3),a
                    1B34   6751 	C$mdrip.c$931$1$1 ==.
                           6752 ;	apps/mdrip/mdrip.c:931: XDATA char transID[] = "BLANK"; 	// Line added
   1B34 90s03r32           6753 	mov	dptr,#_WaitForPacket_transID_1_1
   1B37 74 42              6754 	mov	a,#0x42
   1B39 F0                 6755 	movx	@dptr,a
   1B3A 90s03r33           6756 	mov	dptr,#(_WaitForPacket_transID_1_1 + 0x0001)
   1B3D 74 4C              6757 	mov	a,#0x4C
   1B3F F0                 6758 	movx	@dptr,a
   1B40 90s03r34           6759 	mov	dptr,#(_WaitForPacket_transID_1_1 + 0x0002)
   1B43 74 41              6760 	mov	a,#0x41
   1B45 F0                 6761 	movx	@dptr,a
   1B46 90s03r35           6762 	mov	dptr,#(_WaitForPacket_transID_1_1 + 0x0003)
   1B49 74 4E              6763 	mov	a,#0x4E
   1B4B F0                 6764 	movx	@dptr,a
   1B4C 90s03r36           6765 	mov	dptr,#(_WaitForPacket_transID_1_1 + 0x0004)
   1B4F 74 4B              6766 	mov	a,#0x4B
   1B51 F0                 6767 	movx	@dptr,a
   1B52 90s03r37           6768 	mov	dptr,#(_WaitForPacket_transID_1_1 + 0x0005)
   1B55 E4                 6769 	clr	a
   1B56 F0                 6770 	movx	@dptr,a
                    1B57   6771 	C$mdrip.c$932$1$1 ==.
                           6772 ;	apps/mdrip/mdrip.c:932: swap_channel(nChannels[channel], fOffset[channel]);
   1B57 90s03r2F           6773 	mov	dptr,#_WaitForPacket_PARM_3
   1B5A E0                 6774 	movx	a,@dptr
   1B5B FB                 6775 	mov	r3,a
   1B5C 24r06              6776 	add	a,#_nChannels
   1B5E F9                 6777 	mov	r1,a
   1B5F E3                 6778 	movx	a,@r1
   1B60 F5*18              6779 	mov	_WaitForPacket_sloc0_1_0,a
   1B62 EB                 6780 	mov	a,r3
   1B63 24r02              6781 	add	a,#_fOffset
   1B65 F9                 6782 	mov	r1,a
   1B66 E3                 6783 	movx	a,@r1
   1B67 90s03r2D           6784 	mov	dptr,#_swap_channel_PARM_2
   1B6A F0                 6785 	movx	@dptr,a
   1B6B 85*18 82           6786 	mov	dpl,_WaitForPacket_sloc0_1_0
   1B6E C0 03              6787 	push	ar3
   1B70 12s1ArCA           6788 	lcall	_swap_channel
   1B73 D0 03              6789 	pop	ar3
                    1B75   6790 	C$mdrip.c$934$1$1 ==.
                           6791 ;	apps/mdrip/mdrip.c:934: while (!milliseconds || (getMs() - start) < milliseconds) {
   1B75 90s03r30           6792 	mov	dptr,#_WaitForPacket_milliseconds_1_1
   1B78 E0                 6793 	movx	a,@dptr
   1B79 F5*19              6794 	mov	_WaitForPacket_sloc1_1_0,a
   1B7B A3                 6795 	inc	dptr
   1B7C E0                 6796 	movx	a,@dptr
   1B7D F5*1A              6797 	mov	(_WaitForPacket_sloc1_1_0 + 1),a
   1B7F E4                 6798 	clr	a
   1B80 F5*1B              6799 	mov	_WaitForPacket_sloc2_1_0,a
   1B82 F5*1C              6800 	mov	(_WaitForPacket_sloc2_1_0 + 1),a
   1B84 F5*1D              6801 	mov	(_WaitForPacket_sloc2_1_0 + 2),a
   1B86 F5*1E              6802 	mov	(_WaitForPacket_sloc2_1_0 + 3),a
   1B88                    6803 00115$:
   1B88 E5*19              6804 	mov	a,_WaitForPacket_sloc1_1_0
   1B8A 45*1A              6805 	orl	a,(_WaitForPacket_sloc1_1_0 + 1)
   1B8C 60 3D              6806 	jz	00116$
   1B8E C0 03              6807 	push	ar3
   1B90 12s00r00           6808 	lcall	_getMs
   1B93 AA 82              6809 	mov	r2,dpl
   1B95 AB 83              6810 	mov	r3,dph
   1B97 AE F0              6811 	mov	r6,b
   1B99 FF                 6812 	mov	r7,a
   1B9A EA                 6813 	mov	a,r2
   1B9B C3                 6814 	clr	c
   1B9C 95*1F              6815 	subb	a,_WaitForPacket_sloc3_1_0
   1B9E F5*23              6816 	mov	_WaitForPacket_sloc4_1_0,a
   1BA0 EB                 6817 	mov	a,r3
   1BA1 95*20              6818 	subb	a,(_WaitForPacket_sloc3_1_0 + 1)
   1BA3 F5*24              6819 	mov	(_WaitForPacket_sloc4_1_0 + 1),a
   1BA5 EE                 6820 	mov	a,r6
   1BA6 95*21              6821 	subb	a,(_WaitForPacket_sloc3_1_0 + 2)
   1BA8 F5*25              6822 	mov	(_WaitForPacket_sloc4_1_0 + 2),a
   1BAA EF                 6823 	mov	a,r7
   1BAB 95*22              6824 	subb	a,(_WaitForPacket_sloc3_1_0 + 3)
   1BAD F5*26              6825 	mov	(_WaitForPacket_sloc4_1_0 + 3),a
   1BAF AC*19              6826 	mov	r4,_WaitForPacket_sloc1_1_0
   1BB1 AD*1A              6827 	mov	r5,(_WaitForPacket_sloc1_1_0 + 1)
   1BB3 7E 00              6828 	mov	r6,#0x00
   1BB5 7F 00              6829 	mov	r7,#0x00
   1BB7 C3                 6830 	clr	c
   1BB8 E5*23              6831 	mov	a,_WaitForPacket_sloc4_1_0
   1BBA 9C                 6832 	subb	a,r4
   1BBB E5*24              6833 	mov	a,(_WaitForPacket_sloc4_1_0 + 1)
   1BBD 9D                 6834 	subb	a,r5
   1BBE E5*25              6835 	mov	a,(_WaitForPacket_sloc4_1_0 + 2)
   1BC0 9E                 6836 	subb	a,r6
   1BC1 E5*26              6837 	mov	a,(_WaitForPacket_sloc4_1_0 + 3)
   1BC3 9F                 6838 	subb	a,r7
   1BC4 D0 03              6839 	pop	ar3
   1BC6 40 03              6840 	jc	00128$
   1BC8 02s1Dr7F           6841 	ljmp	00117$
   1BCB                    6842 00128$:
   1BCB                    6843 00116$:
                    1BCB   6844 	C$mdrip.c$935$2$2 ==.
                           6845 ;	apps/mdrip/mdrip.c:935: doServices();
   1BCB C0 03              6846 	push	ar3
   1BCD 12s03r73           6847 	lcall	_doServices
                    1BD0   6848 	C$mdrip.c$936$2$2 ==.
                           6849 ;	apps/mdrip/mdrip.c:936: blink_yellow_led();
   1BD0 12s00r53           6850 	lcall	_blink_yellow_led
   1BD3 D0 03              6851 	pop	ar3
                    1BD5   6852 	C$mdrip.c$937$2$2 ==.
                           6853 ;	apps/mdrip/mdrip.c:937: i++;
   1BD5 05*1B              6854 	inc	_WaitForPacket_sloc2_1_0
   1BD7 E4                 6855 	clr	a
   1BD8 B5*1B 0C           6856 	cjne	a,_WaitForPacket_sloc2_1_0,00129$
   1BDB 05*1C              6857 	inc	(_WaitForPacket_sloc2_1_0 + 1)
   1BDD B5*1C 07           6858 	cjne	a,(_WaitForPacket_sloc2_1_0 + 1),00129$
   1BE0 05*1D              6859 	inc	(_WaitForPacket_sloc2_1_0 + 2)
   1BE2 B5*1D 02           6860 	cjne	a,(_WaitForPacket_sloc2_1_0 + 2),00129$
   1BE5 05*1E              6861 	inc	(_WaitForPacket_sloc2_1_0 + 3)
   1BE7                    6862 00129$:
                    1BE7   6863 	C$mdrip.c$938$1$1 ==.
                           6864 ;	apps/mdrip/mdrip.c:938: if(!(i % 40000)) {
   1BE7 78r00              6865 	mov	r0,#__modulong_PARM_2
   1BE9 74 40              6866 	mov	a,#0x40
   1BEB F2                 6867 	movx	@r0,a
   1BEC 08                 6868 	inc	r0
   1BED 74 9C              6869 	mov	a,#0x9C
   1BEF F2                 6870 	movx	@r0,a
   1BF0 08                 6871 	inc	r0
   1BF1 E4                 6872 	clr	a
   1BF2 F2                 6873 	movx	@r0,a
   1BF3 08                 6874 	inc	r0
   1BF4 F2                 6875 	movx	@r0,a
   1BF5 85*1B 82           6876 	mov	dpl,_WaitForPacket_sloc2_1_0
   1BF8 85*1C 83           6877 	mov	dph,(_WaitForPacket_sloc2_1_0 + 1)
   1BFB 85*1D F0           6878 	mov	b,(_WaitForPacket_sloc2_1_0 + 2)
   1BFE E5*1E              6879 	mov	a,(_WaitForPacket_sloc2_1_0 + 3)
   1C00 C0 03              6880 	push	ar3
   1C02 12s00r00           6881 	lcall	__modulong
   1C05 AC 82              6882 	mov	r4,dpl
   1C07 AD 83              6883 	mov	r5,dph
   1C09 AE F0              6884 	mov	r6,b
   1C0B FF                 6885 	mov	r7,a
   1C0C D0 03              6886 	pop	ar3
   1C0E EC                 6887 	mov	a,r4
   1C0F 4D                 6888 	orl	a,r5
   1C10 4E                 6889 	orl	a,r6
   1C11 4F                 6890 	orl	a,r7
                    1C12   6891 	C$mdrip.c$939$3$3 ==.
                           6892 ;	apps/mdrip/mdrip.c:939: strobe_radio(channel);
   1C12 70 0E              6893 	jnz	00102$
   1C14 8B 06              6894 	mov	ar6,r3
   1C16 FF                 6895 	mov	r7,a
   1C17 8E 82              6896 	mov	dpl,r6
   1C19 8F 83              6897 	mov	dph,r7
   1C1B C0 03              6898 	push	ar3
   1C1D 12s1ArEF           6899 	lcall	_strobe_radio
   1C20 D0 03              6900 	pop	ar3
   1C22                    6901 00102$:
                    1C22   6902 	C$mdrip.c$941$2$2 ==.
                           6903 ;	apps/mdrip/mdrip.c:941: if(getMs() - start > six_minutes) {
   1C22 C0 03              6904 	push	ar3
   1C24 12s00r00           6905 	lcall	_getMs
   1C27 AC 82              6906 	mov	r4,dpl
   1C29 AD 83              6907 	mov	r5,dph
   1C2B AE F0              6908 	mov	r6,b
   1C2D FF                 6909 	mov	r7,a
   1C2E D0 03              6910 	pop	ar3
   1C30 EC                 6911 	mov	a,r4
   1C31 C3                 6912 	clr	c
   1C32 95*1F              6913 	subb	a,_WaitForPacket_sloc3_1_0
   1C34 FC                 6914 	mov	r4,a
   1C35 ED                 6915 	mov	a,r5
   1C36 95*20              6916 	subb	a,(_WaitForPacket_sloc3_1_0 + 1)
   1C38 FD                 6917 	mov	r5,a
   1C39 EE                 6918 	mov	a,r6
   1C3A 95*21              6919 	subb	a,(_WaitForPacket_sloc3_1_0 + 2)
   1C3C FE                 6920 	mov	r6,a
   1C3D EF                 6921 	mov	a,r7
   1C3E 95*22              6922 	subb	a,(_WaitForPacket_sloc3_1_0 + 3)
   1C40 FF                 6923 	mov	r7,a
   1C41 C3                 6924 	clr	c
   1C42 74 40              6925 	mov	a,#0x40
   1C44 9C                 6926 	subb	a,r4
   1C45 74 7E              6927 	mov	a,#0x7E
   1C47 9D                 6928 	subb	a,r5
   1C48 74 05              6929 	mov	a,#0x05
   1C4A 9E                 6930 	subb	a,r6
   1C4B E4                 6931 	clr	a
   1C4C 9F                 6932 	subb	a,r7
   1C4D 50 0D              6933 	jnc	00104$
                    1C4F   6934 	C$mdrip.c$942$3$4 ==.
                           6935 ;	apps/mdrip/mdrip.c:942: killWithWatchdog();
   1C4F C0 03              6936 	push	ar3
   1C51 12s17rDA           6937 	lcall	_killWithWatchdog
                    1C54   6938 	C$mdrip.c$943$3$4 ==.
                           6939 ;	apps/mdrip/mdrip.c:943: delayMs(2000);
   1C54 90 07 D0           6940 	mov	dptr,#0x07D0
   1C57 12s00r00           6941 	lcall	_delayMs
   1C5A D0 03              6942 	pop	ar3
   1C5C                    6943 00104$:
                    1C5C   6944 	C$mdrip.c$945$2$2 ==.
                           6945 ;	apps/mdrip/mdrip.c:945: if (packet = radioQueueRxCurrentPacket()) {
   1C5C C0 03              6946 	push	ar3
   1C5E 12s00r00           6947 	lcall	_radioQueueRxCurrentPacket
   1C61 AE 82              6948 	mov	r6,dpl
   1C63 AF 83              6949 	mov	r7,dph
   1C65 D0 03              6950 	pop	ar3
   1C67 8E 04              6951 	mov	ar4,r6
   1C69 8F 05              6952 	mov	ar5,r7
   1C6B EE                 6953 	mov	a,r6
   1C6C 4F                 6954 	orl	a,r7
   1C6D 70 03              6955 	jnz	00132$
   1C6F 02s1Br88           6956 	ljmp	00115$
   1C72                    6957 00132$:
                    1C72   6958 	C$mdrip.c$946$3$5 ==.
                           6959 ;	apps/mdrip/mdrip.c:946: uint8 len = packet[0];
   1C72 8C 82              6960 	mov	dpl,r4
   1C74 8D 83              6961 	mov	dph,r5
   1C76 E0                 6962 	movx	a,@dptr
   1C77 FF                 6963 	mov	r7,a
                    1C78   6964 	C$mdrip.c$947$3$5 ==.
                           6965 ;	apps/mdrip/mdrip.c:947: fOffset[channel] += FREQEST;
   1C78 EB                 6966 	mov	a,r3
   1C79 24r02              6967 	add	a,#_fOffset
   1C7B F9                 6968 	mov	r1,a
   1C7C E3                 6969 	movx	a,@r1
   1C7D FE                 6970 	mov	r6,a
   1C7E 90 DF 38           6971 	mov	dptr,#_FREQEST
   1C81 E0                 6972 	movx	a,@dptr
   1C82 2E                 6973 	add	a,r6
   1C83 F3                 6974 	movx	@r1,a
                    1C84   6975 	C$mdrip.c$948$1$1 ==.
                           6976 ;	apps/mdrip/mdrip.c:948: memcpy(pkt, packet, min8(len+2, sizeof(Dexcom_packet)));
   1C84 C0 03              6977 	push	ar3
   1C86 78r53              6978 	mov	r0,#_WaitForPacket_PARM_2
   1C88 E2                 6979 	movx	a,@r0
   1C89 FA                 6980 	mov	r2,a
   1C8A 08                 6981 	inc	r0
   1C8B E2                 6982 	movx	a,@r0
   1C8C FB                 6983 	mov	r3,a
   1C8D 7E 00              6984 	mov	r6,#0x00
   1C8F 8C*23              6985 	mov	_WaitForPacket_sloc4_1_0,r4
   1C91 8D*24              6986 	mov	(_WaitForPacket_sloc4_1_0 + 1),r5
   1C93 75*25 00           6987 	mov	(_WaitForPacket_sloc4_1_0 + 2),#0x00
   1C96 74 02              6988 	mov	a,#0x02
   1C98 2F                 6989 	add	a,r7
   1C99 F5 82              6990 	mov	dpl,a
   1C9B 78r40              6991 	mov	r0,#_min8_PARM_2
   1C9D 74 15              6992 	mov	a,#0x15
   1C9F F2                 6993 	movx	@r0,a
   1CA0 C0 06              6994 	push	ar6
   1CA2 C0 03              6995 	push	ar3
   1CA4 C0 02              6996 	push	ar2
   1CA6 12s01r55           6997 	lcall	_min8
   1CA9 AF 82              6998 	mov	r7,dpl
   1CAB D0 02              6999 	pop	ar2
   1CAD D0 03              7000 	pop	ar3
   1CAF D0 06              7001 	pop	ar6
   1CB1 78r00              7002 	mov	r0,#_memcpy_PARM_3
   1CB3 EF                 7003 	mov	a,r7
   1CB4 F2                 7004 	movx	@r0,a
   1CB5 08                 7005 	inc	r0
   1CB6 E4                 7006 	clr	a
   1CB7 F2                 7007 	movx	@r0,a
   1CB8 78r00              7008 	mov	r0,#_memcpy_PARM_2
   1CBA E5*23              7009 	mov	a,_WaitForPacket_sloc4_1_0
   1CBC F2                 7010 	movx	@r0,a
   1CBD 08                 7011 	inc	r0
   1CBE E5*24              7012 	mov	a,(_WaitForPacket_sloc4_1_0 + 1)
   1CC0 F2                 7013 	movx	@r0,a
   1CC1 08                 7014 	inc	r0
   1CC2 E5*25              7015 	mov	a,(_WaitForPacket_sloc4_1_0 + 2)
   1CC4 F2                 7016 	movx	@r0,a
   1CC5 8A 82              7017 	mov	dpl,r2
   1CC7 8B 83              7018 	mov	dph,r3
   1CC9 8E F0              7019 	mov	b,r6
   1CCB C0 03              7020 	push	ar3
   1CCD 12s00r00           7021 	lcall	_memcpy
                    1CD0   7022 	C$mdrip.c$949$3$5 ==.
                           7023 ;	apps/mdrip/mdrip.c:949: if(radioCrcPassed()) {
   1CD0 12s00r00           7024 	lcall	_radioCrcPassed
   1CD3 D0 03              7025 	pop	ar3
   1CD5 D0 03              7026 	pop	ar3
   1CD7 40 03              7027 	jc	00133$
   1CD9 02s1Dr70           7028 	ljmp	00110$
   1CDC                    7029 00133$:
                    1CDC   7030 	C$mdrip.c$950$1$1 ==.
                           7031 ;	apps/mdrip/mdrip.c:950: dexcom_src_to_ascii(pkt->src_addr, transID);			// Get a human-readable version of the Dexcom Transmitter ID
   1CDC C0 03              7032 	push	ar3
   1CDE 78r53              7033 	mov	r0,#_WaitForPacket_PARM_2
   1CE0 E2                 7034 	movx	a,@r0
   1CE1 FE                 7035 	mov	r6,a
   1CE2 08                 7036 	inc	r0
   1CE3 E2                 7037 	movx	a,@r0
   1CE4 FF                 7038 	mov	r7,a
   1CE5 8E 82              7039 	mov	dpl,r6
   1CE7 8F 83              7040 	mov	dph,r7
   1CE9 A3                 7041 	inc	dptr
   1CEA A3                 7042 	inc	dptr
   1CEB A3                 7043 	inc	dptr
   1CEC A3                 7044 	inc	dptr
   1CED A3                 7045 	inc	dptr
   1CEE E0                 7046 	movx	a,@dptr
   1CEF FA                 7047 	mov	r2,a
   1CF0 A3                 7048 	inc	dptr
   1CF1 E0                 7049 	movx	a,@dptr
   1CF2 FB                 7050 	mov	r3,a
   1CF3 A3                 7051 	inc	dptr
   1CF4 E0                 7052 	movx	a,@dptr
   1CF5 FC                 7053 	mov	r4,a
   1CF6 A3                 7054 	inc	dptr
   1CF7 E0                 7055 	movx	a,@dptr
   1CF8 FD                 7056 	mov	r5,a
   1CF9 90s00r03           7057 	mov	dptr,#_dexcom_src_to_ascii_PARM_2
   1CFC 74r32              7058 	mov	a,#_WaitForPacket_transID_1_1
   1CFE F0                 7059 	movx	@dptr,a
   1CFF A3                 7060 	inc	dptr
   1D00 74s03              7061 	mov	a,#(_WaitForPacket_transID_1_1 >> 8)
   1D02 F0                 7062 	movx	@dptr,a
   1D03 8A 82              7063 	mov	dpl,r2
   1D05 8B 83              7064 	mov	dph,r3
   1D07 8C F0              7065 	mov	b,r4
   1D09 ED                 7066 	mov	a,r5
   1D0A C0 07              7067 	push	ar7
   1D0C C0 06              7068 	push	ar6
   1D0E C0 03              7069 	push	ar3
   1D10 12s02r17           7070 	lcall	_dexcom_src_to_ascii
                    1D13   7071 	C$mdrip.c$953$4$6 ==.
                           7072 ;	apps/mdrip/mdrip.c:953: if(strcmp(transID,transmitter_id) == 0 || only_listen_for_my_transmitter == 0) { // strcmp will be zero if they match
   1D13 78r00              7073 	mov	r0,#_strcmp_PARM_2
   1D15 74r00              7074 	mov	a,#_transmitter_id
   1D17 F2                 7075 	movx	@r0,a
   1D18 08                 7076 	inc	r0
   1D19 74s00              7077 	mov	a,#(_transmitter_id >> 8)
   1D1B F2                 7078 	movx	@r0,a
   1D1C 08                 7079 	inc	r0
   1D1D E4                 7080 	clr	a
   1D1E F2                 7081 	movx	@r0,a
   1D1F 90s03r32           7082 	mov	dptr,#_WaitForPacket_transID_1_1
   1D22 75 F0 00           7083 	mov	b,#0x00
   1D25 12s00r00           7084 	lcall	_strcmp
   1D28 E5 82              7085 	mov	a,dpl
   1D2A 85 83 F0           7086 	mov	b,dph
   1D2D D0 03              7087 	pop	ar3
   1D2F D0 06              7088 	pop	ar6
   1D31 D0 07              7089 	pop	ar7
   1D33 D0 03              7090 	pop	ar3
   1D35 45 F0              7091 	orl	a,b
   1D37 60 03              7092 	jz	00105$
   1D39 20*00 2A           7093 	jb	_only_listen_for_my_transmitter,00106$
   1D3C                    7094 00105$:
                    1D3C   7095 	C$mdrip.c$954$5$7 ==.
                           7096 ;	apps/mdrip/mdrip.c:954: pkt->txId -= channel;
   1D3C 74 0B              7097 	mov	a,#0x0B
   1D3E 2E                 7098 	add	a,r6
   1D3F FE                 7099 	mov	r6,a
   1D40 E4                 7100 	clr	a
   1D41 3F                 7101 	addc	a,r7
   1D42 FF                 7102 	mov	r7,a
   1D43 8E 82              7103 	mov	dpl,r6
   1D45 8F 83              7104 	mov	dph,r7
   1D47 E0                 7105 	movx	a,@dptr
   1D48 C3                 7106 	clr	c
   1D49 9B                 7107 	subb	a,r3
   1D4A 8E 82              7108 	mov	dpl,r6
   1D4C 8F 83              7109 	mov	dph,r7
   1D4E F0                 7110 	movx	@dptr,a
                    1D4F   7111 	C$mdrip.c$955$5$7 ==.
                           7112 ;	apps/mdrip/mdrip.c:955: radioQueueRxDoneWithPacket();
   1D4F C0 03              7113 	push	ar3
   1D51 12s00r00           7114 	lcall	_radioQueueRxDoneWithPacket
   1D54 D0 03              7115 	pop	ar3
                    1D56   7116 	C$mdrip.c$956$6$8 ==.
                           7117 ;	apps/mdrip/mdrip.c:956: LED_YELLOW(0);
   1D56 AF FF              7118 	mov	r7,_P2DIR
   1D58 53 07 FB           7119 	anl	ar7,#0xFB
   1D5B 8F FF              7120 	mov	_P2DIR,r7
                    1D5D   7121 	C$mdrip.c$957$5$7 ==.
                           7122 ;	apps/mdrip/mdrip.c:957: last_catch_channel = channel;
   1D5D 78r3A              7123 	mov	r0,#_last_catch_channel
   1D5F EB                 7124 	mov	a,r3
   1D60 F2                 7125 	movx	@r0,a
                    1D61   7126 	C$mdrip.c$958$5$7 ==.
                           7127 ;	apps/mdrip/mdrip.c:958: return 1;
   1D61 90 00 01           7128 	mov	dptr,#0x0001
   1D64 80 23              7129 	sjmp	00118$
   1D66                    7130 00106$:
                    1D66   7131 	C$mdrip.c$960$5$9 ==.
                           7132 ;	apps/mdrip/mdrip.c:960: radioQueueRxDoneWithPacket();
   1D66 C0 03              7133 	push	ar3
   1D68 12s00r00           7134 	lcall	_radioQueueRxDoneWithPacket
   1D6B D0 03              7135 	pop	ar3
   1D6D 02s1Br88           7136 	ljmp	00115$
   1D70                    7137 00110$:
                    1D70   7138 	C$mdrip.c$963$4$10 ==.
                           7139 ;	apps/mdrip/mdrip.c:963: radioQueueRxDoneWithPacket();
   1D70 12s00r00           7140 	lcall	_radioQueueRxDoneWithPacket
                    1D73   7141 	C$mdrip.c$964$5$11 ==.
                           7142 ;	apps/mdrip/mdrip.c:964: LED_YELLOW(0);
   1D73 AF FF              7143 	mov	r7,_P2DIR
   1D75 53 07 FB           7144 	anl	ar7,#0xFB
   1D78 8F FF              7145 	mov	_P2DIR,r7
                    1D7A   7146 	C$mdrip.c$965$4$10 ==.
                           7147 ;	apps/mdrip/mdrip.c:965: return 0;
   1D7A 90 00 00           7148 	mov	dptr,#0x0000
   1D7D 80 0A              7149 	sjmp	00118$
   1D7F                    7150 00117$:
                    1D7F   7151 	C$mdrip.c$969$2$12 ==.
                           7152 ;	apps/mdrip/mdrip.c:969: LED_YELLOW(0);
   1D7F AF FF              7153 	mov	r7,_P2DIR
   1D81 53 07 FB           7154 	anl	ar7,#0xFB
   1D84 8F FF              7155 	mov	_P2DIR,r7
                    1D86   7156 	C$mdrip.c$970$1$1 ==.
                           7157 ;	apps/mdrip/mdrip.c:970: return nRet;
   1D86 90 00 00           7158 	mov	dptr,#0x0000
   1D89                    7159 00118$:
                    1D89   7160 	C$mdrip.c$971$1$1 ==.
                    1D89   7161 	XG$WaitForPacket$0$0 ==.
   1D89 22                 7162 	ret
                           7163 ;------------------------------------------------------------
                           7164 ;Allocation info for local variables in function 'delayFor'
                           7165 ;------------------------------------------------------------
                           7166 ;sloc0                     Allocated with name '_delayFor_sloc0_1_0'
                           7167 ;wait_chan                 Allocated with name '_delayFor_wait_chan_1_1'
                           7168 ;------------------------------------------------------------
                    1D8A   7169 	G$delayFor$0$0 ==.
                    1D8A   7170 	C$mdrip.c$973$1$1 ==.
                           7171 ;	apps/mdrip/mdrip.c:973: XDATA uint32 delayFor(XDATA int wait_chan) {
                           7172 ;	-----------------------------------------
                           7173 ;	 function delayFor
                           7174 ;	-----------------------------------------
   1D8A                    7175 _delayFor:
   1D8A AF 83              7176 	mov	r7,dph
   1D8C E5 82              7177 	mov	a,dpl
   1D8E 90s03r38           7178 	mov	dptr,#_delayFor_wait_chan_1_1
   1D91 F0                 7179 	movx	@dptr,a
   1D92 A3                 7180 	inc	dptr
   1D93 EF                 7181 	mov	a,r7
   1D94 F0                 7182 	movx	@dptr,a
                    1D95   7183 	C$mdrip.c$974$1$1 ==.
                           7184 ;	apps/mdrip/mdrip.c:974: if(needsTimingCalibration) {
   1D95 30*05 29           7185 	jnb	_needsTimingCalibration,00102$
                    1D98   7186 	C$mdrip.c$975$2$2 ==.
                           7187 ;	apps/mdrip/mdrip.c:975: return delayedWaitTimes[wait_chan];
   1D98 90s03r38           7188 	mov	dptr,#_delayFor_wait_chan_1_1
   1D9B E0                 7189 	movx	a,@dptr
   1D9C FE                 7190 	mov	r6,a
   1D9D A3                 7191 	inc	dptr
   1D9E E0                 7192 	movx	a,@dptr
   1D9F CE                 7193 	xch	a,r6
   1DA0 25 E0              7194 	add	a,acc
   1DA2 CE                 7195 	xch	a,r6
   1DA3 33                 7196 	rlc	a
   1DA4 CE                 7197 	xch	a,r6
   1DA5 25 E0              7198 	add	a,acc
   1DA7 CE                 7199 	xch	a,r6
   1DA8 33                 7200 	rlc	a
   1DA9 EE                 7201 	mov	a,r6
   1DAA 24r1A              7202 	add	a,#_delayedWaitTimes
   1DAC F9                 7203 	mov	r1,a
   1DAD E3                 7204 	movx	a,@r1
   1DAE FC                 7205 	mov	r4,a
   1DAF 09                 7206 	inc	r1
   1DB0 E3                 7207 	movx	a,@r1
   1DB1 FD                 7208 	mov	r5,a
   1DB2 09                 7209 	inc	r1
   1DB3 E3                 7210 	movx	a,@r1
   1DB4 FE                 7211 	mov	r6,a
   1DB5 09                 7212 	inc	r1
   1DB6 E3                 7213 	movx	a,@r1
   1DB7 FF                 7214 	mov	r7,a
   1DB8 8C 82              7215 	mov	dpl,r4
   1DBA 8D 83              7216 	mov	dph,r5
   1DBC 8E F0              7217 	mov	b,r6
   1DBE 02s1Er4C           7218 	ljmp	00107$
   1DC1                    7219 00102$:
                    1DC1   7220 	C$mdrip.c$977$1$1 ==.
                           7221 ;	apps/mdrip/mdrip.c:977: if(!wait_chan && sequential_missed_packets) {
   1DC1 90s03r38           7222 	mov	dptr,#_delayFor_wait_chan_1_1
   1DC4 E0                 7223 	movx	a,@dptr
   1DC5 FE                 7224 	mov	r6,a
   1DC6 A3                 7225 	inc	dptr
   1DC7 E0                 7226 	movx	a,@dptr
   1DC8 FF                 7227 	mov	r7,a
   1DC9 4E                 7228 	orl	a,r6
   1DCA 70 60              7229 	jnz	00104$
   1DCC 78r3E              7230 	mov	r0,#_sequential_missed_packets
   1DCE E2                 7231 	movx	a,@r0
   1DCF 60 5B              7232 	jz	00104$
                    1DD1   7233 	C$mdrip.c$978$2$3 ==.
                           7234 ;	apps/mdrip/mdrip.c:978: return waitTimes[wait_chan] + (sequential_missed_packets * wake_earlier_for_next_miss * 2 * 1000);
   1DD1 8E 04              7235 	mov	ar4,r6
   1DD3 EF                 7236 	mov	a,r7
   1DD4 CC                 7237 	xch	a,r4
   1DD5 25 E0              7238 	add	a,acc
   1DD7 CC                 7239 	xch	a,r4
   1DD8 33                 7240 	rlc	a
   1DD9 CC                 7241 	xch	a,r4
   1DDA 25 E0              7242 	add	a,acc
   1DDC CC                 7243 	xch	a,r4
   1DDD 33                 7244 	rlc	a
   1DDE EC                 7245 	mov	a,r4
   1DDF 24r0A              7246 	add	a,#_waitTimes
   1DE1 F9                 7247 	mov	r1,a
   1DE2 E3                 7248 	movx	a,@r1
   1DE3 F5*27              7249 	mov	_delayFor_sloc0_1_0,a
   1DE5 09                 7250 	inc	r1
   1DE6 E3                 7251 	movx	a,@r1
   1DE7 F5*28              7252 	mov	(_delayFor_sloc0_1_0 + 1),a
   1DE9 09                 7253 	inc	r1
   1DEA E3                 7254 	movx	a,@r1
   1DEB F5*29              7255 	mov	(_delayFor_sloc0_1_0 + 2),a
   1DED 09                 7256 	inc	r1
   1DEE E3                 7257 	movx	a,@r1
   1DEF F5*2A              7258 	mov	(_delayFor_sloc0_1_0 + 3),a
   1DF1 78r3E              7259 	mov	r0,#_sequential_missed_packets
   1DF3 79r00              7260 	mov	r1,#_wake_earlier_for_next_miss
   1DF5 E2                 7261 	movx	a,@r0
   1DF6 F5 F0              7262 	mov	b,a
   1DF8 E3                 7263 	movx	a,@r1
   1DF9 A4                 7264 	mul	ab
   1DFA FC                 7265 	mov	r4,a
   1DFB AD F0              7266 	mov	r5,b
   1DFD 78r00              7267 	mov	r0,#__mulint_PARM_2
   1DFF EC                 7268 	mov	a,r4
   1E00 F2                 7269 	movx	@r0,a
   1E01 08                 7270 	inc	r0
   1E02 ED                 7271 	mov	a,r5
   1E03 F2                 7272 	movx	@r0,a
   1E04 90 07 D0           7273 	mov	dptr,#0x07D0
   1E07 12s00r00           7274 	lcall	__mulint
   1E0A AC 82              7275 	mov	r4,dpl
   1E0C E5 83              7276 	mov	a,dph
   1E0E FD                 7277 	mov	r5,a
   1E0F 33                 7278 	rlc	a
   1E10 95 E0              7279 	subb	a,acc
   1E12 FB                 7280 	mov	r3,a
   1E13 FA                 7281 	mov	r2,a
   1E14 EC                 7282 	mov	a,r4
   1E15 25*27              7283 	add	a,_delayFor_sloc0_1_0
   1E17 FC                 7284 	mov	r4,a
   1E18 ED                 7285 	mov	a,r5
   1E19 35*28              7286 	addc	a,(_delayFor_sloc0_1_0 + 1)
   1E1B FD                 7287 	mov	r5,a
   1E1C EB                 7288 	mov	a,r3
   1E1D 35*29              7289 	addc	a,(_delayFor_sloc0_1_0 + 2)
   1E1F FB                 7290 	mov	r3,a
   1E20 EA                 7291 	mov	a,r2
   1E21 35*2A              7292 	addc	a,(_delayFor_sloc0_1_0 + 3)
   1E23 FA                 7293 	mov	r2,a
   1E24 8C 82              7294 	mov	dpl,r4
   1E26 8D 83              7295 	mov	dph,r5
   1E28 8B F0              7296 	mov	b,r3
   1E2A 80 20              7297 	sjmp	00107$
   1E2C                    7298 00104$:
                    1E2C   7299 	C$mdrip.c$980$2$4 ==.
                           7300 ;	apps/mdrip/mdrip.c:980: return waitTimes[wait_chan];
   1E2C EF                 7301 	mov	a,r7
   1E2D CE                 7302 	xch	a,r6
   1E2E 25 E0              7303 	add	a,acc
   1E30 CE                 7304 	xch	a,r6
   1E31 33                 7305 	rlc	a
   1E32 CE                 7306 	xch	a,r6
   1E33 25 E0              7307 	add	a,acc
   1E35 CE                 7308 	xch	a,r6
   1E36 33                 7309 	rlc	a
   1E37 EE                 7310 	mov	a,r6
   1E38 24r0A              7311 	add	a,#_waitTimes
   1E3A F9                 7312 	mov	r1,a
   1E3B E3                 7313 	movx	a,@r1
   1E3C FC                 7314 	mov	r4,a
   1E3D 09                 7315 	inc	r1
   1E3E E3                 7316 	movx	a,@r1
   1E3F FD                 7317 	mov	r5,a
   1E40 09                 7318 	inc	r1
   1E41 E3                 7319 	movx	a,@r1
   1E42 FE                 7320 	mov	r6,a
   1E43 09                 7321 	inc	r1
   1E44 E3                 7322 	movx	a,@r1
   1E45 FF                 7323 	mov	r7,a
   1E46 8C 82              7324 	mov	dpl,r4
   1E48 8D 83              7325 	mov	dph,r5
   1E4A 8E F0              7326 	mov	b,r6
   1E4C                    7327 00107$:
                    1E4C   7328 	C$mdrip.c$982$1$1 ==.
                    1E4C   7329 	XG$delayFor$0$0 ==.
   1E4C 22                 7330 	ret
                           7331 ;------------------------------------------------------------
                           7332 ;Allocation info for local variables in function 'get_packet'
                           7333 ;------------------------------------------------------------
                    1E4D   7334 	G$get_packet$0$0 ==.
                    1E4D   7335 	C$mdrip.c$984$1$1 ==.
                           7336 ;	apps/mdrip/mdrip.c:984: BIT get_packet(Dexcom_packet* pPkt) {
                           7337 ;	-----------------------------------------
                           7338 ;	 function get_packet
                           7339 ;	-----------------------------------------
   1E4D                    7340 _get_packet:
   1E4D AF 83              7341 	mov	r7,dph
   1E4F E5 82              7342 	mov	a,dpl
   1E51 78r55              7343 	mov	r0,#_get_packet_pPkt_1_1
   1E53 F2                 7344 	movx	@r0,a
   1E54 08                 7345 	inc	r0
   1E55 EF                 7346 	mov	a,r7
   1E56 F2                 7347 	movx	@r0,a
                    1E57   7348 	C$mdrip.c$986$1$1 ==.
                           7349 ;	apps/mdrip/mdrip.c:986: for(nChannel = start_channel; nChannel < NUM_CHANNELS; nChannel++) {
   1E57 90s00r22           7350 	mov	dptr,#_start_channel
   1E5A E0                 7351 	movx	a,@dptr
   1E5B FC                 7352 	mov	r4,a
   1E5C 33                 7353 	rlc	a
   1E5D 95 E0              7354 	subb	a,acc
   1E5F FD                 7355 	mov	r5,a
   1E60                    7356 00104$:
   1E60 C3                 7357 	clr	c
   1E61 EC                 7358 	mov	a,r4
   1E62 94 04              7359 	subb	a,#0x04
   1E64 ED                 7360 	mov	a,r5
   1E65 64 80              7361 	xrl	a,#0x80
   1E67 94 80              7362 	subb	a,#0x80
   1E69 50 4F              7363 	jnc	00107$
                    1E6B   7364 	C$mdrip.c$987$2$2 ==.
                           7365 ;	apps/mdrip/mdrip.c:987: switch(WaitForPacket(delayFor(nChannel), pPkt, nChannel)) {
   1E6B 8C 82              7366 	mov	dpl,r4
   1E6D 8D 83              7367 	mov	dph,r5
   1E6F C0 05              7368 	push	ar5
   1E71 C0 04              7369 	push	ar4
   1E73 12s1Dr8A           7370 	lcall	_delayFor
   1E76 AA 82              7371 	mov	r2,dpl
   1E78 AB 83              7372 	mov	r3,dph
   1E7A D0 04              7373 	pop	ar4
   1E7C 90s03r2F           7374 	mov	dptr,#_WaitForPacket_PARM_3
   1E7F EC                 7375 	mov	a,r4
   1E80 F0                 7376 	movx	@dptr,a
   1E81 78r55              7377 	mov	r0,#_get_packet_pPkt_1_1
   1E83 79r53              7378 	mov	r1,#_WaitForPacket_PARM_2
   1E85 E2                 7379 	movx	a,@r0
   1E86 F3                 7380 	movx	@r1,a
   1E87 08                 7381 	inc	r0
   1E88 E2                 7382 	movx	a,@r0
   1E89 09                 7383 	inc	r1
   1E8A F3                 7384 	movx	@r1,a
   1E8B 8A 82              7385 	mov	dpl,r2
   1E8D 8B 83              7386 	mov	dph,r3
   1E8F C0 04              7387 	push	ar4
   1E91 12s1Br1B           7388 	lcall	_WaitForPacket
   1E94 AE 82              7389 	mov	r6,dpl
   1E96 AF 83              7390 	mov	r7,dph
   1E98 D0 04              7391 	pop	ar4
   1E9A D0 05              7392 	pop	ar5
   1E9C BE 00 05           7393 	cjne	r6,#0x00,00118$
   1E9F BF 00 02           7394 	cjne	r7,#0x00,00118$
   1EA2 80 0F              7395 	sjmp	00106$
   1EA4                    7396 00118$:
   1EA4 BE 01 0C           7397 	cjne	r6,#0x01,00106$
   1EA7 BF 00 09           7398 	cjne	r7,#0x00,00106$
                    1EAA   7399 	C$mdrip.c$989$3$3 ==.
                           7400 ;	apps/mdrip/mdrip.c:989: needsTimingCalibration = 0;
   1EAA C2*05              7401 	clr	_needsTimingCalibration
                    1EAC   7402 	C$mdrip.c$990$3$3 ==.
                           7403 ;	apps/mdrip/mdrip.c:990: sequential_missed_packets = 0;
   1EAC 78r3E              7404 	mov	r0,#_sequential_missed_packets
   1EAE E4                 7405 	clr	a
   1EAF F2                 7406 	movx	@r0,a
                    1EB0   7407 	C$mdrip.c$991$3$3 ==.
                           7408 ;	apps/mdrip/mdrip.c:991: return 1;
   1EB0 D3                 7409 	setb	c
                    1EB1   7410 	C$mdrip.c$994$1$1 ==.
                           7411 ;	apps/mdrip/mdrip.c:994: }
   1EB1 80 28              7412 	sjmp	00110$
   1EB3                    7413 00106$:
                    1EB3   7414 	C$mdrip.c$986$1$1 ==.
                           7415 ;	apps/mdrip/mdrip.c:986: for(nChannel = start_channel; nChannel < NUM_CHANNELS; nChannel++) {
   1EB3 0C                 7416 	inc	r4
   1EB4 BC 00 A9           7417 	cjne	r4,#0x00,00104$
   1EB7 0D                 7418 	inc	r5
   1EB8 80 A6              7419 	sjmp	00104$
   1EBA                    7420 00107$:
                    1EBA   7421 	C$mdrip.c$996$1$1 ==.
                           7422 ;	apps/mdrip/mdrip.c:996: sequential_missed_packets ++;
   1EBA 78r3E              7423 	mov	r0,#_sequential_missed_packets
   1EBC E2                 7424 	movx	a,@r0
   1EBD 24 01              7425 	add	a,#0x01
   1EBF F2                 7426 	movx	@r0,a
                    1EC0   7427 	C$mdrip.c$997$1$1 ==.
                           7428 ;	apps/mdrip/mdrip.c:997: if(sequential_missed_packets > misses_until_failure) {
   1EC0 78r3E              7429 	mov	r0,#_sequential_missed_packets
   1EC2 79r01              7430 	mov	r1,#_misses_until_failure
   1EC4 C3                 7431 	clr	c
   1EC5 E2                 7432 	movx	a,@r0
   1EC6 F5 F0              7433 	mov	b,a
   1EC8 E3                 7434 	movx	a,@r1
   1EC9 95 F0              7435 	subb	a,b
   1ECB 50 06              7436 	jnc	00109$
                    1ECD   7437 	C$mdrip.c$998$2$4 ==.
                           7438 ;	apps/mdrip/mdrip.c:998: sequential_missed_packets = 0;
   1ECD 78r3E              7439 	mov	r0,#_sequential_missed_packets
   1ECF E4                 7440 	clr	a
   1ED0 F2                 7441 	movx	@r0,a
                    1ED1   7442 	C$mdrip.c$999$2$4 ==.
                           7443 ;	apps/mdrip/mdrip.c:999: needsTimingCalibration = 1;
   1ED1 D2*05              7444 	setb	_needsTimingCalibration
   1ED3                    7445 00109$:
                    1ED3   7446 	C$mdrip.c$1001$1$1 ==.
                           7447 ;	apps/mdrip/mdrip.c:1001: reset_offsets();
   1ED3 12s17rB2           7448 	lcall	_reset_offsets
                    1ED6   7449 	C$mdrip.c$1002$1$1 ==.
                           7450 ;	apps/mdrip/mdrip.c:1002: last_catch_channel = 0;
   1ED6 78r3A              7451 	mov	r0,#_last_catch_channel
   1ED8 E4                 7452 	clr	a
   1ED9 F2                 7453 	movx	@r0,a
                    1EDA   7454 	C$mdrip.c$1003$1$1 ==.
                           7455 ;	apps/mdrip/mdrip.c:1003: return 0;
   1EDA C3                 7456 	clr	c
   1EDB                    7457 00110$:
                    1EDB   7458 	C$mdrip.c$1004$1$1 ==.
                    1EDB   7459 	XG$get_packet$0$0 ==.
   1EDB 22                 7460 	ret
                           7461 ;------------------------------------------------------------
                           7462 ;Allocation info for local variables in function 'setADCInputs'
                           7463 ;------------------------------------------------------------
                    1EDC   7464 	G$setADCInputs$0$0 ==.
                    1EDC   7465 	C$mdrip.c$1006$1$1 ==.
                           7466 ;	apps/mdrip/mdrip.c:1006: void setADCInputs() {
                           7467 ;	-----------------------------------------
                           7468 ;	 function setADCInputs
                           7469 ;	-----------------------------------------
   1EDC                    7470 _setADCInputs:
                    1EDC   7471 	C$mdrip.c$1007$1$1 ==.
                           7472 ;	apps/mdrip/mdrip.c:1007: P0INP=0; //set pull resistors on pins 0_0 - 0_5 to low
   1EDC 75 8F 00           7473 	mov	_P0INP,#0x00
                    1EDF   7474 	C$mdrip.c$1008$1$1 ==.
                    1EDF   7475 	XG$setADCInputs$0$0 ==.
   1EDF 22                 7476 	ret
                           7477 ;------------------------------------------------------------
                           7478 ;Allocation info for local variables in function 'configBt'
                           7479 ;------------------------------------------------------------
                    1EE0   7480 	G$configBt$0$0 ==.
                    1EE0   7481 	C$mdrip.c$1010$1$1 ==.
                           7482 ;	apps/mdrip/mdrip.c:1010: void configBt() {
                           7483 ;	-----------------------------------------
                           7484 ;	 function configBt
                           7485 ;	-----------------------------------------
   1EE0                    7486 _configBt:
                    1EE0   7487 	C$mdrip.c$1011$1$1 ==.
                           7488 ;	apps/mdrip/mdrip.c:1011: uartEnable();
   1EE0 12s00r2D           7489 	lcall	_uartEnable
                    1EE3   7490 	C$mdrip.c$1012$1$1 ==.
                           7491 ;	apps/mdrip/mdrip.c:1012: printf("AT+NAMExDrip");
   1EE3 74rCC              7492 	mov	a,#__str_36
   1EE5 C0 E0              7493 	push	acc
   1EE7 74s01              7494 	mov	a,#(__str_36 >> 8)
   1EE9 C0 E0              7495 	push	acc
   1EEB 74 80              7496 	mov	a,#0x80
   1EED C0 E0              7497 	push	acc
   1EEF 12s00r00           7498 	lcall	_printf
   1EF2 15 81              7499 	dec	sp
   1EF4 15 81              7500 	dec	sp
   1EF6 15 81              7501 	dec	sp
                    1EF8   7502 	C$mdrip.c$1013$1$1 ==.
                           7503 ;	apps/mdrip/mdrip.c:1013: uartDisable();
   1EF8 12s00r3E           7504 	lcall	_uartDisable
                    1EFB   7505 	C$mdrip.c$1014$1$1 ==.
                    1EFB   7506 	XG$configBt$0$0 ==.
   1EFB 22                 7507 	ret
                           7508 ;------------------------------------------------------------
                           7509 ;Allocation info for local variables in function 'main'
                           7510 ;------------------------------------------------------------
                           7511 ;Pkt                       Allocated with name '_main_Pkt_2_4'
                           7512 ;------------------------------------------------------------
                    1EFC   7513 	G$main$0$0 ==.
                    1EFC   7514 	C$mdrip.c$1016$1$1 ==.
                           7515 ;	apps/mdrip/mdrip.c:1016: void main() {
                           7516 ;	-----------------------------------------
                           7517 ;	 function main
                           7518 ;	-----------------------------------------
   1EFC                    7519 _main:
                    1EFC   7520 	C$mdrip.c$1017$1$1 ==.
                           7521 ;	apps/mdrip/mdrip.c:1017: systemInit();
   1EFC 12s00r00           7522 	lcall	_systemInit
                    1EFF   7523 	C$mdrip.c$1018$1$1 ==.
                           7524 ;	apps/mdrip/mdrip.c:1018: initUart1();
   1EFF 12s03r82           7525 	lcall	_initUart1
                    1F02   7526 	C$mdrip.c$1020$1$1 ==.
                           7527 ;	apps/mdrip/mdrip.c:1020: P1DIR |= 0x08; // RTS
   1F02 43 FE 08           7528 	orl	_P1DIR,#0x08
                    1F05   7529 	C$mdrip.c$1021$1$1 ==.
                           7530 ;	apps/mdrip/mdrip.c:1021: sleepInit();
   1F05 12s00r00           7531 	lcall	_sleepInit
                    1F08   7532 	C$mdrip.c$1023$1$1 ==.
                           7533 ;	apps/mdrip/mdrip.c:1023: makeAllOutputs();
   1F08 12s17r60           7534 	lcall	_makeAllOutputs
                    1F0B   7535 	C$mdrip.c$1024$1$1 ==.
                           7536 ;	apps/mdrip/mdrip.c:1024: setADCInputs();
   1F0B 12s1ErDC           7537 	lcall	_setADCInputs
                    1F0E   7538 	C$mdrip.c$1025$1$1 ==.
                           7539 ;	apps/mdrip/mdrip.c:1025: delayMs(1000);
   1F0E 90 03 E8           7540 	mov	dptr,#0x03E8
   1F11 12s00r00           7541 	lcall	_delayMs
                    1F14   7542 	C$mdrip.c$1027$1$1 ==.
                           7543 ;	apps/mdrip/mdrip.c:1027: if(enable_wixfone==0) { 										// Don't do Bluetooth piece if there is a Fona attached instead of a HM1x
   1F14 20*03 05           7544 	jb	_enable_wixfone,00102$
                    1F17   7545 	C$mdrip.c$1028$2$2 ==.
                           7546 ;	apps/mdrip/mdrip.c:1028: configBt();
   1F17 12s1ErE0           7547 	lcall	_configBt
   1F1A 80 03              7548 	sjmp	00103$
   1F1C                    7549 00102$:
                    1F1C   7550 	C$mdrip.c$1030$2$3 ==.
                           7551 ;	apps/mdrip/mdrip.c:1030: enableFona();
   1F1C 12s08r30           7552 	lcall	_enableFona
   1F1F                    7553 00103$:
                    1F1F   7554 	C$mdrip.c$1032$1$1 ==.
                           7555 ;	apps/mdrip/mdrip.c:1032: delayMs(1000);
   1F1F 90 03 E8           7556 	mov	dptr,#0x03E8
   1F22 12s00r00           7557 	lcall	_delayMs
                    1F25   7558 	C$mdrip.c$1034$1$1 ==.
                           7559 ;	apps/mdrip/mdrip.c:1034: radioQueueInit();
   1F25 12s00r00           7560 	lcall	_radioQueueInit
                    1F28   7561 	C$mdrip.c$1035$1$1 ==.
                           7562 ;	apps/mdrip/mdrip.c:1035: radioQueueAllowCrcErrors = 1;
   1F28 D2*00              7563 	setb	_radioQueueAllowCrcErrors
                    1F2A   7564 	C$mdrip.c$1036$1$1 ==.
                           7565 ;	apps/mdrip/mdrip.c:1036: MCSM1 = 0;
   1F2A 90 DF 13           7566 	mov	dptr,#_MCSM1
   1F2D E4                 7567 	clr	a
   1F2E F0                 7568 	movx	@dptr,a
                    1F2F   7569 	C$mdrip.c$1038$1$1 ==.
                           7570 ;	apps/mdrip/mdrip.c:1038: while(1) {
   1F2F                    7571 00110$:
                    1F2F   7572 	C$mdrip.c$1040$2$4 ==.
                           7573 ;	apps/mdrip/mdrip.c:1040: memset(&Pkt, 0, sizeof(Dexcom_packet));
   1F2F 78r00              7574 	mov	r0,#_memset_PARM_2
   1F31 E4                 7575 	clr	a
   1F32 F2                 7576 	movx	@r0,a
   1F33 78r00              7577 	mov	r0,#_memset_PARM_3
   1F35 74 15              7578 	mov	a,#0x15
   1F37 F2                 7579 	movx	@r0,a
   1F38 08                 7580 	inc	r0
   1F39 E4                 7581 	clr	a
   1F3A F2                 7582 	movx	@r0,a
   1F3B 90s03r3A           7583 	mov	dptr,#_main_Pkt_2_4
   1F3E 75 F0 00           7584 	mov	b,#0x00
   1F41 12s00r00           7585 	lcall	_memset
                    1F44   7586 	C$mdrip.c$1041$2$4 ==.
                           7587 ;	apps/mdrip/mdrip.c:1041: boardService();
   1F44 12s00r00           7588 	lcall	_boardService
                    1F47   7589 	C$mdrip.c$1044$2$4 ==.
                           7590 ;	apps/mdrip/mdrip.c:1044: get_packet(&Pkt);		// Always try to get a packet but now print even if none received so we can still update devicestatus, etc.
   1F47 90s03r3A           7591 	mov	dptr,#_main_Pkt_2_4
   1F4A 12s1Er4D           7592 	lcall	_get_packet
                    1F4D   7593 	C$mdrip.c$1045$2$4 ==.
                           7594 ;	apps/mdrip/mdrip.c:1045: print_packet(&Pkt);
   1F4D 90s03r3A           7595 	mov	dptr,#_main_Pkt_2_4
   1F50 12s13r87           7596 	lcall	_print_packet
                    1F53   7597 	C$mdrip.c$1048$2$4 ==.
                           7598 ;	apps/mdrip/mdrip.c:1048: RFST = 4;
   1F53 75 E1 04           7599 	mov	_RFST,#0x04
                    1F56   7600 	C$mdrip.c$1049$2$4 ==.
                           7601 ;	apps/mdrip/mdrip.c:1049: delayMs(100);
   1F56 90 00 64           7602 	mov	dptr,#0x0064
   1F59 12s00r00           7603 	lcall	_delayMs
                    1F5C   7604 	C$mdrip.c$1051$2$4 ==.
                           7605 ;	apps/mdrip/mdrip.c:1051: radioMacSleep();
   1F5C 12s00r00           7606 	lcall	_radioMacSleep
                    1F5F   7607 	C$mdrip.c$1052$2$4 ==.
                           7608 ;	apps/mdrip/mdrip.c:1052: if(usbPowerPresent()){
   1F5F 12s00r00           7609 	lcall	_usbPowerPresent
   1F62 50 06              7610 	jnc	00105$
                    1F64   7611 	C$mdrip.c$1053$3$5 ==.
                           7612 ;	apps/mdrip/mdrip.c:1053: sequential_missed_packets++;	// Why only increment this if usb connected?  It is incremented in get_packet also so a bit confusing
   1F64 78r3E              7613 	mov	r0,#_sequential_missed_packets
   1F66 E2                 7614 	movx	a,@r0
   1F67 24 01              7615 	add	a,#0x01
   1F69 F2                 7616 	movx	@r0,a
   1F6A                    7617 00105$:
                    1F6A   7618 	C$mdrip.c$1055$2$4 ==.
                           7619 ;	apps/mdrip/mdrip.c:1055: if(sequential_missed_packets > 0) {
   1F6A 78r3E              7620 	mov	r0,#_sequential_missed_packets
   1F6C E2                 7621 	movx	a,@r0
   1F6D 60 73              7622 	jz	00107$
                    1F6F   7623 	C$mdrip.c$1056$3$6 ==.
                           7624 ;	apps/mdrip/mdrip.c:1056: int first_square = sequential_missed_packets * sequential_missed_packets * wake_earlier_for_next_miss;
   1F6F 78r3E              7625 	mov	r0,#_sequential_missed_packets
   1F71 E2                 7626 	movx	a,@r0
   1F72 F5 F0              7627 	mov	b,a
   1F74 E2                 7628 	movx	a,@r0
   1F75 A4                 7629 	mul	ab
   1F76 F5 82              7630 	mov	dpl,a
   1F78 85 F0 83           7631 	mov	dph,b
   1F7B 78r00              7632 	mov	r0,#_wake_earlier_for_next_miss
   1F7D 79r00              7633 	mov	r1,#__mulint_PARM_2
   1F7F E2                 7634 	movx	a,@r0
   1F80 F3                 7635 	movx	@r1,a
   1F81 09                 7636 	inc	r1
   1F82 E4                 7637 	clr	a
   1F83 F3                 7638 	movx	@r1,a
   1F84 12s00r00           7639 	lcall	__mulint
   1F87 AE 82              7640 	mov	r6,dpl
   1F89 AF 83              7641 	mov	r7,dph
                    1F8B   7642 	C$mdrip.c$1057$3$6 ==.
                           7643 ;	apps/mdrip/mdrip.c:1057: int second_square = (sequential_missed_packets - 1) * (sequential_missed_packets - 1) * wake_earlier_for_next_miss;
   1F8B 78r3E              7644 	mov	r0,#_sequential_missed_packets
   1F8D E2                 7645 	movx	a,@r0
   1F8E 7D 00              7646 	mov	r5,#0x00
   1F90 24 FF              7647 	add	a,#0xFF
   1F92 F5 82              7648 	mov	dpl,a
   1F94 ED                 7649 	mov	a,r5
   1F95 34 FF              7650 	addc	a,#0xFF
   1F97 F5 83              7651 	mov	dph,a
   1F99 78r3E              7652 	mov	r0,#_sequential_missed_packets
   1F9B E2                 7653 	movx	a,@r0
   1F9C FC                 7654 	mov	r4,a
   1F9D 7D 00              7655 	mov	r5,#0x00
   1F9F 78r00              7656 	mov	r0,#__mulint_PARM_2
   1FA1 EC                 7657 	mov	a,r4
   1FA2 24 FF              7658 	add	a,#0xFF
   1FA4 F2                 7659 	movx	@r0,a
   1FA5 ED                 7660 	mov	a,r5
   1FA6 34 FF              7661 	addc	a,#0xFF
   1FA8 08                 7662 	inc	r0
   1FA9 F2                 7663 	movx	@r0,a
   1FAA C0 07              7664 	push	ar7
   1FAC C0 06              7665 	push	ar6
   1FAE 12s00r00           7666 	lcall	__mulint
   1FB1 AC 82              7667 	mov	r4,dpl
   1FB3 AD 83              7668 	mov	r5,dph
   1FB5 78r00              7669 	mov	r0,#_wake_earlier_for_next_miss
   1FB7 79r00              7670 	mov	r1,#__mulint_PARM_2
   1FB9 E2                 7671 	movx	a,@r0
   1FBA F3                 7672 	movx	@r1,a
   1FBB 09                 7673 	inc	r1
   1FBC E4                 7674 	clr	a
   1FBD F3                 7675 	movx	@r1,a
   1FBE 8C 82              7676 	mov	dpl,r4
   1FC0 8D 83              7677 	mov	dph,r5
   1FC2 12s00r00           7678 	lcall	__mulint
   1FC5 AC 82              7679 	mov	r4,dpl
   1FC7 AD 83              7680 	mov	r5,dph
   1FC9 D0 06              7681 	pop	ar6
   1FCB D0 07              7682 	pop	ar7
                    1FCD   7683 	C$mdrip.c$1059$3$6 ==.
                           7684 ;	apps/mdrip/mdrip.c:1059: int sleep_time = (195 - first_square + second_square);
   1FCD 74 C3              7685 	mov	a,#0xC3
   1FCF C3                 7686 	clr	c
   1FD0 9E                 7687 	subb	a,r6
   1FD1 FE                 7688 	mov	r6,a
   1FD2 E4                 7689 	clr	a
   1FD3 9F                 7690 	subb	a,r7
   1FD4 FF                 7691 	mov	r7,a
   1FD5 EC                 7692 	mov	a,r4
   1FD6 2E                 7693 	add	a,r6
   1FD7 F5 82              7694 	mov	dpl,a
   1FD9 ED                 7695 	mov	a,r5
   1FDA 3F                 7696 	addc	a,r7
   1FDB F5 83              7697 	mov	dph,a
                    1FDD   7698 	C$mdrip.c$1060$3$6 ==.
                           7699 ;	apps/mdrip/mdrip.c:1060: goToSleep(sleep_time);
   1FDD 12s17rEC           7700 	lcall	_goToSleep
   1FE0 80 06              7701 	sjmp	00108$
   1FE2                    7702 00107$:
                    1FE2   7703 	C$mdrip.c$1062$3$7 ==.
                           7704 ;	apps/mdrip/mdrip.c:1062: goToSleep(210); // Might need to be 200
   1FE2 90 00 D2           7705 	mov	dptr,#0x00D2
   1FE5 12s17rEC           7706 	lcall	_goToSleep
   1FE8                    7707 00108$:
                    1FE8   7708 	C$mdrip.c$1064$2$4 ==.
                           7709 ;	apps/mdrip/mdrip.c:1064: radioMacResume();
   1FE8 12s00r00           7710 	lcall	_radioMacResume
                    1FEB   7711 	C$mdrip.c$1065$2$4 ==.
                           7712 ;	apps/mdrip/mdrip.c:1065: MCSM1 = 0;
   1FEB 90 DF 13           7713 	mov	dptr,#_MCSM1
   1FEE E4                 7714 	clr	a
   1FEF F0                 7715 	movx	@dptr,a
                    1FF0   7716 	C$mdrip.c$1066$2$4 ==.
                           7717 ;	apps/mdrip/mdrip.c:1066: radioMacStrobe();
   1FF0 12s00r00           7718 	lcall	_radioMacStrobe
   1FF3 02s1Fr2F           7719 	ljmp	00110$
                    1FF6   7720 	C$mdrip.c$1068$1$1 ==.
                    1FF6   7721 	XG$main$0$0 ==.
   1FF6 22                 7722 	ret
                           7723 	.area CSEG    (CODE)
                           7724 	.area CONST   (CODE)
                    0000   7725 Fmdrip$apnString$0$0 == .
   0000                    7726 _apnString:
   0000 69 6E 74 65 72 6E  7727 	.ascii "internet"
        65 74
   0008 00                 7728 	.db 0x00
                    0009   7729 Fmdrip$wixFone_ID$0$0 == .
   0009                    7730 _wixFone_ID:
   0009 59 6F 75 72 49 44  7731 	.ascii "YourID"
   000F 00                 7732 	.db 0x00
                    0010   7733 Fmdrip$_str_0$0$0 == .
   0010                    7734 __str_0:
   0010 41 54 2B 43 46 55  7735 	.ascii "AT+CFUN=0"
        4E 3D 30
   0019 0D                 7736 	.db 0x0D
   001A 0A                 7737 	.db 0x0A
   001B 00                 7738 	.db 0x00
                    001C   7739 Fmdrip$_str_1$0$0 == .
   001C                    7740 __str_1:
   001C 41 54 45 30 26 57  7741 	.ascii "ATE0&W"
   0022 0D                 7742 	.db 0x0D
   0023 0A                 7743 	.db 0x0A
   0024 00                 7744 	.db 0x00
                    0025   7745 Fmdrip$_str_2$0$0 == .
   0025                    7746 __str_2:
   0025 41 54 2B 53 4C 45  7747 	.ascii "AT+SLEDS=1,50,7500"
        44 53 3D 31 2C 35
        30 2C 37 35 30 30
   0037 0D                 7748 	.db 0x0D
   0038 0A                 7749 	.db 0x0A
   0039 00                 7750 	.db 0x00
                    003A   7751 Fmdrip$_str_3$0$0 == .
   003A                    7752 __str_3:
   003A 41 54 26 57        7753 	.ascii "AT&W"
   003E 0D                 7754 	.db 0x0D
   003F 0A                 7755 	.db 0x0A
   0040 00                 7756 	.db 0x00
                    0041   7757 Fmdrip$_str_4$0$0 == .
   0041                    7758 __str_4:
   0041 41 54 2B 53 4C 45  7759 	.ascii "AT+SLEDS=2,500,2500"
        44 53 3D 32 2C 35
        30 30 2C 32 35 30
        30
   0054 0D                 7760 	.db 0x0D
   0055 0A                 7761 	.db 0x0A
   0056 00                 7762 	.db 0x00
                    0057   7763 Fmdrip$_str_5$0$0 == .
   0057                    7764 __str_5:
   0057 41 54 2B 53 4C 45  7765 	.ascii "AT+SLEDS=3,50,50"
        44 53 3D 33 2C 35
        30 2C 35 30
   0067 0D                 7766 	.db 0x0D
   0068 0A                 7767 	.db 0x0A
   0069 00                 7768 	.db 0x00
                    006A   7769 Fmdrip$_str_6$0$0 == .
   006A                    7770 __str_6:
   006A 41 54              7771 	.ascii "AT"
   006C 0D                 7772 	.db 0x0D
   006D 0A                 7773 	.db 0x0A
   006E 00                 7774 	.db 0x00
                    006F   7775 Fmdrip$_str_7$0$0 == .
   006F                    7776 __str_7:
   006F 41 54 2B 43 46 55  7777 	.ascii "AT+CFUN=1,1"
        4E 3D 31 2C 31
   007A 0D                 7778 	.db 0x0D
   007B 0A                 7779 	.db 0x0A
   007C 00                 7780 	.db 0x00
                    007D   7781 Fmdrip$_str_8$0$0 == .
   007D                    7782 __str_8:
   007D 41 54 2B 43 49 50  7783 	.ascii "AT+CIPCLOSE"
        43 4C 4F 53 45
   0088 0D                 7784 	.db 0x0D
   0089 0A                 7785 	.db 0x0A
   008A 00                 7786 	.db 0x00
                    008B   7787 Fmdrip$_str_9$0$0 == .
   008B                    7788 __str_9:
   008B 41 54 2B 43 47 41  7789 	.ascii "AT+CGATT=0"
        54 54 3D 30
   0095 0D                 7790 	.db 0x0D
   0096 0A                 7791 	.db 0x0A
   0097 00                 7792 	.db 0x00
                    0098   7793 Fmdrip$_str_10$0$0 == .
   0098                    7794 __str_10:
   0098 41 54 2B 43 49 50  7795 	.ascii "AT+CIPSHUT"
        53 48 55 54
   00A2 0D                 7796 	.db 0x0D
   00A3 0A                 7797 	.db 0x0A
   00A4 00                 7798 	.db 0x00
                    00A5   7799 Fmdrip$_str_11$0$0 == .
   00A5                    7800 __str_11:
   00A5 41 54 2B 43 53 54  7801 	.ascii "AT+CSTT="
        54 3D
   00AD 00                 7802 	.db 0x00
                    00AE   7803 Fmdrip$_str_12$0$0 == .
   00AE                    7804 __str_12:
   00AE 0D                 7805 	.db 0x0D
   00AF 0A                 7806 	.db 0x0A
   00B0 00                 7807 	.db 0x00
                    00B1   7808 Fmdrip$_str_13$0$0 == .
   00B1                    7809 __str_13:
   00B1 41 54 2B 43 47 41  7810 	.ascii "AT+CGATT?"
        54 54 3F
   00BA 0D                 7811 	.db 0x0D
   00BB 0A                 7812 	.db 0x0A
   00BC 00                 7813 	.db 0x00
                    00BD   7814 Fmdrip$_str_14$0$0 == .
   00BD                    7815 __str_14:
   00BD 41 54 2B 43 49 49  7816 	.ascii "AT+CIICR"
        43 52
   00C5 0D                 7817 	.db 0x0D
   00C6 0A                 7818 	.db 0x0A
   00C7 00                 7819 	.db 0x00
                    00C8   7820 Fmdrip$_str_15$0$0 == .
   00C8                    7821 __str_15:
   00C8 41 54 2B 43 49 46  7822 	.ascii "AT+CIFSR"
        53 52
   00D0 0D                 7823 	.db 0x0D
   00D1 0A                 7824 	.db 0x0A
   00D2 00                 7825 	.db 0x00
                    00D3   7826 Fmdrip$_str_16$0$0 == .
   00D3                    7827 __str_16:
   00D3 41 54 2B 43 49 50  7828 	.ascii "AT+CIPSTART=tcp,"
        53 54 41 52 54 3D
        74 63 70 2C
   00E3 00                 7829 	.db 0x00
                    00E4   7830 Fmdrip$_str_17$0$0 == .
   00E4                    7831 __str_17:
   00E4 41 54 2B 43 49 50  7832 	.ascii "AT+CIPSEND"
        53 45 4E 44
   00EE 0D                 7833 	.db 0x0D
   00EF 0A                 7834 	.db 0x0A
   00F0 00                 7835 	.db 0x00
                    00F1   7836 Fmdrip$_str_18$0$0 == .
   00F1                    7837 __str_18:
   00F1 41 54 45 30        7838 	.ascii "ATE0"
   00F5 0D                 7839 	.db 0x0D
   00F6 0A                 7840 	.db 0x0A
   00F7 00                 7841 	.db 0x00
                    00F8   7842 Fmdrip$_str_19$0$0 == .
   00F8                    7843 __str_19:
   00F8 41 54 2B 43 42 43  7844 	.ascii "AT+CBC"
   00FE 0D                 7845 	.db 0x0D
   00FF 0A                 7846 	.db 0x0A
   0100 00                 7847 	.db 0x00
                    0101   7848 Fmdrip$_str_20$0$0 == .
   0101                    7849 __str_20:
   0101 43 42 43 3E 20     7850 	.ascii "CBC> "
   0106 00                 7851 	.db 0x00
                    0107   7852 Fmdrip$_str_21$0$0 == .
   0107                    7853 __str_21:
   0107 41 54 2B 43 44 4E  7854 	.ascii "AT+CDNSCFG=8.8.8.8"
        53 43 46 47 3D 38
        2E 38 2E 38 2E 38
   0119 0D                 7855 	.db 0x0D
   011A 0A                 7856 	.db 0x0A
   011B 00                 7857 	.db 0x00
                    011C   7858 Fmdrip$_str_22$0$0 == .
   011C                    7859 __str_22:
   011C 41 54 2B 53 41 50  7860 	.ascii "AT+SAPBR=0,1"
        42 52 3D 30 2C 31
   0128 0D                 7861 	.db 0x0D
   0129 0A                 7862 	.db 0x0A
   012A 00                 7863 	.db 0x00
                    012B   7864 Fmdrip$_str_23$0$0 == .
   012B                    7865 __str_23:
   012B 41 54 2B 53 41 50  7866 	.ascii "AT+SAPBR=3,1,"
        42 52 3D 33 2C 31
        2C
   0138 22                 7867 	.db 0x22
   0139 43 6F 6E 74 79 70  7868 	.ascii "Contype"
        65
   0140 22                 7869 	.db 0x22
   0141 2C 47 50 52 53     7870 	.ascii ",GPRS"
   0146 0D                 7871 	.db 0x0D
   0147 0A                 7872 	.db 0x0A
   0148 00                 7873 	.db 0x00
                    0149   7874 Fmdrip$_str_24$0$0 == .
   0149                    7875 __str_24:
   0149 41 54 2B 53 41 50  7876 	.ascii "AT+SAPBR=3,1,"
        42 52 3D 33 2C 31
        2C
   0156 22                 7877 	.db 0x22
   0157 41 50 4E           7878 	.ascii "APN"
   015A 22                 7879 	.db 0x22
   015B 2C                 7880 	.ascii ","
   015C 22                 7881 	.db 0x22
   015D 69 6E 74 65 72 6E  7882 	.ascii "internet"
        65 74
   0165 22                 7883 	.db 0x22
   0166 0D                 7884 	.db 0x0D
   0167 0A                 7885 	.db 0x0A
   0168 00                 7886 	.db 0x00
                    0169   7887 Fmdrip$_str_25$0$0 == .
   0169                    7888 __str_25:
   0169 41 54 2B 53 41 50  7889 	.ascii "AT+SAPBR=1,1"
        42 52 3D 31 2C 31
   0175 0D                 7890 	.db 0x0D
   0176 0A                 7891 	.db 0x0A
   0177 00                 7892 	.db 0x00
                    0178   7893 Fmdrip$_str_26$0$0 == .
   0178                    7894 __str_26:
   0178 41 54 2B 43 49 50  7895 	.ascii "AT+CIPGSMLOC=1,1"
        47 53 4D 4C 4F 43
        3D 31 2C 31
   0188 0D                 7896 	.db 0x0D
   0189 0A                 7897 	.db 0x0A
   018A 00                 7898 	.db 0x00
                    018B   7899 Fmdrip$_str_27$0$0 == .
   018B                    7900 __str_27:
   018B 39 39 39           7901 	.ascii "999"
   018E 00                 7902 	.db 0x00
                    018F   7903 Fmdrip$_str_29$0$0 == .
   018F                    7904 __str_29:
   018F 25 73 20 25 68 68  7905 	.ascii "%s %hhu %s %lu %lu %d %d %hhu %s"
        75 20 25 73 20 25
        6C 75 20 25 6C 75
        20 25 64 20 25 64
        20 25 68 68 75 20
        25 73
   01AF 00                 7906 	.db 0x00
                    01B0   7907 Fmdrip$_str_30$0$0 == .
   01B0                    7908 __str_30:
   01B0 78 44 72 69 70 32  7909 	.ascii "xDrip2g(AES): "
        67 28 41 45 53 29
        3A 20
   01BE 00                 7910 	.db 0x00
                    01BF   7911 Fmdrip$_str_31$0$0 == .
   01BF                    7912 __str_31:
   01BF 25 30 32 78        7913 	.ascii "%02x"
   01C3 00                 7914 	.db 0x00
                    01C4   7915 Fmdrip$_str_32$0$0 == .
   01C4                    7916 __str_32:
   01C4 20                 7917 	.ascii " "
   01C5 00                 7918 	.db 0x00
                    01C6   7919 Fmdrip$_str_33$0$0 == .
   01C6                    7920 __str_33:
   01C6 0D                 7921 	.db 0x0D
   01C7 0A                 7922 	.db 0x0A
   01C8 1A                 7923 	.db 0x1A
   01C9 00                 7924 	.db 0x00
                    01CA   7925 Fmdrip$_str_34$0$0 == .
   01CA                    7926 __str_34:
   01CA 1A                 7927 	.db 0x1A
   01CB 00                 7928 	.db 0x00
                    01CC   7929 Fmdrip$_str_36$0$0 == .
   01CC                    7930 __str_36:
   01CC 41 54 2B 4E 41 4D  7931 	.ascii "AT+NAMExDrip"
        45 78 44 72 69 70
   01D8 00                 7932 	.db 0x00
                    01D9   7933 Fmdrip$_str_37$0$0 == .
   01D9                    7934 __str_37:
   01D9 36 46 35 59 50     7935 	.ascii "6F5YP"
   01DE 00                 7936 	.db 0x00
                    01DF   7937 Fmdrip$_str_38$0$0 == .
   01DF                    7938 __str_38:
   01DF 52 45 50 4C 41 43  7939 	.ascii "REPLACEME.DuckDNS.org,17611"
        45 4D 45 2E 44 75
        63 6B 44 4E 53 2E
        6F 72 67 2C 31 37
        36 31 31
   01FA 00                 7940 	.db 0x00
                           7941 	.area XINIT   (CODE)
                    0000   7942 Fmdrip$__xinit_transmitter_id$0$0 == .
   0000                    7943 __xinit__transmitter_id:
   0000 36 46 35 59 50     7944 	.ascii "6F5YP"
   0005 00                 7945 	.db 0x00
                    0006   7946 Fmdrip$__xinit_dexie_host_address$0$0 == .
   0006                    7947 __xinit__dexie_host_address:
   0006 52 45 50 4C 41 43  7948 	.ascii "REPLACEME.DuckDNS.org,17611"
        45 4D 45 2E 44 75
        63 6B 44 4E 53 2E
        6F 72 67 2C 31 37
        36 31 31
   0021 00                 7949 	.db 0x00
                    0022   7950 Fmdrip$__xinit_start_channel$0$0 == .
   0022                    7951 __xinit__start_channel:
   0022 00                 7952 	.db #0x00	;  0
                    0023   7953 Fmdrip$__xinit_defaultfOffset$0$0 == .
   0023                    7954 __xinit__defaultfOffset:
   0023 CE                 7955 	.db #0xCE	; -50
   0024 D5                 7956 	.db #0xD5	; -43
   0025 E6                 7957 	.db #0xE6	; -26
   0026 E5                 7958 	.db #0xE5	; -27
                    0027   7959 Fmdrip$__xinit_PM2_BUF$0$0 == .
   0027                    7960 __xinit__PM2_BUF:
   0027 06                 7961 	.db #0x06	; 6
   0028 06                 7962 	.db #0x06	; 6
   0029 06                 7963 	.db #0x06	; 6
   002A 06                 7964 	.db #0x06	; 6
   002B 06                 7965 	.db #0x06	; 6
   002C 06                 7966 	.db #0x06	; 6
   002D 04                 7967 	.db #0x04	; 4
                    002E   7968 Fmdrip$__xinit_dmaDesc$0$0 == .
   002E                    7969 __xinit__dmaDesc:
   002E 00                 7970 	.db #0x00	; 0
   002F 00                 7971 	.db #0x00	; 0
   0030 DF                 7972 	.db #0xDF	; 223
   0031 BE                 7973 	.db #0xBE	; 190
   0032 00                 7974 	.db #0x00	; 0
   0033 07                 7975 	.db #0x07	; 7
   0034 20                 7976 	.db #0x20	; 32
   0035 42                 7977 	.db #0x42	; 66	'B'
                    0036   7978 Fmdrip$__xinit_AT_TIMEOUT$0$0 == .
   0036                    7979 __xinit__AT_TIMEOUT:
   0036 14                 7980 	.db #0x14	; 20
                    0037   7981 Fmdrip$__xinit_defaultATWait$0$0 == .
   0037                    7982 __xinit__defaultATWait:
   0037 B8 0B 00 00        7983 	.byte #0xB8,#0x0B,#0x00,#0x00	; 3000
                    003B   7984 Fmdrip$__xinit_key$0$0 == .
   003B                    7985 __xinit__key:
   003B 4D                 7986 	.db #0x4D	; 77	'M'
   003C 79                 7987 	.db #0x79	; 121	'y'
   003D 6D                 7988 	.db #0x6D	; 109	'm'
   003E 44                 7989 	.db #0x44	; 68	'D'
   003F 72                 7990 	.db #0x72	; 114	'r'
   0040 7C                 7991 	.db #0x7C	; 124
   0041 50                 7992 	.db #0x50	; 80	'P'
   0042 26                 7993 	.db #0x26	; 38
   0043 41                 7994 	.db #0x41	; 65	'A'
   0044 45                 7995 	.db #0x45	; 69	'E'
   0045 53                 7996 	.db #0x53	; 83	'S'
   0046 72                 7997 	.db #0x72	; 114	'r'
   0047 40                 7998 	.db #0x40	; 64
   0048 5B                 7999 	.db #0x5B	; 91
   0049 4B                 8000 	.db #0x4B	; 75	'K'
   004A 21                 8001 	.db #0x21	; 33
                    004B   8002 Fmdrip$__xinit_SrcNameTable$0$0 == .
   004B                    8003 __xinit__SrcNameTable:
   004B 30                 8004 	.db #0x30	;  48	'0'
   004C 31                 8005 	.db #0x31	;  49	'1'
   004D 32                 8006 	.db #0x32	;  50	'2'
   004E 33                 8007 	.db #0x33	;  51	'3'
   004F 34                 8008 	.db #0x34	;  52	'4'
   0050 35                 8009 	.db #0x35	;  53	'5'
   0051 36                 8010 	.db #0x36	;  54	'6'
   0052 37                 8011 	.db #0x37	;  55	'7'
   0053 38                 8012 	.db #0x38	;  56	'8'
   0054 39                 8013 	.db #0x39	;  57	'9'
   0055 41                 8014 	.db #0x41	;  65	'A'
   0056 42                 8015 	.db #0x42	;  66	'B'
   0057 43                 8016 	.db #0x43	;  67	'C'
   0058 44                 8017 	.db #0x44	;  68	'D'
   0059 45                 8018 	.db #0x45	;  69	'E'
   005A 46                 8019 	.db #0x46	;  70	'F'
   005B 47                 8020 	.db #0x47	;  71	'G'
   005C 48                 8021 	.db #0x48	;  72	'H'
   005D 4A                 8022 	.db #0x4A	;  74	'J'
   005E 4B                 8023 	.db #0x4B	;  75	'K'
   005F 4C                 8024 	.db #0x4C	;  76	'L'
   0060 4D                 8025 	.db #0x4D	;  77	'M'
   0061 4E                 8026 	.db #0x4E	;  78	'N'
   0062 50                 8027 	.db #0x50	;  80	'P'
   0063 51                 8028 	.db #0x51	;  81	'Q'
   0064 52                 8029 	.db #0x52	;  82	'R'
   0065 53                 8030 	.db #0x53	;  83	'S'
   0066 54                 8031 	.db #0x54	;  84	'T'
   0067 55                 8032 	.db #0x55	;  85	'U'
   0068 57                 8033 	.db #0x57	;  87	'W'
   0069 58                 8034 	.db #0x58	;  88	'X'
   006A 59                 8035 	.db #0x59	;  89	'Y'
                           8036 	.area CABS    (ABS,CODE)
